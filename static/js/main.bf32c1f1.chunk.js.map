{"version":3,"sources":["Components/GameUI/HeldBlock.module.css","Components/Multiplayer/Components/PieceQueue.module.css","Components/GameUI/PieceQueue.module.css","Components/GameUI/GameSettings.module.css","Components/UI/Login.module.css","Components/Multiplayer/InviteNotification.module.css","Components/UI/Modal.module.css","Components/GameUI/Block.module.css","Components/GameUI/ReadyGo.module.css","Components/Multiplayer/OtherUser.module.css","Components/Multiplayer/WaitingMessage.module.css","Components/Multiplayer/Components/Block.module.css","Components/Multiplayer/Components/ReadyGo.module.css","Components/Multiplayer/Components/LineClearedCounter.module.css","Components/GameUI/Grid.module.css","Components/UI/Card.module.css","Components/Multiplayer/Components/Grid.module.css","Components/Multiplayer/Components/LeaveRoom.module.css","Components/UI/NavigationBar.module.css","store/Controls.js","Components/UI/Modal.js","Components/KeyBindings/KeyBinding.js","Components/KeyBindings/KeyBindings.js","modules/firebase-config.js","modules/KeyControls.js","Components/GameUI/Tetrimino.js","modules/piece-queue.js","store/GameState.js","Hooks/use-input.js","Components/GameUI/GameSettings.js","Components/GameUI/GameSettingsButton.js","Components/GameUI/Block.js","Components/GameUI/ReadyGo.js","Components/GameUI/Grid.js","Components/GameUI/HeldBlock.js","Components/GameUI/LinesCleared.js","Components/GameUI/PieceQueuePiece.js","Components/GameUI/PieceQueue.js","Components/GameUI/StopWatch.js","Components/GameUI/Game.js","Pages/SinglePlayer.js","Components/UI/Card.js","store/UserInfo.js","Components/Multiplayer/OtherUser.js","Components/Multiplayer/OtherUsers.js","Components/Multiplayer/WaitingMessage.js","store/GameState2.js","Components/Multiplayer/InviteNotification.js","Components/Multiplayer/InviteNotfications.js","Components/Multiplayer/Components/Block.js","Components/Multiplayer/Components/ReadyGo.js","Components/Multiplayer/Components/Grid.js","Components/Multiplayer/Components/Tetrimino.js","Components/Multiplayer/Components/PieceQueuePiece.js","Components/Multiplayer/Components/PieceQueue.js","Components/Multiplayer/Components/LineClearedCounter.js","Components/Multiplayer/Components/WhoseTurnText.js","Components/Multiplayer/Components/InputForm.js","Components/Multiplayer/InnerGame.js","Components/Multiplayer/GameShared.js","Components/Multiplayer/Components/LeaveRoom.js","Pages/TwoPlayer.js","Components/UI/Login.js","Components/UI/NavigationBar.js","App.js","store/index.js","index.js"],"names":["module","exports","controlsSlice","createSlice","name","initialState","newGame","moveLeft","moveRight","softDrop","hardDrop","rotateLeft","rotateRight","hold","reducers","resetDefault","state","resetAlbert","setNewControls","newControls","payload","controlsActions","actions","Backdrop","props","className","styles","backdrop","onClick","ModalOverlay","children","modal","Modal","portalElement","document","getElementById","createPortal","KeyBinding","controlName","input","setInput","currentKey","useState","bindingBeingChanged","setBindingBeingChanged","useEffect","onkeydown","keycode","key","displayWord","htmlFor","onChange","event","target","value","length","blur","onFocus","onBlur","id","KeyBindings","setShowKeyBindings","dispatch","useDispatch","controls","useSelector","newGameInput","setNewGameInput","rotateRightInput","setRotateRightInput","rotateLeftInput","setRotateLeftInput","holdInput","setHoldInput","hardDropInput","setHardDropInput","softDropInput","setSoftDropInput","moveLeftInput","setMoveLeftInput","moveRightInput","setMoveRightInput","style","float","memo","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","db","getDatabase","rootRef","ref","onlineUsersRef","child","roomsRef","getUsernameFromuid","uid","get","then","snapshot","username","val","keyIsPressed","keyIsDisabled","keyShiftCounter","KeyControls","window","addEventListener","preventDefault","stopPropagation","TETRIMINOS","I","T","L","J","Z","S","O","Queue","this","elements","head","tail","element","item","isEmpty","dequeue","pieceArray","getRandomPiece","Math","floor","random","splice","getCoords","type","rotatePos","xPos","yPos","map","row","rowPos","col","colPos","x","y","convertMappingToCoords","mapping","forGhost","coordArray","array","coord","coordIsValid","push","gameStateInitialState","playerNumber","gameRunning","currentShape","currentCoords","ghostCoords","pieceQueue","heldPiece","linesCleared","linesToClear","gameSpeed","currentGameStatus","grid","rotated","displayMessage","endTurn","gettingPiece","removeLastState","placeBlocks","copiedGrid","nested","slice","colorName","currentCoord","gameStateSlice","resetSP","gettingReadySP","i","enqueue","newGameSP","clearLinesSP","newGrid","every","blockType","unshift","setGettingNewPieceSP","bool","getNewPieceSP","rotatePieceSP","action","originalRotatePos","isCounterClockwise","rotatePiece","dropPieceSP","getGhostCoordsSP","removeLastGhostPiece","ghostYPos","hardDropSP","showGhostPieceSP","shiftLeftSP","shiftRightSP","gameWonSP","resetRotationSP","holdPieceSP","placeHolder","setDisplayMessageSP","setSettings","settings","setSettingsDefault","gameStateActions","useInput","validateFunction","defaultValue","setValue","isTouched","setIsTouched","isValueValid","hasError","valueChangeHandler","blurHandler","reset","GameSettings","currentGameSpeed","gameState","currentLines","speed","speedToDisplay","speedHasError","speedChangeHandler","speedBlurHandler","setSpeed","lines","linesToDisplay","linesHasError","linesChangeHandler","linesBlurHandler","setLines","speedInputClass","linesInputClass","disabled","GameSettingsButton","showOverlay","setShowOverLay","Block","color","showSettings","block","ReadyGo","readyGo","Grid","y_pos","display","x_pos","HeldBlock","heldBlockOuter","title","gridRow","LinesCleared","PieceQueuePiece","pieceRow","piece","PieceQueue","pieces","pieceColor","StopWatch","miliseconds","setMiliseconds","seconds","setSeconds","minutes","setMinutes","incrementInterval","setInterval","clearInterval","startButtonLocked","Game","beginGame","Promise","resolve","setTimeout","keyHandler","dropPieceInterval","handleInputInterval","shiftInputInterval","keyShiftHandler","flexWrap","justifyContent","flexDirection","textAlign","SinglePlayer","Card","card","opponentRef","userInfoSlice","isLoggedIn","roomStatus","otherUsers","roomKey","opponentName","opponentID","invitationKeys","displayText","myName","login","logout","setOtherUsers","users","setRoomKey","setRoomStatus","newStatus","setOpponentName","setOpponentid","setInvitiationKeys","keysList","setGrid","setDisplayText","text","userInfoActions","OtherUser","pushRoomsRef","createRoomHandler","off","set","player1","currentUser","player2","accepted","OtherUsers","otherUsersList","userInfo","otherUserListDisplay","pair","index","WaitingMessage","cancelRoomHandler","myCurrentShape","myCurrentCoords","myGhostCoords","myPieceQueue","myHeldPiece","myLinesCleared","opponentPieceQueue","opponentHeldPiece","opponentLinesCleared","myTurn","lineDeduction","keepTurn","keepTurn2","turnTaken","myRoomRef","gameStateSlice2","LINESTOCLEAR","gettingReady","setOpponentInfo","clearLines","unfreeze","getNewPiece","dropPiece","getGhostCoords","showGhostPiece","shiftLeft","shiftRight","placeCurrentPiece","gameWon","holdPiece","currentPieceState","setMultiplayer","roomRef","setDisplayMessage","includes","setMyTurn","setMyLinesCleared","setLinesToClear","setTurnTaken","gameStateActions2","InviteNotification","opponentuid","getOpponentName","acceptInvite","declineInvite","InviteNotifications","invitations","margin","gameState2","player","opponentPieces","LineClearedCounter","opponentCounter","myCounter","counterOpponent","counterMyself","WhoseTurnText","height","InputForm","linesToClearInput","setLinesToClearInput","onValue","exists","controlsLocked","InnerGame","gameLoop","GameShared","gameQueue","onDisconnect","LeaveRoom","leaveRoomHandler","TwoPlayer","userStatus","remove","Object","entries","filter","inRoom","onChildAdded","room","onChildRemoved","skip","Login","loggingIn","setLoggingIn","usernameInput","setUsernameInput","showError","setShowError","loginHandler","trim","signInAnonymously","logoutHandler","signOut","errorMessage","onSubmit","NavigationBar","setPage","App","page","showKeyBindings","onAuthStateChanged","user","Fragment","pageName","store","configureStore","reducer","gameStateReducer","userInfoReducer","gameStateReducer2","controlsSliceReducer","ReactDOM","createRoot","render"],"mappings":"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","file":"static/js/main.bf32c1f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HeldBlock_title__-UOyq\",\"heldBlockOuter\":\"HeldBlock_heldBlockOuter__1Xhyv\",\"grid\":\"HeldBlock_grid__rrQf0\",\"gridRow\":\"HeldBlock_gridRow__2llk9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pieceQueue\":\"PieceQueue_pieceQueue___hxZt\",\"piece\":\"PieceQueue_piece__NTkk0\",\"pieceRow\":\"PieceQueue_pieceRow__1CaEL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pieceQueue\":\"PieceQueue_pieceQueue__N5gJS\",\"piece\":\"PieceQueue_piece__1nqbS\",\"pieceRow\":\"PieceQueue_pieceRow__2ZzqI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"everything\":\"GameSettings_everything__3aoE2\",\"invalid\":\"GameSettings_invalid__HAlhD\",\"valid\":\"GameSettings_valid__3a2OQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__2ZnT8\",\"error-text\":\"Login_error-text__1rXdS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"invite\":\"InviteNotification_invite__3ZfLo\",\"accept\":\"InviteNotification_accept__3F_oe\",\"decline\":\"InviteNotification_decline__2_IiA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__2znzX\",\"fade-in\":\"Modal_fade-in__1v-Qz\",\"modal\":\"Modal_modal__2QgxK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Block_block__1kjjl\",\"None\":\"Block_None__ltR1S\",\"I\":\"Block_I__1Pnys\",\"T\":\"Block_T__WdEBm\",\"L\":\"Block_L__1zsbc\",\"J\":\"Block_J__2iV29\",\"Z\":\"Block_Z__28EjD\",\"S\":\"Block_S__MKS_j\",\"O\":\"Block_O__3X5pc\",\"Ighost\":\"Block_Ighost__1pBKL\",\"Tghost\":\"Block_Tghost__2h680\",\"Lghost\":\"Block_Lghost__3KiXo\",\"Jghost\":\"Block_Jghost__9BTwX\",\"Zghost\":\"Block_Zghost__3ytmC\",\"Sghost\":\"Block_Sghost__1z9Pj\",\"Oghost\":\"Block_Oghost__34NVA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"readyGo\":\"ReadyGo_readyGo__18l16\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OtherUser\":\"OtherUser_OtherUser__c1mKe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"WaitingMessage_span__2-5Ka\",\"cancel\":\"WaitingMessage_cancel__3ScKO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Block_block__7hl6T\",\"None\":\"Block_None__2PHRA\",\"I\":\"Block_I__2hPz5\",\"T\":\"Block_T__1zbV7\",\"L\":\"Block_L__vPAnW\",\"J\":\"Block_J__1lt8I\",\"Z\":\"Block_Z__2BuFD\",\"S\":\"Block_S__36R4_\",\"O\":\"Block_O__1LvhJ\",\"Ighost\":\"Block_Ighost__lbI0G\",\"Tghost\":\"Block_Tghost__3-N71\",\"Lghost\":\"Block_Lghost__2imGj\",\"Jghost\":\"Block_Jghost__3QcrR\",\"Zghost\":\"Block_Zghost__eEqpK\",\"Sghost\":\"Block_Sghost__2Fbny\",\"Oghost\":\"Block_Oghost__1cvVz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"readyGo\":\"ReadyGo_readyGo__3i4cO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterOpponent\":\"LineClearedCounter_counterOpponent__3bjI0\",\"counterMyself\":\"LineClearedCounter_counterMyself__2Fnqt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__9Fsru\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2N-0v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__3hTgC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leave-room\":\"LeaveRoom_leave-room__3SrUE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav-bar\":\"NavigationBar_nav-bar__WRYyO\"};","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialControlsState = {\n   newGame: \"Escape\",\n   moveLeft: \"ArrowLeft\",\n   moveRight: \"ArrowRight\",\n   softDrop: \"ArrowDown\",\n   hardDrop: \" \",\n   rotateLeft: \"z\",\n   rotateRight: \"ArrowUp\",\n   hold: \"c\",\n};\n\nconst controlsSlice = createSlice({\n   name: \"controls\",\n   initialState: initialControlsState,\n   reducers: {\n      resetDefault(state) {\n        state.newGame= \"Escape\";\n        state.moveLeft= \"ArrowLeft\";\n        state.moveRight= \"ArrowRight\";\n        state.softDrop= \"ArrowDown\";\n        state.hardDrop= \" \";\n        state.rotateLeft= \"z\";\n        state.rotateRight= \"ArrowUp\";\n        state.hold= \"c\";\n      },\n      resetAlbert(state) {\n        state.newGame= \"Escape\";\n        state.moveLeft= \"ArrowLeft\";\n        state.moveRight= \"ArrowRight\";\n        state.softDrop= \"ArrowDown\";\n        state.hardDrop= \" \";\n        state.rotateLeft= \"q\";\n        state.rotateRight= \"w\";\n        state.hold= \"Tab\";\n      },\n      setNewControls(state,newControls){\n        state.newGame= newControls.payload.newGame\n        state.moveLeft= newControls.payload.moveLeft\n        state.moveRight= newControls.payload.moveRight\n        state.softDrop= newControls.payload.softDrop\n        state.hardDrop= newControls.payload.hardDrop\n        state.rotateLeft= newControls.payload.rotateLeft\n        state.rotateRight= newControls.payload.rotateRight\n        state.hold= newControls.payload.hold\n      }\n   },\n});\n\nexport const controlsActions = controlsSlice.actions;\n\nexport default controlsSlice.reducer;","import { Fragment } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport styles from \"./Modal.module.css\";\nconst Backdrop = (props) => {\n   return <div className={styles.backdrop} onClick={props.onClick} ></div>;\n};\n\nconst ModalOverlay = ({ children }) => {\n   return <div className={styles.modal}>{children}</div>;\n};\n\n\nconst Modal = (props) => {\n    const portalElement = document.getElementById(\"overlays\");\n    return (\n      <Fragment>\n        {createPortal(\n          <Backdrop onClick={props.onClick} />,\n          portalElement\n        )}\n        {createPortal(\n          <ModalOverlay>{props.children}</ModalOverlay>,\n          portalElement\n        )}\n      </Fragment>\n    );\n  };\n\nexport default Modal;\n","import { useEffect, useState } from \"react\";\n\nconst KeyBinding = ({ controlName, input, setInput, currentKey }) => {\n   const [bindingBeingChanged, setBindingBeingChanged] = useState(false);\n   useEffect(() => {\n      document.onkeydown = (keycode) => {\n         if (bindingBeingChanged) {\n            setInput(keycode.key);\n         }\n      };\n   }, [bindingBeingChanged,setInput]);\n   let displayWord = input;\n   if (displayWord === \" \") {\n      displayWord = \"space\";\n   }\n   useEffect(() => {\n      setInput(currentKey);\n   },[currentKey,setInput]);\n   return (\n      <div>\n         <label htmlFor={controlName}>{`${controlName} `}</label>\n         <input\n            onChange={(event) => {\n               if (event.target.value.length === 1) {\n                  event.target.blur();\n               }\n            }}\n            onFocus={(event) => {\n               setInput(\"\");\n               setBindingBeingChanged(true);\n            }}\n            onBlur={(event) => {\n               if (event.target.value === \"\") {\n                  setInput(currentKey);\n               }\n               setBindingBeingChanged(false);\n            }}\n            id={controlName}\n            value={displayWord}\n         ></input>\n      </div>\n   );\n};\nexport default KeyBinding;\n","import { memo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { controlsActions } from \"../../store/Controls\";\nimport Modal from \"../UI/Modal\";\nimport KeyBinding from \"./KeyBinding\";\n\nconst KeyBindings = ({ setShowKeyBindings }) => {\n   const dispatch = useDispatch();\n   const controls = useSelector((state) => state.controls);\n   const [newGameInput, setNewGameInput] = useState(controls[\"newGame\"]);\n   const [rotateRightInput, setRotateRightInput] = useState(controls[\"rotateRight\"]);\n   const [rotateLeftInput, setRotateLeftInput] = useState(controls[\"rotateLeft\"]);\n   const [holdInput, setHoldInput] = useState(controls[\"hold\"]);\n   const [hardDropInput, setHardDropInput] = useState(controls[\"hardDrop\"]);\n   const [softDropInput, setSoftDropInput] = useState(controls[\"softDrop\"]);\n   const [moveLeftInput, setMoveLeftInput] = useState(controls[\"moveLeft\"]);\n   const [moveRightInput, setMoveRightInput] = useState(controls[\"moveRight\"]);\n   return (\n      <Modal\n         onClick={() => {\n            setShowKeyBindings(false);\n         }}\n      >\n         <button\n            onClick={() => {\n               setShowKeyBindings(false);\n            }}\n            style={{ float: \"right\" }}\n         >\n            X\n         </button>\n         <KeyBinding\n            controlName=\"newGame\"\n            currentKey={controls[\"newGame\"]}\n            input={newGameInput}\n            setInput={setNewGameInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"rotateRight\"]}\n            controlName=\"rotateRight\"\n            input={rotateRightInput}\n            setInput={setRotateRightInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"rotateLeft\"]}\n            controlName=\"rotateLeft\"\n            input={rotateLeftInput}\n            setInput={setRotateLeftInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"hold\"]}\n            controlName=\"hold\"\n            input={holdInput}\n            setInput={setHoldInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"hardDrop\"]}\n            controlName=\"hardDrop\"\n            input={hardDropInput}\n            setInput={setHardDropInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"softDrop\"]}\n            controlName=\"softDrop\"\n            input={softDropInput}\n            setInput={setSoftDropInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"moveLeft\"]}\n            controlName=\"moveLeft\"\n            input={moveLeftInput}\n            setInput={setMoveLeftInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"moveRight\"]}\n            controlName=\"moveRight\"\n            input={moveRightInput}\n            setInput={setMoveRightInput}\n         />\n         <div>\n            <button\n               onClick={() => {\n                  dispatch(controlsActions.resetDefault());\n               }}\n            >\n               Default\n            </button>\n            <button\n               onClick={() => {\n                  dispatch(controlsActions.resetAlbert());\n               }}\n            >\n               Albert\n            </button>\n            <button\n               onClick={() => {\n                  dispatch(\n                     controlsActions.setNewControls({\n                        newGame: newGameInput,\n                        rotateRight: rotateRightInput,\n                        rotateLeft: rotateLeftInput,\n                        hardDrop:hardDropInput,\n                        softDrop:softDropInput,\n                        moveLeft:moveLeftInput,\n                        moveRight:moveRightInput,\n                        hold:holdInput\n                     })\n                  );\n               }}\n            >\n               Save\n            </button>\n         </div>\n      </Modal>\n   );\n};\n\nexport default memo(KeyBindings);\n","// Import the functions you need from the SDKs you need\nimport { getAuth } from \"@firebase/auth\";\nimport { child, get, getDatabase, ref } from \"@firebase/database\";\nimport { initializeApp } from \"firebase/app\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n   apiKey: \"AIzaSyA9ipNK6_boqbwThQlJgolni-O5iIgIl40\",\n   authDomain: \"ditris-2244c.firebaseapp.com\",\n   databaseURL: \"https://ditris-2244c-default-rtdb.firebaseio.com\",\n   projectId: \"ditris-2244c\",\n   storageBucket: \"ditris-2244c.appspot.com\",\n   messagingSenderId: \"743373731037\",\n   appId: \"1:743373731037:web:9552a80db8b0df8d875734\",\n};\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\nexport const auth = getAuth();\nexport const db = getDatabase();\nexport const rootRef = ref(db);\nexport const onlineUsersRef = child(rootRef, \"users\");\nexport const roomsRef = child(rootRef, \"rooms\");\nexport const getUsernameFromuid = async (uid) => {\n   let username;\n   await get(child(onlineUsersRef, uid)).then((snapshot) => {\n      username = snapshot.val().username;\n   });\n   return username;\n};\n","export let keyIsPressed = {};\nexport let keyIsShifted = {};\nexport let keyIsDisabled = {};\nexport let keyShiftCounter = {};\n\nconst KeyControls = () => {\n  window.addEventListener(\"keydown\", (event) => {\n    keyIsPressed[event.key] = true\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    if (event.key === \"ArrowDown\") {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    if (event.key === \"ArrowUp\") {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  });\n  window.addEventListener(\"keyup\", (event) => {\n    keyShiftCounter[event.key] = 0\n    keyIsPressed[event.key] = false\n    keyIsDisabled[event.key] = false;\n  });\n\n  \n};\n\nexport default KeyControls;\n","export const TETRIMINOS = {\n  I: [\n    //I\n    [\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  ],\n\n  T: [\n    //T\n    [\n      [0, 1, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  L: [\n    //L\n    [\n      [0, 0, 1],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  J: [\n    //J\n    [\n      [1, 0, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  ],\n  Z: [\n    //Z\n    [\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  ],\n  S: [\n    //S\n    [\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  O: [\n    //O\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n  ],\n};\n\nexport const getRandomPiece = () => {\n  const value = Math.round(6 * Math.random());\n  switch (value) {\n    case 0:\n      return \"I\";\n    case 1:\n      return \"T\";\n    case 2:\n      return \"L\";\n    case 3:\n      return \"J\";\n    case 4:\n      return \"Z\";\n    case 5:\n      return \"S\";\n    case 6:\n      return \"O\";\n  }\n};\n\nexport const getPiece = (type, rotatePos, xPos, yPos) =>\n  TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n    row.map((col, colPos) => {\n      if (col) {\n        return { x: xPos + colPos, y: yPos + rowPos };\n      }\n      return null;\n    })\n  );\n\nexport const rotatePiece = (isCounterClockwise, { type, rotatePos }) => {\n  return isCounterClockwise\n    ? rotatePos === 0\n      ? TETRIMINOS[type].length - 1\n      : rotatePos - 1\n    : rotatePos === TETRIMINOS[type].length - 1\n    ? 0\n    : rotatePos + 1;\n};\n\nexport const convertMappingToCoords = (mapping) => {\n  let coordArray = [];\n  for (const array of mapping) {\n    for (const coord of array) {\n      if (coord) {\n        coordArray.push(coord);\n      }\n    }\n  }\n  return coordArray;\n};\n","export default class Queue {\n    constructor() {\n      this.elements = {};\n      this.head = 0;\n      this.tail = 0;\n    }\n    enqueue(element) {\n      this.elements[this.tail] = element;\n      this.tail++;\n    }\n    dequeue() {\n      const item = this.elements[this.head];\n      delete this.elements[this.head];\n      this.head++;\n      return item;\n    }\n    peek() {\n      return this.elements[this.head];\n    }\n    empty(){\n        while(!this.isEmpty){\n            this.dequeue()\n        }\n    }\n    get length() {\n      return this.tail - this.head;\n    }\n    get isEmpty() {\n      return this.length === 0;\n    }\n  }","import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { TETRIMINOS } from \"../Components/GameUI/Tetrimino\";\nimport Queue from \"../modules/piece-queue\";\n\nlet pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n\nconst LINESAMOUNT = 40;\nconst getRandomPiece = () => {\n   if (pieceArray.length === 0) {\n      pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n   }\n   const value = Math.floor(pieceArray.length * Math.random());\n   return pieceArray.splice(value, 1);\n};\n\nconst getCoords = (type, rotatePos, xPos, yPos) =>\n   TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n      row.map((col, colPos) => {\n         if (col) {\n            return { x: xPos + colPos, y: yPos + rowPos };\n         }\n         return null;\n      })\n   );\nconst rotatePiece = (isCounterClockwise, state) => {\n   let { rotatePos } = state;\n   if (isCounterClockwise) {\n      if (rotatePos === 0) {\n         return 3;\n      } else {\n         return rotatePos - 1;\n      }\n   } else {\n      if (rotatePos === 3) {\n         return 0;\n      } else {\n         return rotatePos + 1;\n      }\n   }\n};\n\nconst convertMappingToCoords = (state, mapping, forGhost = false) => {\n   let coordArray = [];\n   for (const array of mapping) {\n      for (const coord of array) {\n         if (coord) {\n            if (coordIsValid(state, coord, forGhost)) {\n               coordArray.push(coord);\n            }\n         }\n      }\n   }\n   return coordArray;\n};\n\nconst gameStateInitialState = {\n   playerNumber: null,\n\n   gameRunning: false,\n   currentShape: null,\n   currentCoords: [],\n   ghostCoords: [],\n   pieceQueue: null,\n   heldPiece: null,\n   linesCleared: 0,\n   linesToClear: LINESAMOUNT,\n   gameSpeed: 1000,\n\n   currentGameStatus: \"NONE\",\n   rotatePos: 0,\n   xPos: 3,\n   yPos: 0,\n\n   grid: [\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n   ],\n\n   rotated: false,\n   displayMessage: \"\",\n   endTurn: false,\n   gettingPiece: false,\n};\n\nexport let pieceQueue = new Queue();\n\nconst removeLastState = (state) => {\n   for (const coord of state.currentCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst removeLastGhostPiece = (state) => {\n   for (const coord of state.ghostCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst placeBlocks = (state, forGhost = false) => {\n   let copiedGrid = state.grid.map((nested) => nested.slice());\n   if (forGhost) {\n      const colorName = state.currentShape + \"ghost\";\n      for (const coord of state.ghostCoords) {\n         copiedGrid[coord.y][coord.x] = colorName;\n         for (const currentCoord of state.currentCoords) {\n            if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n               copiedGrid[coord.y][coord.x] = state.currentShape;\n            }\n         }\n      }\n   } else {\n      for (const coord of state.currentCoords) {\n         copiedGrid[coord.y][coord.x] = state.currentShape;\n      }\n   }\n   state.grid = copiedGrid;\n};\n\nconst coordIsValid = (state, coord, forGhost = false) => {\n   if (coord) {\n      if (coord.y <= 20 && coord.x >= 0 && coord.x <= 9) {\n         for (let currentCoord of state.currentCoords) {\n            if (forGhost) {\n               if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n                  return true;\n               }\n            }\n         }\n         if (state.grid[coord.y][coord.x].length > 1) {\n            return true;\n         }\n      }\n   }\n   return false;\n};\n\nconst gameStateSlice = createSlice({\n   name: \"gameState2\",\n   initialState: gameStateInitialState,\n   reducers: {\n      resetSP(state) {\n         state.playerNumber = null;\n\n         state.gameRunning = false;\n         state.currentShape = null;\n         state.currentCoords = [];\n         state.ghostCoords = [];\n         state.pieceQueue = null;\n         state.heldPiece = null;\n         state.linesCleared = 0;\n\n         state.currentGameStatus = \"NONE\";\n         state.rotatePos = 0;\n         state.xPos = 3;\n         state.yPos = 0;\n\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n\n         state.rotated = false;\n         state.displayMessage = \"\";\n\n         state.gettingPiece = false;\n         state.endTurn = false;\n\n         pieceQueue = new Queue();\n      },\n      gettingReadySP(state) {\n         state.gameRunning = false;\n         state.currentShape = null;\n         state.currentCoords = [];\n         state.ghostCoords = [];\n         state.pieceQueue = null;\n         state.heldPiece = null;\n         state.linesCleared = 0;\n         state.currentGameStatus = \"NONE\";\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n         pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n         pieceQueue = new Queue();\n         for (let i = 0; i < 5; i++) {\n            pieceQueue.enqueue(...getRandomPiece());\n         }\n      },\n      newGameSP(state) {\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n\n         state.gettingPiece = true;\n         state.gameRunning = true;\n      },\n      clearLinesSP(state) {\n         let newGrid = [];\n         let linesCleared = 0;\n         for (const row of state.grid) {\n            if (row.every((blockType) => blockType !== \"None\")) {\n               state.linesCleared += 1;\n               linesCleared += 1;\n            } else {\n               newGrid.push(row);\n            }\n         }\n         for (let i = 0; i < linesCleared; i++) {\n            newGrid.unshift([\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n            ]);\n         }\n         state.grid = newGrid;\n         state.endTurn = true;\n      },\n      setGettingNewPieceSP(state, bool) {\n         state.endTurn = false;\n         state.gettingPiece = bool.payload;\n      },\n      getNewPieceSP(state) {\n         state.ghostCoords = [];\n         state.currentShape = pieceQueue.dequeue();\n         pieceQueue.enqueue(...getRandomPiece());\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.gameRunning = false;\n            state.gettingPiece = false;\n            state.displayMessage = \"YOU LOST\";\n         } else {\n            placeBlocks(state);\n            state.currentGameStatus = \"FALLING\";\n            state.gettingPiece = false;\n         }\n      },\n      rotatePieceSP(state, action) {\n         const originalRotatePos = state.rotatePos;\n         state.rotatePos = rotatePiece(action.payload, {\n            rotatePos: state.rotatePos,\n         });\n         removeLastState(state);\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.rotatePos = originalRotatePos;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      dropPieceSP(state) {\n         if (state.gameRunning) {\n            if (state.currentGameStatus === \"LANDING\") {\n               state.currentGameStatus = \"FROZEN\";\n               return;\n            }\n            if (state.currentGameStatus === \"FROZEN\") {\n               return;\n            }\n            removeLastState(state);\n            state.yPos += 1;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n            if (state.currentCoords.length < 4) {\n               state.yPos -= 1;\n               state.currentCoords = convertMappingToCoords(\n                  state,\n                  getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n               );\n               state.currentGameStatus = \"LANDING\";\n            } else {\n               state.currentGameStatus = \"FALLING\";\n            }\n            placeBlocks(state);\n         } else {\n         }\n      },\n      getGhostCoordsSP(state) {\n         if (state.currentCoords.length < 4) {\n         } else {\n            removeLastGhostPiece(state);\n            state.ghostCoords = [];\n            for (let coord of state.currentCoords) {\n               state.ghostCoords.push({ x: coord.x, y: coord.y });\n            }\n            let ghostYPos = state.yPos;\n            while (state.ghostCoords.length === 4) {\n               ghostYPos += 1;\n               state.ghostCoords = convertMappingToCoords(\n                  state,\n                  getCoords(state.currentShape, state.rotatePos, state.xPos, ghostYPos),\n                  true\n               );\n            }\n            ghostYPos -= 1;\n            state.ghostCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, ghostYPos),\n               true\n            );\n         }\n      },\n      hardDropSP(state) {\n         removeLastState(state);\n         state.currentCoords = state.ghostCoords;\n         placeBlocks(state);\n         state.currentGameStatus = \"FROZEN\";\n      },\n      showGhostPieceSP(state) {\n         placeBlocks(state, true);\n      },\n      shiftLeftSP(state) {\n         removeLastState(state);\n         state.xPos -= 1;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.xPos += 1;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      shiftRightSP(state) {\n         removeLastState(state);\n         state.xPos += 1;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.xPos -= 1;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n\n      gameWonSP(state) {\n         state.gameRunning = false;\n         state.displayMessage = \"GAME WON\";\n      },\n      resetRotationSP(state) {\n         state.rotated = false;\n      },\n      holdPieceSP(state) {\n         if (state.rotated === true) {\n            return;\n         }\n         state.rotated = true;\n\n         removeLastState(state);\n         if (state.heldPiece === null) {\n            state.heldPiece = state.currentShape;\n            state.currentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n         } else {\n            const placeHolder = state.currentShape;\n            state.currentShape = state.heldPiece;\n            state.heldPiece = placeHolder;\n         }\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         placeBlocks(state);\n         state.currentGameStatus = \"FALLING\";\n      },\n      setDisplayMessageSP(state, displayMessage) {\n         state.displayMessage = displayMessage.payload;\n      },\n      setSettings(state, settings) {\n         state.linesToClear = settings.payload.linesToClear;\n         state.gameSpeed = settings.payload.gameSpeed;\n      },\n      setSettingsDefault(state) {\n         state.linesToClear = LINESAMOUNT;\n         state.gameSpeed = 1000;\n      },\n   },\n});\n\nexport const gameStateActions = gameStateSlice.actions;\n\nexport default gameStateSlice.reducer;\n","import {useState} from 'react'\n\nconst useInput = (validateFunction,defaultValue) =>{\n  const [value, setValue] = useState(defaultValue);\n  const [isTouched,setIsTouched] = useState(false)\n\n  const isValueValid = validateFunction(value)\n  const hasError = isTouched&& !isValueValid\n\n  const valueChangeHandler = (event) =>{\n    setValue(event.target.value)\n  }\n\n  const blurHandler = (event) =>{\n    setIsTouched(true)\n  }\n\n  const reset = () =>{\n    setIsTouched(false)\n    setValue(\"\")\n  }\n\n  return {\n    value,\n    isTouched,\n    hasError,\n    isValueValid,\n    valueChangeHandler,\n    blurHandler,\n    reset,\n    setValue\n    \n  }\n\n\n}\n\nexport default useInput","import { useDispatch, useSelector } from \"react-redux\";\nimport useInput from \"../../Hooks/use-input\";\nimport { gameStateActions } from \"../../store/GameState\";\nimport Modal from \"../UI/Modal\";\n\nimport styles from \"./GameSettings.module.css\";\n\nconst GameSettings = ({ onClick }) => {\n   const dispatch = useDispatch();\n   const currentGameSpeed = useSelector((state) => state.gameState.gameSpeed);\n   const currentLines = useSelector((state) => state.gameState.linesToClear);\n\n   const validateSpeed = (speed) => {\n      return speed >= 1;\n   };\n   const validateLines = (lines) => {\n      return lines >= 1;\n   };\n   const {\n      value: speedToDisplay,\n      hasError: speedHasError,\n      valueChangeHandler: speedChangeHandler,\n      blurHandler: speedBlurHandler,\n      setValue:setSpeed\n   } = useInput(validateSpeed, currentGameSpeed);\n\n   const {\n      value: linesToDisplay,\n      hasError: linesHasError,\n      valueChangeHandler: linesChangeHandler,\n      blurHandler: linesBlurHandler,\n      setValue: setLines,\n   } = useInput(validateLines, currentLines);\n\n   const speedInputClass = speedHasError ? styles[\"invalid\"] : styles[\"valid\"];\n\n   const linesInputClass = linesHasError ? styles[\"invalid\"] : styles[\"valid\"];\n\n   return (\n      <Modal\n         onClick={() => {\n            onClick();\n         }}\n      >\n         <div className={styles[\"everything\"]}>\n            <h1>Game Settings</h1>\n            <div>\n               <label htmlFor=\"Game Speed\">Game Speed </label>\n               <input\n                  className={speedInputClass}\n                  type=\"number\"\n                  value={speedToDisplay}\n                  onChange={(event) => {\n                     speedChangeHandler(event);\n                  }}\n                  onBlur={() => {\n                     speedBlurHandler();\n                  }}\n                  id=\"Game Speed\"\n               ></input>\n            </div>\n            <div>\n               <label htmlFor=\"Lines to Clear\">Lines to Clear </label>\n               <input\n                  className={linesInputClass}\n                  type=\"number\"\n                  value={linesToDisplay}\n                  onChange={(event) => {\n                     linesChangeHandler(event);\n                  }}\n                  onBlur={() => {\n                     linesBlurHandler();\n                  }}\n                  id=\"Lines to Clear\"\n               ></input>\n            </div>\n            <div>\n               <button\n                  onClick={() => {\n                     dispatch(\n                        gameStateActions.setSettings({\n                           linesToClear: linesToDisplay,\n                           gameSpeed: speedToDisplay,\n                        })\n                     );\n                  }}\n                  disabled={speedHasError || linesHasError}\n               >\n                  Save\n               </button>\n               <button\n                  onClick={() => {\n                     dispatch(gameStateActions.setSettingsDefault());\n                     setSpeed(currentGameSpeed)\n                     setLines(currentLines)\n                  }}\n               >\n                  Default\n               </button>\n            </div>\n         </div>\n      </Modal>\n   );\n};\n\nexport default GameSettings;\n","import { Fragment, useState } from \"react\";\nimport GameSettings from \"./GameSettings\";\n\nimport styles from \"./GameSettingsButton.module.css\"\n\nconst GameSettingsButton = () => {\n\n\n\n   const [showOverlay, setShowOverLay] = useState(false);\n\n\n   return (\n      <Fragment>\n         {showOverlay && <GameSettings onClick= {()=>{setShowOverLay(false)}}/>}\n         <button className={styles[\"button\"]}\n            onClick={() => {\n               setShowOverLay(true);\n            }}\n         >\n            Settings\n         </button>\n      </Fragment>\n   );\n};\n\nexport default GameSettingsButton;\n","import { Fragment, useState } from \"react\";\nimport Modal from \"../UI/Modal\";\nimport styles from \"./Block.module.css\";\n\nconst Block = (props) => {\n   const color = props.color;\n   const [showSettings, setShowSettings] = useState(false);\n   \n   return (\n      <Fragment>\n         <div className={`${styles.block}  ${styles[color]}`}></div>\n         {showSettings && <Modal>Hellos</Modal>}\n      </Fragment>\n   );\n};\n\nexport default Block;\n","import { useSelector } from \"react-redux\";\n\nimport styles from \"./ReadyGo.module.css\";\n\nconst ReadyGo = () => {\n   const displayMessage = useSelector((state) => state.gameState.displayMessage);\n   if (displayMessage === \"in game\") {\n      return <div className={styles.readyGo}></div>;\n   }\n   return <div className={styles.readyGo}>{displayMessage}</div>;\n};\n\nexport default ReadyGo;\n","import { useSelector } from \"react-redux\";\n\nimport styles from \"./Grid.module.css\";\nimport Block from \"./Block\";\nimport ReadyGo from \"./ReadyGo\";\n\nconst Grid = () => {\n   const gameState = useSelector((state) => state.gameState);\n\n   const grid = gameState.grid.slice(1).map((row, y_pos) => {\n      return (\n         <div style = {{display:\"flex\"}} key={y_pos}>\n            {row.map((color, x_pos) => {\n               return <Block color={color} key={x_pos} />;\n            })}\n         </div>\n      );\n   });\n\n   return (\n      <div className={styles.grid}>\n         {grid}\n         <ReadyGo></ReadyGo>\n      </div>\n   );\n};\n\nexport default Grid;\n","import styles from \"./HeldBlock.module.css\";\n\nimport { TETRIMINOS } from \"./Tetrimino\";\nimport { useSelector } from \"react-redux\";\nimport Block from \"./Block\";\nimport { Fragment } from \"react\";\n\nconst HeldBlock = () => {\n   const heldPiece = useSelector((state) => state.gameState.heldPiece);\n   if (!heldPiece) {\n      return (\n         <div className={styles.heldBlockOuter}>\n            <div className={styles.title}>Held Piece</div>\n            <div className = {styles.gridRow}>\n               <Block />\n               <Block />\n               <Block />\n               <Block />\n            </div>\n            <div className = {styles.gridRow}>\n               <Block />\n               <Block />\n               <Block />\n               <Block />\n            </div>\n            <div className = {styles.gridRow}>\n               <Block />\n               <Block />\n               <Block />\n               <Block />\n            </div>\n         </div>\n      );\n   }\n\n   const convertToPiece = (row, yPos) => {\n      return (\n         <div style={{ display: \"flex\" }} key={yPos}>\n            {row.map((color, xPos) => {\n               if (color === 0) {\n                  return <Block key={xPos} color={null} />;\n               } else {\n                  return <Block color={heldPiece} key={xPos} />;\n               }\n            })}\n         </div>\n      );\n   };\n\n   let grid = TETRIMINOS[heldPiece][0].map(convertToPiece);\n   return (\n      <Fragment>\n         <div className={styles.heldBlockOuter}>\n            <div className={styles.title}>Held Piece</div>\n            <div className={styles.grid}>{grid}</div>\n         </div>\n      </Fragment>\n   );\n};\n\nexport default HeldBlock;\n","import { useSelector } from \"react-redux\";\n\nconst LinesCleared = ()=>{\n    const linesCleared = useSelector((state) => state.gameState.linesCleared);\n    return <div>Lines Cleared {linesCleared}</div>\n}\n\nexport default LinesCleared","import Block from \"./Block\";\nimport { TETRIMINOS } from \"./Tetrimino\";\nimport styles from \"./PieceQueue.module.css\";\n\nconst PieceQueuePiece = (props) => {\n   const convertToPiece = (row, yPos) => {\n      return (\n         <div className={styles.pieceRow} key={yPos}>\n            {row.map((color, xPos) => {\n               if (color === 0) {\n                  return <Block key={xPos} color={null} />;\n               } else {\n                  return <Block color={props.color} key={xPos} />;\n               }\n            })}\n         </div>\n      );\n   };\n   let grid = TETRIMINOS[props.color][0].map(convertToPiece);\n\n   return <div className={styles.piece}>{grid}</div>;\n};\n\nexport default PieceQueuePiece;\n","import PieceQueuePiece from \"./PieceQueuePiece\";\nimport styles from './PieceQueue.module.css'\nimport {pieceQueue} from '../../store/GameState'\nimport { useSelector } from \"react-redux\";\n\nconst PieceQueue= (props) =>{\n    const queueChanged= useSelector(state=>state.gameState.heldPiece)\n    let i = 0\n    let pieces = []\n    if (pieceQueue.isEmpty){\n        return <div className = {styles.pieceQueue}></div>\n    }\n\n    for (let pieceColor in pieceQueue.elements){\n        pieces.push(<PieceQueuePiece key = {i++} color = {pieceQueue.elements[pieceColor]}/>)\n    }\n    return <div className = {styles.pieceQueue}>{pieces}</div>\n}\n\nexport default PieceQueue;","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\n\nconst StopWatch = () => {\n   const gameRunning = useSelector((state) => state.gameState.gameRunning);\n   const [miliseconds, setMiliseconds] = useState(0);\n   const [seconds, setSeconds] = useState(0);\n   const [minutes, setMinutes] = useState(0);\n\n   useEffect(() => {\n      let incrementInterval = null;\n      if (gameRunning) {\n        setMiliseconds(() => 0)\n        setSeconds(() => 0)\n        setMinutes(() => 0)\n         incrementInterval = setInterval(() => {\n            setMiliseconds((miliseconds) => miliseconds + 1);\n         }, 10);\n      }\n      return () => {\n         clearInterval(incrementInterval);\n      };\n   }, [gameRunning]);\n\n   if (miliseconds === 100) {\n      setSeconds(seconds + 1);\n      setMiliseconds(0);\n   }\n   if (seconds === 60) {\n      setMinutes(minutes + 1);\n      setSeconds(0);\n   }\n\n   if (minutes) {\n      return <div>{`Time ${minutes}:${seconds}:${miliseconds}`}</div>;\n   } else if (seconds) {\n      return <div>{`Time ${seconds}:${miliseconds}`}</div>;\n   } else if (miliseconds) {\n      return <div>{`Time 0:${miliseconds}`}</div>;\n   }\n   else{\n      return <div>{`Time 0:00`}</div>\n   }\n};\n\nexport default StopWatch;\n","import { Fragment, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport KeyControls, {\n   keyIsDisabled,\n   keyIsPressed,\n   keyShiftCounter,\n} from \"../../modules/KeyControls\";\nimport { gameStateActions } from \"../../store/GameState\";\nimport GameSettingsButton from \"./GameSettingsButton\";\nimport Grid from \"./Grid\";\nimport HeldBlock from \"./HeldBlock\";\nimport LinesCleared from \"./LinesCleared\";\nimport PieceQueue from \"./PieceQueue\";\nimport StopWatch from \"./StopWatch\";\n\nlet startButtonLocked = false;\nlet controlsLocked = false;\nconst Game = () => {\n   const dispatch = useDispatch();\n\n   const controls = useSelector((state) => state.controls);\n\n   const displayMessage = useSelector((state) => state.gameState.displayMessage);\n   const gameRunning = useSelector((state) => state.gameState.gameRunning);\n   const currentGameStatus = useSelector((state) => state.gameState.currentGameStatus);\n   const gettingPiece = useSelector((state) => state.gameState.gettingPiece);\n   const linesCleared = useSelector((state) => state.gameState.linesCleared);\n   const linesToClear = useSelector((state) => state.gameState.linesToClear);\n   const endTurn = useSelector((state) => state.gameState.endTurn);\n\n   const gameSpeed = useSelector((state) => state.gameState.gameSpeed);\n\n   useEffect(() => {\n      if (displayMessage === \"READY\") {\n         dispatch(gameStateActions.gettingReadySP());\n      }\n   }, [displayMessage, dispatch]);\n\n   const beginGame = async () => {\n      dispatch(gameStateActions.setDisplayMessageSP(\"READY\"));\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      dispatch(gameStateActions.setDisplayMessageSP(\"GO\"));\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      startButtonLocked = false;\n      dispatch(gameStateActions.setDisplayMessageSP(\"in game\"));\n      dispatch(gameStateActions.newGameSP());\n   };\n\n   document.onkeydown = (keycode) => {\n      if (startButtonLocked) {\n         return;\n      }\n      if (keycode.key === controls[\"newGame\"]) {\n         startButtonLocked = true;\n         beginGame();\n      }\n   };\n   useEffect(() => {\n      if (currentGameStatus === \"FROZEN\") {\n         dispatch(gameStateActions.clearLinesSP());\n      }\n   }, [currentGameStatus, dispatch]);\n\n   useEffect(() => {\n      if (endTurn) {\n         dispatch(gameStateActions.resetRotationSP());\n         if (linesCleared >= linesToClear) {\n            dispatch(gameStateActions.setGettingNewPieceSP(false));\n            dispatch(gameStateActions.gameWonSP());\n         } else {\n            dispatch(gameStateActions.setGettingNewPieceSP(true));\n         }\n      }\n   }, [linesCleared, linesToClear, dispatch, endTurn]);\n\n   useEffect(() => {\n      if (gettingPiece) {\n         dispatch(gameStateActions.getNewPieceSP());\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n      }\n   }, [gettingPiece, dispatch]);\n\n   const gameLoop = () => {\n      dispatch(gameStateActions.dropPieceSP());\n   };\n\n   const keyHandler = async () => {\n      if (keyIsPressed[controls[\"rotateLeft\"]] && !keyIsDisabled[controls[\"rotateLeft\"]]) {\n         dispatch(gameStateActions.rotatePieceSP(true));\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"rotateLeft\"]] = true;\n      }\n      if (keyIsPressed[controls[\"rotateRight\"]] && !keyIsDisabled[controls[\"rotateRight\"]]) {\n         dispatch(gameStateActions.rotatePieceSP(false));\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"rotateRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"hold\"]] && !keyIsDisabled[controls[\"hold\"]]) {\n         dispatch(gameStateActions.holdPieceSP());\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"hold\"]] = true;\n      }\n      if (keyIsPressed[controls[\"hardDrop\"]] && !keyIsDisabled[controls[\"hardDrop\"]]) {\n         controlsLocked = true;\n         dispatch(gameStateActions.hardDropSP());\n         keyIsDisabled[controls[\"hardDrop\"]] = true;\n      }\n      if (keyIsPressed[controls[\"softDrop\"]] && !keyIsDisabled[controls[\"softDrop\"]]) {\n         keyShiftCounter[controls[\"softDrop\"]] = 1;\n         dispatch(gameStateActions.dropPieceSP());\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveRight\"]] && !keyIsDisabled[controls[\"moveRight\"]]) {\n         keyShiftCounter[controls[\"moveRight\"]] = 1;\n         dispatch(gameStateActions.shiftRightSP());\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveLeft\"]] && !keyIsDisabled[controls[\"moveLeft\"]]) {\n         keyShiftCounter[controls[\"moveLeft\"]] = 1;\n         dispatch(gameStateActions.shiftLeftSP());\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n      }\n   };\n\n   const keyShiftHandler = () => {\n      for (let key in keyShiftCounter) {\n         if (keyShiftCounter[key]) {\n            keyShiftCounter[key] += 1;\n         }\n      }\n      if (\n         keyIsPressed[controls[\"softDrop\"]] &&\n         keyIsDisabled[controls[\"softDrop\"]] &&\n         keyShiftCounter[controls[\"softDrop\"]] > 32\n      ) {\n         dispatch(gameStateActions.dropPieceSP());\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n         keyShiftCounter[controls[\"softDrop\"]] = 28;\n      }\n      if (\n         keyIsPressed[controls[\"moveRight\"]] &&\n         keyIsDisabled[controls[\"moveRight\"]] &&\n         keyShiftCounter[controls[\"moveRight\"]] > 32\n      ) {\n         dispatch(gameStateActions.shiftRightSP());\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n         keyShiftCounter[controls[\"moveRight\"]] = 28;\n      }\n      if (\n         keyIsPressed[controls[\"moveLeft\"]] &&\n         keyIsDisabled[controls[\"moveLeft\"]] &&\n         keyShiftCounter[controls[\"moveLeft\"]] > 32\n      ) {\n         dispatch(gameStateActions.shiftLeftSP());\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n         keyShiftCounter[controls[\"moveLeft\"]] = 28;\n      }\n   };\n\n   useEffect(() => {\n      if (gameRunning) {\n         const dropPieceInterval = setInterval(() => {\n            gameLoop();\n         }, gameSpeed);\n         const handleInputInterval = setInterval(() => {\n            keyHandler();\n         }, 1);\n         const shiftInputInterval = setInterval(() => {\n            keyShiftHandler();\n         }, 1);\n         return () => {\n            clearInterval(dropPieceInterval);\n            clearInterval(handleInputInterval);\n            clearInterval(shiftInputInterval);\n         };\n      }\n   }, [gameRunning, dispatch, controls]);\n\n   return (\n      <Fragment>\n         <KeyControls />\n         <div\n            style={{\n               display: \"flex\",\n               flexWrap: \"nowrap\",\n               justifyContent: \"center\",\n            }}\n         >\n            <HeldBlock />\n            <Grid></Grid>\n            <PieceQueue />\n         </div>\n         <div style={{display:\"flex\",flexDirection:\"column\", textAlign: \"center\" }}>\n            <StopWatch />\n            <LinesCleared />\n            <GameSettingsButton />\n         </div>\n      </Fragment>\n   );\n};\n\nexport default Game;\n","import { Fragment} from \"react\";\nimport Game from \"../Components/GameUI/Game\";\n\nconst SinglePlayer = () => {\n\n   return (\n      <Fragment>\n         <h2>SinglePlayer</h2>\n         <Game></Game>\n      </Fragment>\n   );\n};\n\nexport default SinglePlayer;\n","import styles from \"./Card.module.css\";\n\nconst Card = (props) => {\n   if (props.children) {\n      return <div className={styles.card}>{props.children}</div>;\n   }\n};\n\nexport default Card;\n","import { child } from \"@firebase/database\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { onlineUsersRef } from \"../modules/firebase-config\";\n\nexport let opponentRef = null;\nconst userInfoInitialState = {\n   isLoggedIn: false,\n   roomStatus: null, //\"looking for room\" \"waiting\" \"in room\"\n\n   otherUsers: [], //other users that aren't you\n   roomKey: null, //key for the room you are in\n   opponentName: \"\", // name of your opponent, empty if not in room\n   opponentID: null, // id of your oppponent, null opponent hasn't been chosen\n   invitationKeys: [], // keys of rooms that you are invited to\n\n   grid: [], // grid of game from opponent\n\n   displayText:\"\"\n};\n\nconst userInfoSlice = createSlice({\n   name: \"UserInfo\",\n   initialState: userInfoInitialState,\n   reducers: {\n      reset(state) {\n         state.roomStatus = \"looking for room\";\n         state.otherUsers = [];\n         state.roomKey = null;\n         state.opponentName = \"\";\n         state.opponentID = null;\n         state.invitationKeys = [];\n         state.grid = [];\n         state.myName = \"\"\n         opponentRef = null;\n\n      },\n      login(state) {\n         state.isLoggedIn = true;\n      },\n      logout(state) {\n         state.isLoggedIn = false;\n      },\n      setOtherUsers(state, users) {\n         state.otherUsers = users.payload;\n      },\n      setRoomKey(state, key) {\n         state.roomKey = key.payload;\n      },\n      setRoomStatus(state, newStatus) {\n         state.roomStatus = newStatus.payload;\n      },\n      setOpponentName(state, opponentName) {\n\n         state.opponentName = opponentName.payload;\n      },\n      setOpponentid(state, id) {\n         if (id.payload) {\n            opponentRef = child(onlineUsersRef, id.payload);\n         }\n         state.opponentID = id.payload;\n      },\n      setInvitiationKeys(state, keysList) {\n         state.invitationKeys = keysList.payload;\n      },\n      setGrid(state, grid) {\n         state.grid = grid;\n      },\n      setDisplayText(state,text){\n         state.displayText = text.payload\n      }\n   },\n});\n\nexport const userInfoActions = userInfoSlice.actions;\n\nexport default userInfoSlice.reducer;\n","import { off, push, set } from \"firebase/database\";\nimport { useDispatch } from \"react-redux\";\nimport { auth,  roomsRef } from \"../../modules/firebase-config\";\nimport { userInfoActions } from \"../../store/UserInfo\";\n\nimport styles from './OtherUser.module.css'\n\nconst OtherUser = ({ username, uid }) => {\n   const dispatch = useDispatch();\n   const pushRoomsRef = push(roomsRef);\n   const createRoomHandler = async () => {\n      off(roomsRef)\n      await set(pushRoomsRef, { player1: auth.currentUser.uid, player2: uid, accepted: false });\n      dispatch(userInfoActions.setRoomStatus(\"waiting\"));\n      dispatch(userInfoActions.setRoomKey(pushRoomsRef.key));\n      dispatch(userInfoActions.setOpponentName(username));\n      dispatch(userInfoActions.setOpponentid(uid));\n   };\n   return (\n      <li className={styles[\"OtherUser\"]}>\n         <button className={styles[\"OtherUser\"]} onClick={createRoomHandler}>{username}</button>\n      </li>\n   );\n};\n\nexport default OtherUser;\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Card from \"../UI/Card\";\nimport OtherUser from \"./OtherUser\";\n\nconst OtherUsers = () => {\n   const otherUsersList = useSelector((state) => state.userInfo.otherUsers);\n   const otherUserListDisplay = otherUsersList\n      ? otherUsersList.map((pair, index) => (\n           <OtherUser key={index} username={pair[1].username} uid={pair[0]}></OtherUser>\n        ))\n      : null;\n   if (otherUserListDisplay) {\n      return (\n         <Card>\n            <div>Available Users</div>\n            {otherUserListDisplay}\n         </Card>\n      );\n   }\n};\nexport default memo(OtherUsers);\n","import {  memo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Modal from \"../UI/Modal\";\n\nimport styles from './WaitingMessage.module.css'\n\n\nconst WaitingMessage = ({ cancelRoomHandler }) => {\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n   const roomKey = useSelector((state) => state.userInfo.roomKey);\n\n   return (\n      <Modal>\n         <span className={styles[\"span\"]}>Waiting for {opponentName} to join...</span>\n         <button className={styles[\"cancel\"]} onClick={cancelRoomHandler}>CANCEL</button>\n      </Modal>\n   );\n};\n\nexport default memo(WaitingMessage);\n","import { child, off, set } from \"@firebase/database\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nimport { TETRIMINOS } from \"../Components/GameUI/Tetrimino\";\nimport { auth, getUsernameFromuid } from \"../modules/firebase-config\";\n\nimport Queue from \"../modules/piece-queue\";\n\nconst LINESTOCLEAR = 15\n\nlet pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\nconst getRandomPiece = () => {\n   if (pieceArray.length === 0) {\n      pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n   }\n   const value = Math.floor(pieceArray.length * Math.random());\n   return pieceArray.splice(value, 1);\n};\n\nconst getCoords = (type, rotatePos, xPos, yPos) =>\n   TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n      row.map((col, colPos) => {\n         if (col) {\n            return { x: xPos + colPos, y: yPos + rowPos };\n         }\n         return null;\n      })\n   );\nconst rotatePiece = (isCounterClockwise, state) => {\n   let { rotatePos } = state;\n   if (isCounterClockwise) {\n      if (rotatePos === 0) {\n         return 3;\n      } else {\n         return rotatePos - 1;\n      }\n   } else {\n      if (rotatePos === 3) {\n         return 0;\n      } else {\n         return rotatePos + 1;\n      }\n   }\n};\n\nconst convertMappingToCoords = (state, mapping, forGhost = false) => {\n   let coordArray = [];\n   for (const array of mapping) {\n      for (const coord of array) {\n         if (coord) {\n            if (coordIsValid(state, coord, forGhost)) {\n               coordArray.push(coord);\n            }\n         }\n      }\n   }\n   return coordArray;\n};\n\n\nconst gameStateInitialState = {\n   playerNumber: null,\n\n   gameRunning: false,\n   myCurrentShape: null,\n   myCurrentCoords: [],\n   myGhostCoords: [],\n   myPieceQueue: null,\n   myHeldPiece: null,\n   myLinesCleared: 0,\n\n   opponentPieceQueue: [],\n   opponentHeldPiece: null,\n   opponentLinesCleared: 0,\n\n   currentGameStatus: \"NONE\",\n   rotatePos: 0,\n   xPos: 3,\n   yPos: 0,\n\n   grid: [\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n   ],\n\n   rotated: false,\n   displayMessage: \"\",\n\n   myTurn: null,\n   linesToClear:LINESTOCLEAR,\n   lineDeduction:2,\n   keepTurn: 0,\n   keepTurn2:false,\n\n   turnTaken : false\n};\n\nexport let myRoomRef = null;\n\nexport let pieceQueue = new Queue();\n\nconst removeLastState = (state) => {\n   for (const coord of state.myCurrentCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst removeLastGhostPiece = (state) => {\n   for (const coord of state.myGhostCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst placeBlocks = (state, forGhost = false) => {\n   let copiedGrid = state.grid.map(nested=>nested.slice())\n   if (forGhost) {\n      const colorName = state.myCurrentShape + \"ghost\";\n      for (const coord of state.myGhostCoords) {\n         copiedGrid[coord.y][coord.x] = colorName;\n         for (const currentCoord of state.myCurrentCoords) {\n            if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n               copiedGrid[coord.y][coord.x] = state.myCurrentShape;\n            }\n         }\n      }\n   } else {\n      for (const coord of state.myCurrentCoords) {\n         copiedGrid[coord.y][coord.x] = state.myCurrentShape;\n      }\n   }\n   state.grid = copiedGrid\n};\n\nconst coordIsValid = (state, coord, forGhost = false) => {\n   if (coord) {\n      if (coord.y <= 20 && coord.x >= 0 && coord.x <= 9) {\n         for (let currentCoord of state.myCurrentCoords) {\n            if (forGhost) {\n               if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n                  return true;\n               }\n            }\n         }\n         if (state.grid[coord.y][coord.x].length > 1) {\n            return true;\n         }\n      }\n   }\n   return false;\n};\n\nconst gameStateSlice2 = createSlice({\n   name: \"gameState2\",\n   initialState: gameStateInitialState,\n   reducers: {\n      reset(state) {\n         state.playerNumber = null;\n\n         state.gameRunning = false;\n         state.myCurrentShape = null;\n         state.myCurrentCoords = [];\n         state.myGhostCoords = [];\n         state.myPieceQueue = null;\n         state.myHeldPiece = null;\n         state.myLinesCleared = 0;\n\n         state.opponentPieceQueue = [];\n         state.opponentHeldPiece = null;\n         state.opponentLinesCleared = 0;\n\n         state.currentGameStatus = \"NONE\";\n         state.rotatePos = 0;\n         state.xPos = 3;\n         state.yPos = 0;\n\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n\n         state.rotated = false;\n         state.displayMessage = \"\";\n\n         state.keepTurn = 0\n         state.keepTurn2=false;\n         state.myTurn = null;\n         state.linesToClear =LINESTOCLEAR;\n         state.lineDeduction = Math.floor(LINESTOCLEAR/5)\n         myRoomRef = null;\n         pieceQueue = new Queue()\n\n         state.turnTaken = false\n      },\n      setGrid(state, grid) {\n         state.grid = grid.payload;\n      },\n      gettingReady(state) {\n         state.myCurrentShape = null;\n         state.myCurrentCoords = [];\n         state.myGhostCoords = [];\n         state.myPieceQueue = null;\n         state.myHeldPiece = null;\n         state.myLinesCleared = 0;\n         state.currentGameStatus = \"NONE\";\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n\n      },\n      newGame(state) {\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n\n         pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n         pieceQueue = new Queue();\n         for (let i = 0; i < 5; i++) {\n            pieceQueue.enqueue(...getRandomPiece());\n         }\n\n      },\n      setOpponentInfo(state, action) {\n         state.opponentPieceQueue = action.payload.opponentPieceQueue;\n         state.opponentLinesCleared = action.payload.opponentLinesCleared;\n      },\n      clearLines(state) {\n         let newGrid = [];\n         let linesCleared = 0;\n         for (const row of state.grid) {\n            if (row.every((blockType) => blockType !== \"None\")) {\n               state.myLinesCleared += 1;\n               linesCleared += 1;\n            } else {\n               newGrid.push(row);\n            }\n         }\n         for (let i = 0; i < linesCleared; i++) {\n            newGrid.unshift([\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n            ]);\n         }\n         state.grid = newGrid;\n         set(child(myRoomRef, \"grid\"), state.grid);\n         if (linesCleared>0){\n            state.keepTurn = state.keepTurn+1\n            state.keepTurn2 = true\n         }\n         else{\n            state.keepTurn2 = false\n         }\n         // off(child(myRoomRef, `player${state.playerNumber}GameInfo/linesCleared`))\n      },\n      unfreeze(state) {\n         state.currentGameStatus = \"FALLING\";\n      },\n      getNewPiece(state, opponentName) {\n         state.myGhostCoords = [];\n         state.myCurrentShape = pieceQueue.dequeue();\n         pieceQueue.enqueue(...getRandomPiece());\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.grid = [\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            ];\n            state.myCurrentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n            off(child(myRoomRef, `player${state.playerNumber === 1 ? 2 : 1}GameInfo`));\n            set(\n               child(myRoomRef, `player${state.playerNumber === 1 ? 2 : 1}GameInfo/linesCleared`),\n               state.opponentLinesCleared - state.lineDeduction\n            );\n            off(child(myRoomRef, \"displayMessage\"));\n            state.displayMessage = `${opponentName.payload} CAUSED OVERFLOW`;\n            set(child(myRoomRef, \"displayMessage\"), `${opponentName.payload} CAUSED OVERFLOW`);\n            setTimeout(() => {\n               set(child(myRoomRef, \"displayMessage\"), \"in game\");\n            }, 1000);\n\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         }\n         placeBlocks(state);\n         // set(\n         //    child(myRoomRef, `player${state.playerNumber}GameInfo/gameQueue`),\n         //    pieceQueue.elements\n         // );\n\n         state.currentGameStatus = \"FALLING\";\n      },\n      rotatePiece(state, action) {\n         const originalRotatePos = state.rotatePos;\n         state.rotatePos = rotatePiece(action.payload, {\n            rotatePos: state.rotatePos,\n         });\n         removeLastState(state);\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.rotatePos = originalRotatePos;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      dropPiece(state) {\n         if (state.gameRunning) {\n            if (state.currentGameStatus === \"LANDING\") {\n               state.currentGameStatus = \"FROZEN\";\n               return;\n            }\n            removeLastState(state);\n            state.yPos += 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n            if (state.myCurrentCoords.length < 4) {\n               state.yPos -= 1;\n               state.myCurrentCoords = convertMappingToCoords(\n                  state,\n                  getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n               );\n               state.currentGameStatus = \"LANDING\";\n            } else {\n               state.currentGameStatus = \"FALLING\";\n            }\n            placeBlocks(state);\n         } else {\n         }\n      },\n      getGhostCoords(state) {\n         removeLastGhostPiece(state);\n         state.myGhostCoords = [];\n         for (let coord of state.myCurrentCoords) {\n            state.myGhostCoords.push({ x: coord.x, y: coord.y });\n         }\n         let ghostYPos = state.yPos;\n         while (state.myGhostCoords.length === 4) {\n            ghostYPos += 1;\n            state.myGhostCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, ghostYPos),\n               true\n            );\n         }\n         ghostYPos -= 1;\n         state.myGhostCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, ghostYPos),\n            true\n         );\n      },\n      hardDrop(state) {\n         removeLastState(state);\n         state.myCurrentCoords = state.myGhostCoords;\n         placeBlocks(state);\n         state.currentGameStatus = \"FROZEN\";\n      },\n      showGhostPiece(state) {\n         placeBlocks(state, true);\n      },\n      shiftLeft(state) {\n         removeLastState(state);\n         state.xPos -= 1;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.xPos += 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      shiftRight(state) {\n         removeLastState(state);\n         state.xPos += 1;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.xPos -= 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      placeCurrentPiece(state){\n         placeBlocks(state)\n      },\n\n      gameWon(state){\n         state.gameRunning = false;\n      },\n      holdPiece(state) {\n         if (state.rotated === true) {\n            return;\n         }\n         state.rotated = true;\n\n         removeLastState(state);\n         if (state.heldPiece === null) {\n            state.heldPiece = state.currentShape;\n            state.currentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n         } else {\n            const placeHolder = state.currentShape;\n            state.currentShape = state.heldPiece;\n            state.heldPiece = placeHolder;\n         }\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         placeBlocks(state);\n         state.currentPieceState = \"FALLING\";\n      },\n      setMultiplayer(state, action) {\n         state.playerNumber = action.payload.playerNumber;\n         myRoomRef = action.payload.roomRef;\n      },\n      setDisplayMessage(state, displayMessage) {\n         state.displayMessage = displayMessage.payload;\n         if (state.displayMessage === \"in game\") {\n            state.gameRunning = true;\n         }\n         if (state.displayMessage.includes(\"WON\")) {\n            state.gameRunning = false;\n         }\n      },\n      setMyTurn(state, bool) {\n         // state.keepTurn = 0\n         state.myTurn = bool.payload;\n      },\n      setMyLinesCleared(state, lines) {\n         state.myLinesCleared = lines.payload;\n      },\n      setLinesToClear(state,lines){\n         state.linesToClear = lines.payload\n         state.lineDeduction = Math.floor(lines.payload/5)\n      },\n      setTurnTaken(state,bool){\n         state.turnTaken = bool.payload\n      },\n   },\n});\n\n\nexport const gameStateActions2 = gameStateSlice2.actions;\n\nexport default gameStateSlice2.reducer;\n","import { child, set } from \"@firebase/database\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { auth, getUsernameFromuid, onlineUsersRef, roomsRef } from \"../../modules/firebase-config\";\nimport { gameStateActions2 } from \"../../store/GameState2\";\nimport { userInfoActions } from \"../../store/UserInfo\";\n\nimport styles from './InviteNotification.module.css'\n\nconst InviteNotification = ({ roomKey, opponentuid }) => {\n   const dispatch = useDispatch();\n   const [opponentName, setOpponentName] = useState(null);\n   const getOpponentName = async () => {\n      setOpponentName(await getUsernameFromuid(opponentuid));\n   };\n\n   const acceptInvite = async () => {\n      await set(child(roomsRef, roomKey + \"/accepted\"), true);\n      await set(child(roomsRef, roomKey + \"/displayMessage\"), \"\");\n      dispatch(userInfoActions.setOpponentid(opponentuid));\n      dispatch(userInfoActions.setRoomStatus(\"in room\"));\n      dispatch(userInfoActions.setRoomKey(roomKey));\n      dispatch(userInfoActions.setOpponentName(opponentName));\n      dispatch(\n         gameStateActions2.setMultiplayer({ playerNumber: 2, roomRef: child(roomsRef, roomKey) })\n      );\n      await set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), true);\n   };\n\n   const declineInvite = async () => {\n      await set(child(roomsRef, roomKey + \"/accepted\"), \"declined\");\n   };\n\n   getOpponentName();\n   return (\n      <div className={styles[\"invite\"]}>\n         <span>{opponentName}</span>\n         <span> sent you an invite</span>\n         <button className = {styles[\"accept\"]} onClick={acceptInvite}>ACCEPT</button>\n         <button className = {styles[\"decline\"]}  onClick={declineInvite}>DECLINE</button>\n      </div>\n   );\n};\n\nexport default InviteNotification;\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Card from \"../UI/Card\";\nimport InviteNotification from \"./InviteNotification\";\n\nconst InviteNotifications = () => {\n   let invitations = useSelector((state) => state.userInfo.invitationKeys);\n   if (invitations.length!==0) {\n      invitations = invitations.map(({ roomKey, opponentuid }, index) => (\n         <InviteNotification\n            key={index}\n            roomKey={roomKey}\n            opponentuid={opponentuid}\n         ></InviteNotification>\n      ));\n   }\n   return <Card>\n      <p style = {{margin:0}}>Room Invitations</p>{invitations}</Card>;\n};\n\nexport default memo(InviteNotifications);\n","import styles from \"./Block.module.css\";\n\nconst Block = (props) => {\n  const color = props.color;\n  return <div className={`${styles.block}  ${styles[color]}`}></div>;\n};\n\nexport default Block;\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport styles from \"./ReadyGo.module.css\";\n\nconst ReadyGo = () => {\n   const displayMessage = useSelector((state) => state.gameState2.displayMessage);\n   if (displayMessage === \"in game\") {\n      return <div className={styles.readyGo}></div>;\n   } else {\n      return <div className={styles.readyGo}>{displayMessage}</div>;\n   }\n};\n\nexport default memo(ReadyGo);\n","import { useSelector } from \"react-redux\";\n\nimport styles from \"./Grid.module.css\";\nimport Block from \"./Block\";\nimport ReadyGo from \"./ReadyGo\";\n\nconst Grid = () => {\n   const gameState = useSelector((state) => state.gameState2);\n\n   const grid = gameState.grid.slice(1).map((row, y_pos) => {\n      return (\n         <div style = {{display:\"flex\"}} key={y_pos}>\n            {row.map((color, x_pos) => {\n               return <Block color={color} key={x_pos} />;\n            })}\n         </div>\n      );\n   });\n\n   return (\n      <div className={styles.grid}>\n         {grid}\n         <ReadyGo></ReadyGo>\n      </div>\n   );\n};\n\nexport default Grid;\n","export const TETRIMINOS = {\n  I: [\n    //I\n    [\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  ],\n\n  T: [\n    //T\n    [\n      [0, 1, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  L: [\n    //L\n    [\n      [0, 0, 1],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  J: [\n    //J\n    [\n      [1, 0, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  ],\n  Z: [\n    //Z\n    [\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  ],\n  S: [\n    //S\n    [\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  O: [\n    //O\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n  ],\n};\n\nexport const getRandomPiece = () => {\n  const value = Math.round(6 * Math.random());\n  switch (value) {\n    case 0:\n      return \"I\";\n    case 1:\n      return \"T\";\n    case 2:\n      return \"L\";\n    case 3:\n      return \"J\";\n    case 4:\n      return \"Z\";\n    case 5:\n      return \"S\";\n    case 6:\n      return \"O\";\n  }\n};\n\nexport const getPiece = (type, rotatePos, xPos, yPos) =>\n  TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n    row.map((col, colPos) => {\n      if (col) {\n        return { x: xPos + colPos, y: yPos + rowPos };\n      }\n      return null;\n    })\n  );\n\nexport const rotatePiece = (isCounterClockwise, { type, rotatePos }) => {\n  return isCounterClockwise\n    ? rotatePos === 0\n      ? TETRIMINOS[type].length - 1\n      : rotatePos - 1\n    : rotatePos === TETRIMINOS[type].length - 1\n    ? 0\n    : rotatePos + 1;\n};\n\nexport const convertMappingToCoords = (mapping) => {\n  let coordArray = [];\n  for (const array of mapping) {\n    for (const coord of array) {\n      if (coord) {\n        coordArray.push(coord);\n      }\n    }\n  }\n  return coordArray;\n};\n","import Block from \"./Block\";\nimport { TETRIMINOS } from \"./Tetrimino\";\n\nimport styles from \"./PieceQueue.module.css\";\n\nconst PieceQueuePiece = (props) => {\n   const convertToPiece = (row, yPos) => {\n      return (\n         <div className={styles.pieceRow} key={yPos}>\n            {row.map((color, xPos) => {\n               if (color === 0) {\n                  return <Block key={xPos} color={null} />;\n               } else {\n                  return <Block color={props.color} key={xPos} />;\n               }\n            })}\n         </div>\n      );\n   };\n   let grid = TETRIMINOS[props.color][0].map(convertToPiece);\n\n   return <div className={styles.piece}>{grid}</div>;\n};\n\nexport default PieceQueuePiece;\n","import PieceQueuePiece from \"./PieceQueuePiece\";\nimport styles from \"./PieceQueue.module.css\";\nimport { pieceQueue } from \"../../../store/GameState2\";\nimport { useSelector } from \"react-redux\";\nimport { Fragment } from \"react\";\n\nconst PieceQueue = ({ player }) => {\n   const opponentPieces = useSelector((state) => state.gameState2.opponentPieceQueue);\n   const queueChanged = useSelector((state) => state.gameState2.myTurn);\n   let i = 0;\n   let pieces = [];\n   if (player === \"mine\") {\n      if (pieceQueue.isEmpty) {\n         return <div className={styles.pieceQueue}></div>;\n      }\n\n      for (let pieceColor in pieceQueue.elements) {\n         pieces.push(<PieceQueuePiece key={i++} color={pieceQueue.elements[pieceColor]} />);\n      }\n      return (\n         <Fragment>\n            <div className={styles.pieceQueue}>{pieces}</div>\n         </Fragment>\n      );\n   } else if (player === \"opponent\") {\n      if (!opponentPieces || opponentPieces.isEmpty) {\n         return <div className={styles.pieceQueue}></div>;\n      }\n      for (let pieceColor in opponentPieces) {\n         if (!pieceColor) {\n            continue;\n         }\n         pieces.push(<PieceQueuePiece key={i++} color={opponentPieces[pieceColor]} />);\n      }\n      return (\n         <Fragment>\n            <div className={styles.pieceQueue}>\n               {pieces}\n            </div>\n         </Fragment>\n      );\n   }\n};\n\nexport default PieceQueue;\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport styles from \"./LineClearedCounter.module.css\"\n\nconst LineClearedCounter = ({ player }) => {\n   const opponentCounter = useSelector((state) => state.gameState2.opponentLinesCleared);\n   const myCounter = useSelector((state) => state.gameState2.myLinesCleared);\n   if (player === \"opponent\") {\n      return <div className = {styles.counterOpponent}>{opponentCounter}</div>;\n   }\n   if (player === \"mine\") {\n      return <div className = {styles.counterMyself}>{myCounter}</div>;\n   }\n};\n\nexport default memo(LineClearedCounter);\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst WhoseTurnText = () => {\n   const gameRunning = useSelector((state) => state.gameState2.gameRunning);\n   const myTurn = useSelector((state) => state.gameState2.myTurn);\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n   if (!gameRunning) {\n      return <div style={{ textAlign: \"center\",height:\"24px\"}}> </div>;;\n   } else if (myTurn) {\n      return <div style={{ textAlign: \"center\" }}>{`Your Turn`}</div>;\n   } else {\n      return <div style={{ textAlign: \"center\" }}>{`${opponentName}'s Turn`}</div>;\n   }\n};\nexport default memo(WhoseTurnText);\n","import { child, off, onValue, set } from \"@firebase/database\";\nimport {  useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { gameStateActions2, myRoomRef } from \"../../../store/GameState2\";\nimport Card from \"../../UI/Card\";\n\nconst InputForm = () => {\n   const dispatch = useDispatch();\n   const linesToClear = useSelector((state) => state.gameState2.linesToClear);\n   const [linesToClearInput, setLinesToClearInput] = useState(linesToClear);\n\n   const setLinesToClearInputChange = (event) => {\n      if (event.target.value <= 0) {\n         return;\n      } else {\n         setLinesToClearInput(+event.target.value);\n      }\n   };\n   const setLinesToClearHandler = () => {\n      off(child(myRoomRef, \"linesToClear\"));\n      dispatch(gameStateActions2.setLinesToClear(linesToClearInput));\n      set(child(myRoomRef, \"linesToClear\"), linesToClearInput);\n   };\n\n   onValue(child(myRoomRef, \"linesToClear\"), (snapshot) => {\n      if (snapshot.exists()) {\n         // setLinesToClearInput(snapshot.val())\n         dispatch(gameStateActions2.setLinesToClear(snapshot.val()));\n      }\n   });\n\n   return (\n      <Card>\n         <label id=\"lines\">Lines to Clear </label>\n         <input\n            id=\"lines\"\n            type=\"number\"\n            value={linesToClearInput}\n            onChange={setLinesToClearInputChange}\n         ></input>\n         <button onClick={setLinesToClearHandler}>SET</button>\n         <span> Current amount is {linesToClear}</span>\n      </Card>\n   );\n};\n\nexport default InputForm;\n","import { child, off, set } from \"@firebase/database\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { keyIsDisabled, keyIsPressed, keyShiftCounter } from \"../../modules/KeyControls\";\nimport { gameStateActions2, myRoomRef, pieceQueue } from \"../../store/GameState2\";\n\nlet controlsLocked = false;\n\nconst InnerGame = () => {\n   const dispatch = useDispatch();\n\n   const controls = useSelector((state) => state.controls);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n\n   const myTurn = useSelector((state) => state.gameState2.myTurn);\n   const gameRunning = useSelector((state) => state.gameState2.gameRunning);\n   const keepTurn = useSelector((state) => state.gameState2.keepTurn);\n   const grid = useSelector((state) => state.gameState2.grid);\n   useEffect(() => {\n      if ((gameRunning && myTurn)) {\n\n         \n         off(child(myRoomRef, \"grid\"));\n         dispatch(gameStateActions2.getNewPiece(opponentName));\n         set(child(myRoomRef, `player${playerNumber}GameInfo/gameQueue`), pieceQueue.elements);\n         dispatch(gameStateActions2.placeCurrentPiece());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         const dropPieceInterval = setInterval(() => {\n            gameLoop();\n         }, 300);\n         const handleInputInterval = setInterval(() => {\n            keyHandler();\n         }, 1);\n         const shiftInputInterval = setInterval(() => {\n            keyShiftHandler();\n         }, 1);\n         return () => {\n            clearInterval(dropPieceInterval);\n            clearInterval(handleInputInterval);\n            clearInterval(shiftInputInterval);\n         };\n      }\n   }, [myTurn, gameRunning, dispatch,keepTurn]);\n\n   const keyShiftHandler = async () => {\n      for (let key in keyShiftCounter) {\n         if (keyShiftCounter[key]) {\n            keyShiftCounter[key] += 1;\n         }\n      }\n      if (\n         keyIsPressed[controls[\"softDrop\"]] &&\n         keyIsDisabled[controls[\"softDrop\"]] &&\n         keyShiftCounter[controls[\"softDrop\"]] > 40\n      ) {\n         dispatch(gameStateActions2.dropPiece());\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n         keyShiftCounter[controls[\"softDrop\"]] = 30;\n      }\n      if (\n         keyIsPressed[controls[\"moveRight\"]] &&\n         keyIsDisabled[controls[\"moveRight\"]] &&\n         keyShiftCounter[controls[\"moveRight\"]] > 40\n      ) {\n         dispatch(gameStateActions2.shiftRight());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n         keyShiftCounter[controls[\"moveRight\"]] = 30;\n      }\n      if (\n         keyIsPressed[controls[\"moveLeft\"]] &&\n         keyIsDisabled[controls[\"moveLeft\"]] &&\n         keyShiftCounter[controls[\"moveLeft\"]] > 40\n      ) {\n         dispatch(gameStateActions2.shiftLeft());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n         keyShiftCounter[controls[\"moveLeft\"]] = 30;\n      }\n   };\n   const keyHandler = async () => {\n      if (!gameRunning || controlsLocked) {\n         return;\n      }\n      if (keyIsPressed[controls[\"rotateLeft\"]] && !keyIsDisabled[controls[\"rotateLeft\"]]) {\n         dispatch(gameStateActions2.rotatePiece(true));\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"rotateLeft\"]] = true;\n      }\n      if (keyIsPressed[controls[\"rotateRight\"]] && !keyIsDisabled[controls[\"rotateRight\"]]) {\n         dispatch(gameStateActions2.rotatePiece(false));\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"rotateRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"hardDrop\"]] && !keyIsDisabled[controls[\"hardDrop\"]]) {\n         controlsLocked = true;\n         dispatch(gameStateActions2.hardDrop());\n         keyIsDisabled[controls[\"hardDrop\"]] = true;\n         // dispatch(gameStateActions2.setTurnTaken(true));\n         setTimeout(() => {\n            controlsLocked = false;\n         }, 400);\n      }\n      if (keyIsPressed[controls[\"softDrop\"]] && !keyIsDisabled[controls[\"softDrop\"]]) {\n         keyShiftCounter[controls[\"softDrop\"]] = 1;\n         dispatch(gameStateActions2.dropPiece());\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveRight\"]] && !keyIsDisabled[controls[\"moveRight\"]]) {\n         keyShiftCounter[controls[\"moveRight\"]] = 1;\n         dispatch(gameStateActions2.shiftRight());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveLeft\"]] && !keyIsDisabled[controls[\"moveLeft\"]]) {\n         keyShiftCounter[controls[\"moveLeft\"]] = 1;\n         dispatch(gameStateActions2.shiftLeft());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n      }\n   };\n   const gameLoop = async () => {\n      dispatch(gameStateActions2.dropPiece());\n      dispatch(gameStateActions2.getGhostCoords());\n      dispatch(gameStateActions2.showGhostPiece());\n   };\n   useEffect(() => {\n      if (myTurn) {\n         // off(child(myRoomRef, \"grid\"))\n         set(child(myRoomRef, \"grid\"), grid);\n      }\n   }, [grid, myTurn]);\n\n   return;\n};\nexport default InnerGame;\n","import { Fragment, memo, useEffect} from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { gameStateActions2, myRoomRef, pieceQueue } from \"../../store/GameState2\";\nimport { child, off, onDisconnect, onValue, set } from \"@firebase/database\";\nimport { auth, getUsernameFromuid, onlineUsersRef } from \"../../modules/firebase-config\";\n\nimport Grid from \"./Components/Grid\";\nimport PieceQueue from \"./Components/PieceQueue\";\nimport LineClearedCounter from \"./Components/LineClearedCounter\";\nimport WhoseTurnText from \"./Components/WhoseTurnText\";\nimport InputForm from \"./Components/InputForm\";\nimport InnerGame from \"./InnerGame\";\nimport Card from \"../UI/Card\";\n\nimport KeyControls, {\n} from \"../../modules/KeyControls\";\n\nlet startButtonLocked = false;\n\nconst GameShared = () => {\n   const dispatch = useDispatch();\n\n   const controls = useSelector((state) => state.controls);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n\n   const myTurn = useSelector((state) => state.gameState2.myTurn);\n   const displayMessage = useSelector((state) => state.gameState2.displayMessage);\n   const gameRunning = useSelector((state) => state.gameState2.gameRunning);\n   const currentGameStatus = useSelector((state) => state.gameState2.currentGameStatus);\n   const myLinesCleared = useSelector((state) => state.gameState2.myLinesCleared);\n   const linesToClear = useSelector((state) => state.gameState2.linesToClear);\n   const turnTaken = useSelector((state) => state.gameState2.turnTaken);\n   const keepTurn2 = useSelector((state) => state.gameState2.keepTurn2);\n\n   if (!displayMessage) {\n      startButtonLocked = false;\n   }\n\n   if (displayMessage.includes(\"WON\")) {\n      setTimeout(() => {\n         startButtonLocked = false;\n      }, 1000);\n   }\n\n   if (currentGameStatus === \"FROZEN\") {\n      dispatch(gameStateActions2.unfreeze());\n      dispatch(gameStateActions2.clearLines());\n      dispatch(gameStateActions2.setTurnTaken(true));\n   }\n\n   useEffect(() => {\n      if (turnTaken) {\n         if (myLinesCleared >= linesToClear) {\n            set(child(myRoomRef, \"turn\"), null);\n            getUsernameFromuid(auth.currentUser.uid).then((name) => {\n               set(child(myRoomRef, \"displayMessage\"), `${name} WON`);\n            });\n            dispatch(gameStateActions2.gameWon());\n         } else if (keepTurn2) {\n            // console.log('keep turn')\n         } else {\n            // console.log('other turn')\n            set(child(myRoomRef, \"turn\"), playerNumber === 1 ? 2 : 1);\n         }\n      }\n      dispatch(gameStateActions2.setTurnTaken(false));\n   }, [myLinesCleared, linesToClear, dispatch, turnTaken, keepTurn2]);\n\n   useEffect(() => {\n      if (gameRunning) {\n         off(child(myRoomRef, `player${playerNumber === 1 ? 2 : 1}GameInfo`));\n         dispatch(gameStateActions2.newGame());\n         set(child(myRoomRef, `player${playerNumber}GameInfo`), {\n            gameQueue: pieceQueue.elements,\n            linesCleared: myLinesCleared,\n         });\n\n         return () => {};\n      }\n   }, [gameRunning]);\n\n   useEffect(() => {\n      set(child(myRoomRef, `player${playerNumber}GameInfo`), {\n         gameQueue: pieceQueue.elements,\n         linesCleared: myLinesCleared,\n      });\n   }, [myLinesCleared, pieceQueue.elements]);\n\n\n   const beginGame = async () => {\n      set(child(myRoomRef, \"displayMessage\"), \"READY\");\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      set(child(myRoomRef, \"displayMessage\"), \"GO\");\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      await set(child(myRoomRef, \"displayMessage\"), \"in game\");\n      await set(child(myRoomRef, \"grid\"), [\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      ]);\n      await set(child(myRoomRef, \"/turn\"), playerNumber === 1 ? 2 : 1);\n   };\n\n   onDisconnect(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\")).set(false);\n   useEffect(() => {\n      onValue(child(myRoomRef, \"displayMessage\"), (snapshot) => {\n         if (snapshot.exists()) {\n            dispatch(gameStateActions2.setDisplayMessage(snapshot.val()));\n            if (snapshot.val() === \"READY\") {\n               dispatch(gameStateActions2.gettingReady());\n               set(child(myRoomRef, `player${playerNumber}GameInfo`), {\n                  gameQueue: pieceQueue.elements,\n                  linesCleared: myLinesCleared,\n               });\n\n               startButtonLocked = true;\n            }\n         }\n      });\n   });\n\n   //updating the game grid\n   if (gameRunning && !myTurn) {\n      onValue(child(myRoomRef, \"grid\"), (snapshot) => {\n         if (snapshot.exists()) {\n            dispatch(gameStateActions2.setGrid(snapshot.val()));\n         }\n      });\n   }\n   if (gameRunning && !myTurn) {\n      onValue(child(myRoomRef, `player${playerNumber}GameInfo/linesCleared`), (snapshot) => {\n         dispatch(gameStateActions2.setMyLinesCleared(snapshot.val()));\n      });\n   }\n\n   //updating the queuePieces and linesClearedNumber\n   onValue(child(myRoomRef, `player${playerNumber === 1 ? 2 : 1}GameInfo`), (snapshot) => {\n      if (snapshot.exists()) {\n         dispatch(\n            gameStateActions2.setOpponentInfo({\n               opponentPieceQueue: snapshot.val().gameQueue,\n               opponentLinesCleared: snapshot.val().linesCleared,\n            })\n         );\n      }\n   });\n\n   onValue(child(myRoomRef, \"turn\"), (snapshot) => {\n      if (snapshot.exists()) {\n         dispatch(gameStateActions2.setMyTurn(snapshot.val() === playerNumber));\n      }\n   });\n\n   document.onkeydown = (keycode) => {\n      if (keycode.key ===\" \"){\n         keycode.preventDefault()\n      }\n      if (startButtonLocked) {\n         return;\n      }\n      if (keycode.key === controls[\"newGame\"]) {\n         startButtonLocked = true;\n         beginGame();\n         //    setStartGame(true);\n         //    dispatch(gameStateActions.newGame());\n         //    dispatch(gameStateActions.getNewPiece());\n         //    dispatch(gameStateActions.getGhostCoords());\n         //    dispatch(gameStateActions.showGhostPiece());\n      }\n   };\n   return (\n      <Fragment>\n         <KeyControls></KeyControls>\n         <InnerGame></InnerGame>\n         <WhoseTurnText />\n         <div\n            style={{\n               display: \"flex\",\n               flexWrap: \"nowrap\",\n               justifyContent: \"center\",\n            }}\n         >\n            <LineClearedCounter player=\"opponent\" />\n            <PieceQueue player=\"opponent\"></PieceQueue>\n            <Grid></Grid>\n            <PieceQueue player=\"mine\"></PieceQueue>\n            <LineClearedCounter player=\"mine\" />\n         </div>\n         {!gameRunning && <InputForm />}\n         <Card>\n            <div style={{ color: \"yellow\" }}>\n               <p>How To Play:</p>\n               <p>Press esc to start.</p>\n               <p>Game starts with other person first.</p>\n               <p>After player drops piece, other player goes.</p>\n               <p>Person that causes the board to overflow loses a line point.</p>\n               <p>Play until a person clears an amount of lines.</p>\n            </div>\n         </Card>\n      </Fragment>\n   );\n};\n\nexport default memo(GameShared);\n","import styles from \"./LeaveRoom.module.css\"\n\nconst LeaveRoom = ({ leaveRoomHandler }) => {\n   return <button className = {styles[\"leave-room\"]} onClick={leaveRoomHandler}>Leave Room</button>;\n};\n\nexport default LeaveRoom;\n","import { Fragment } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"../modules/firebase-config\";\nimport OtherUsers from \"../Components/Multiplayer/OtherUsers\";\n\nimport WaitingMessage from \"../Components/Multiplayer/WaitingMessage\";\nimport InviteNotification from \"../Components/Multiplayer/InviteNotfications\";\nimport {\n   child,\n   get,\n   off,\n   onChildAdded,\n   onChildRemoved,\n   onDisconnect,\n   onValue,\n   remove,\n   set,\n} from \"@firebase/database\";\nimport { userInfoActions } from \"../store/UserInfo\";\nimport { auth, onlineUsersRef, roomsRef } from \"../modules/firebase-config\";\nimport GameShared from \"../Components/Multiplayer/GameShared\";\nimport { gameStateActions2, myRoomRef } from \"../store/GameState2\";\nimport LeaveRoom from \"../Components/Multiplayer/Components/LeaveRoom\";\n\nconst TwoPlayer = () => {\n   const dispatch = useDispatch();\n   const userStatus = useSelector((state) => state.userInfo.roomStatus);\n   const isLoggedIn = useSelector((state) => state.userInfo.isLoggedIn);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const roomKey = useSelector((state) => state.userInfo.roomKey);\n   if (roomKey) {\n      onDisconnect(child(roomsRef, roomKey)).remove();\n   }\n\n   //when list of other users changes\n   onValue(onlineUsersRef, () => {\n      if (auth.currentUser) {\n         get(onlineUsersRef).then((snapshot) => {\n            if (snapshot.val()) {\n               dispatch(\n                  userInfoActions.setOtherUsers(\n                     Object.entries(snapshot.val()).filter(\n                        (pair) => pair[0] !== auth.currentUser.uid && !pair[1].inRoom\n                     )\n                  )\n               );\n            }\n         });\n      }\n   });\n\n   //when someone accepts your invite\n   if (roomKey) {\n      onValue(child(roomsRef, roomKey + \"/accepted\"), (snapshot) => {\n         if (!snapshot.exists()) {\n         } else if (snapshot.val()===true) {\n            if (playerNumber !== 2) {\n               dispatch(\n                  gameStateActions2.setMultiplayer({\n                     playerNumber: 1,\n                     roomRef: child(roomsRef, roomKey),\n                  })\n               );\n               dispatch(userInfoActions.setRoomStatus(\"in room\"));\n               set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), true);\n            }\n            // off(child(onlineUsersRef, opponentID))\n         } else if(snapshot.val()===\"declined\"){\n            cancelRoomHandler()\n         }\n         else{\n            dispatch(userInfoActions.setRoomStatus(\"waiting\"));\n         }\n      });\n   }\n   //someone sends you an invite\n   onChildAdded(roomsRef, () => {\n      if (auth.currentUser)\n         get(roomsRef).then((snapshot) => {\n            if (snapshot.exists())\n               dispatch(\n                  userInfoActions.setInvitiationKeys(\n                     Object.entries(snapshot.val())\n                        .filter(\n                           (room) => !room[1].accepted && room[1].player2 === auth.currentUser.uid\n                        )\n                        .map((room) => {\n                           return { opponentuid: room[1].player1, roomKey: room[0] };\n                        })\n                  )\n               );\n         });\n   });\n\n   onChildRemoved(roomsRef, () => {\n      if (auth.currentUser)\n         get(roomsRef).then((snapshot) => {\n            if (snapshot.exists()) {\n               dispatch(\n                  userInfoActions.setInvitiationKeys(\n                     Object.entries(snapshot.val())\n                        .filter(\n                           (room) => !room[1].accepted && room[1].player2 === auth.currentUser.uid\n                        )\n                        .map((room) => {\n                           return { opponentuid: room[1].player1, roomKey: room[0] };\n                        })\n                  )\n               );\n            } else {\n               dispatch(userInfoActions.setInvitiationKeys([]));\n            }\n         });\n   });\n\n   const opponentID = useSelector((state) => state.userInfo.opponentID);\n   const cancelRoomHandler = async () => {\n      off(child(onlineUsersRef, opponentID));\n      dispatch(gameStateActions2.reset());\n      await remove(child(roomsRef, roomKey));\n      dispatch(userInfoActions.reset());\n      if (auth.currentUser) {\n         set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), false);\n      }\n   };\n\n   //check if opponent log out or is in another room or leaves\n   if (opponentID) {\n      onValue(child(onlineUsersRef, opponentID), async (snapshot) => {\n         if (!snapshot.exists()) {\n            cancelRoomHandler();\n         } else if (snapshot.val().inRoom) {\n            // if (myRoomRef){\n            let skip = false;\n            await get(child(myRoomRef, \"accepted\")).then((snapshot) => {\n               skip = snapshot.val();\n            });\n            if (!skip) {\n               cancelRoomHandler();\n            }\n\n            // }\n         }\n      });\n   }\n   if (userStatus === \"in room\") {\n      onValue(myRoomRef, (snapshot) => {\n         //room is removed\n         if (!snapshot.exists()) {\n            off(child(roomsRef, roomKey));\n            off(child(onlineUsersRef, opponentID));\n            dispatch(userInfoActions.reset());\n\n            if (auth.currentUser) {\n               set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), false);\n            }\n            dispatch(gameStateActions2.reset());\n         }\n      });\n   }\n\n   return (\n      <Fragment>\n         <h2>Two-Player</h2>\n         {!isLoggedIn && <p>Login to begin</p>}\n         {userStatus === \"looking for room\" && <InviteNotification />}\n         {userStatus === \"looking for room\" && <OtherUsers />}\n         {userStatus === \"waiting\" && <WaitingMessage cancelRoomHandler={cancelRoomHandler} />}\n         {userStatus === \"in room\" && <LeaveRoom leaveRoomHandler={cancelRoomHandler}></LeaveRoom>}\n         {userStatus === \"in room\" && <GameShared></GameShared>}\n      </Fragment>\n   );\n};\n\nexport default TwoPlayer;\n","import { onAuthStateChanged, signInAnonymously, signOut } from \"firebase/auth\";\nimport { child, remove, set } from \"firebase/database\";\nimport { Fragment, memo, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { auth, onlineUsersRef } from \"../../modules/firebase-config\";\nimport { myRoomRef } from \"../../store/GameState2\";\nimport Modal from \"./Modal\";\n\nimport styles from \"./Login.module.css\";\n\nconst Login = () => {\n   const isLoggedIn = useSelector((state) => state.userInfo.isLoggedIn);\n   const [loggingIn, setLoggingIn] = useState(false);\n   const [usernameInput, setUsernameInput] = useState(\"\");\n   const [showError, setShowError] = useState(false);\n\n   const loginHandler = async (event) => {\n      event.preventDefault();\n      if (usernameInput.trim().length === 0) {\n         setShowError(true);\n      } else {\n         await signInAnonymously(auth);\n         await set(child(onlineUsersRef, auth.currentUser.uid), {\n            username: usernameInput,\n            inRoom: false,\n         });\n         setUsernameInput(\"\");\n         setShowError(false);\n      }\n   };\n\n   const logoutHandler = async () => {\n      setLoggingIn(false);\n      remove(child(onlineUsersRef, auth.currentUser.uid));\n      if (myRoomRef) {\n         remove(myRoomRef);\n      }\n\n      signOut(auth);\n   };\n\n   const errorMessage = <p>Invalid Username</p>;\n\n   if (!isLoggedIn) {\n      return (\n         <Fragment>\n            <li\n               className={styles[\"login\"]}\n               onClick={() => {\n                  setLoggingIn(true);\n               }}\n            >\n               Login\n            </li>\n            {loggingIn && (\n               <Modal\n                  onClick={() => {\n                     setLoggingIn(false);\n                  }}\n               >\n                  <form className={styles[\"login\"]} onSubmit={loginHandler}>\n                     <label htmlFor=\"name\">Username: </label>\n                     <input\n                        id=\"name\"\n                        value={usernameInput}\n                        onChange={(event) => {\n                           setUsernameInput(event.target.value);\n                        }}\n                     ></input>\n\n                     <button>Login</button>\n                  </form>\n                  {showError && <div className={styles[\"error-text\"]}>{errorMessage}</div>}\n               </Modal>\n            )}\n         </Fragment>\n      );\n   } else {\n      return (\n         <li className={styles[\"login\"]} onClick={logoutHandler}>\n            Logout\n         </li>\n      );\n   }\n};\nexport default memo(Login);\n","import Login from \"./Login\";\nimport styles from \"./NavigationBar.module.css\";\n\nconst NavigationBar = ({ setPage, setShowKeyBindings }) => {\n   return (\n      <ul className={styles[\"nav-bar\"]}>\n         <div>Ditris</div>\n         <li\n            onClick={() => {\n               setPage(\"singleplayer\");\n            }}\n         >\n            SinglePlayer\n         </li>\n         <li\n            onClick={() => {\n               setPage(\"two-player\");\n            }}\n         >\n            Two-Player\n         </li>\n         <Login></Login>\n         <li\n            onClick={() => {\n               setShowKeyBindings(true);\n            }}\n            style={{ float: \"right\" }}\n         >\n            Set Controls\n         </li>\n      </ul>\n   );\n};\n\nexport default NavigationBar;\n","import { onAuthStateChanged } from \"@firebase/auth\";\nimport { off, remove} from \"@firebase/database\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport KeyBindings from \"./Components/KeyBindings/KeyBindings\";\nimport { auth } from \"./modules/firebase-config\";\nimport SinglePlayer from \"./Pages/SinglePlayer\";\nimport TwoPlayer from \"./Pages/TwoPlayer\";\nimport { gameStateActions } from \"./store/GameState\";\nimport { gameStateActions2, myRoomRef } from \"./store/GameState2\";\nimport { opponentRef, userInfoActions } from \"./store/UserInfo\";\nimport NavigationBar from \"./Components/UI/NavigationBar\";\n\nconst App = () => {\n   const dispatch = useDispatch();\n   const isLoggedIn = useSelector((state)=>state.userInfo.isLoggedIn)\n   const [page, setPage] = useState(<SinglePlayer></SinglePlayer>);\n   const [showKeyBindings,setShowKeyBindings] = useState(false)\n   const changePageHandler = (pageName) => {\n      if (pageName === \"singleplayer\") {\n         dispatch(gameStateActions.resetSP());\n         setPage(<SinglePlayer></SinglePlayer>);\n      } else if (pageName === \"two-player\") {\n         if(myRoomRef){\n            remove(myRoomRef)\n         }\n         dispatch(gameStateActions2.reset())\n         setPage(<TwoPlayer></TwoPlayer>);\n      }\n   };\n\n   onAuthStateChanged(auth, (user) => {\n      if(isLoggedIn){\n         return\n      }\n      if (user) {\n         dispatch(userInfoActions.login());\n         dispatch(userInfoActions.reset())\n         dispatch(userInfoActions.setRoomStatus(\"looking for room\"))\n\n      } else {\n         dispatch(userInfoActions.logout());\n         if(opponentRef){\n            off(opponentRef)\n         }\n         dispatch(userInfoActions.reset())\n      }\n   });\n\n\n\n\n   return (\n      <React.Fragment>\n         <NavigationBar setPage={changePageHandler} setShowKeyBindings={setShowKeyBindings}></NavigationBar>\n         {page}\n         {showKeyBindings&&<KeyBindings setShowKeyBindings={setShowKeyBindings}></KeyBindings>}\n      </React.Fragment>\n   );\n};\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport gameStateReducer from \"./GameState\";\nimport userInfoReducer from \"./UserInfo\";\nimport gameStateReducer2 from \"./GameState2\";\nimport controlsSliceReducer from \"./Controls\"\n\nconst store = configureStore({\n   reducer: {\n      gameState: gameStateReducer,\n      userInfo: userInfoReducer,\n      gameState2: gameStateReducer2,\n      controls: controlsSliceReducer,\n   },\n});\n\nexport default store;\n","import ReactDOM from \"react-dom/client\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n"],"sourceRoot":""}