{"version":3,"sources":["Components/GameUI/HeldBlock.module.css","Components/Multiplayer/Components/PieceQueue.module.css","Components/GameUI/PieceQueue.module.css","Components/GameUI/StopWatch.module.css","Components/UI/Modal.module.css","Components/GameUI/Block.module.css","Components/Multiplayer/Components/Block.module.css","Components/Multiplayer/Components/ReadyGo.module.css","Components/Multiplayer/Components/LineClearedCounter.module.css","Components/GameUI/Grid.module.css","Components/GameUI/ReadyGo.module.css","Components/GameUI/HowToPlay.module.css","Components/UI/Card.module.css","Components/Multiplayer/Components/Grid.module.css","Components/UI/NavigationBar.module.css","store/Controls.js","Components/UI/Modal.js","Components/KeyBindings/KeyBinding.js","Components/KeyBindings/KeyBindings.js","modules/firebase-config.js","Components/GameUI/Tetrimino.js","modules/piece-queue.js","store/GameState.js","Components/GameUI/Block.js","Components/GameUI/ReadyGo.js","Components/GameUI/Grid.js","Components/GameUI/PieceQueuePiece.js","Components/GameUI/PieceQueue.js","Components/GameUI/HeldBlock.js","modules/KeyControls.js","Components/GameUI/StopWatch.js","Components/GameUI/Game.js","Pages/SinglePlayer.js","Components/UI/Login.js","Components/UI/Card.js","store/UserInfo.js","Components/Multiplayer/OtherUser.js","Components/Multiplayer/OtherUsers.js","Components/Multiplayer/WaitingMessage.js","store/GameState2.js","Components/Multiplayer/InviteNotifcation.js","Components/Multiplayer/InviteNotfications.js","Components/Multiplayer/Components/Block.js","Components/Multiplayer/Components/ReadyGo.js","Components/Multiplayer/Components/Grid.js","Components/Multiplayer/Components/Tetrimino.js","Components/Multiplayer/Components/PieceQueuePiece.js","Components/Multiplayer/Components/PieceQueue.js","Components/Multiplayer/Components/LineClearedCounter.js","Components/Multiplayer/Components/WhoseTurnText.js","Components/Multiplayer/Components/InputForm.js","Components/Multiplayer/InnerGame.js","Components/Multiplayer/GameShared.js","Components/Multiplayer/Components/LeaveRoom.js","Pages/TwoPlayer.js","Components/UI/NavigationBar.js","App.js","store/index.js","index.js"],"names":["module","exports","controlsSlice","createSlice","name","initialState","newGame","moveLeft","moveRight","softDrop","hardDrop","rotateLeft","rotateRight","hold","reducers","resetDefault","state","resetAlbert","setNewControls","newControls","payload","controlsActions","actions","Backdrop","props","className","styles","backdrop","onClick","ModalOverlay","children","modal","Modal","portalElement","document","getElementById","createPortal","KeyBinding","controlName","input","setInput","currentKey","useState","bindingBeingChanged","setBindingBeingChanged","useEffect","onkeydown","keycode","key","displayWord","id","onChange","event","target","value","length","blur","onFocus","onBlur","KeyBindings","setShowKeyBindings","dispatch","useDispatch","controls","useSelector","newGameInput","setNewGameInput","rotateRightInput","setRotateRightInput","rotateLeftInput","setRotateLeftInput","holdInput","setHoldInput","hardDropInput","setHardDropInput","softDropInput","setSoftDropInput","moveLeftInput","setMoveLeftInput","moveRightInput","setMoveRightInput","style","float","memo","auth","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getAuth","db","getDatabase","rootRef","ref","onlineUsersRef","child","roomsRef","getUsernameFromuid","uid","get","then","snapshot","username","val","TETRIMINOS","I","T","L","J","Z","S","O","Queue","this","elements","head","tail","element","item","isEmpty","dequeue","pieceArray","getRandomPiece","Math","floor","random","splice","getCoords","type","rotatePos","xPos","yPos","map","row","rowPos","col","colPos","x","y","convertMappingToCoords","mapping","forGhost","coordArray","array","coord","coordIsValid","push","removeLastState","currentCoords","grid","placeBlocks","copiedGrid","nested","slice","colorName","currentShape","ghostCoords","currentCoord","pieceQueue","gameStateSlice","gameRunning","currentPieceState","totalLinesCleared","isGameWon","heldPiece","rotated","displayMessage","reset","empty","gettingReady","i","enqueue","clearLines","newGrid","linesCleared","every","blockType","unshift","getNewPiece","console","log","rotatePiece","action","originalRotatePos","isCounterClockwise","dropPiece","getGhostCoords","removeLastGhostPiece","ghostYPos","showGhostPiece","shiftLeft","shiftRight","checkIfGameWon","holdPiece","placeHolder","gameStateActions","Block","color","block","ReadyGo","gameState","readyGo","Grid","y_pos","display","x_pos","PieceQueuePiece","pieceRow","piece","PieceQueue","pieces","pieceColor","HeldBlock","heldBlockOuter","title","gridRow","keyIsPressed","keyIsDisabled","keyShiftCounter","KeyControls","window","addEventListener","preventDefault","stopPropagation","StopWatch","miliseconds","setMiliseconds","seconds","setSeconds","minutes","setMinutes","incrementInterval","setInterval","clearInterval","stopWatch","gameLocked","Game","startGame","setStartGame","dropPieceInterval","handleInputInterval","keyHandler","shiftInputInterval","keyShiftHandler","interval","setTimeout","flexWrap","justifyContent","SinglePlayer","Login","isLoggedIn","userInfo","loggingIn","setLoggingIn","usernameInput","setUsernameInput","showError","setShowError","loginHandler","trim","signInAnonymously","set","currentUser","inRoom","logoutHandler","remove","signOut","errorMessage","onSubmit","Card","card","opponentRef","userInfoSlice","roomStatus","otherUsers","roomKey","opponentName","opponentID","invitationKeys","displayText","myName","login","logout","setOtherUsers","users","setRoomKey","setRoomStatus","newStatus","setOpponentName","setOpponentid","setInvitiationKeys","keysList","setGrid","setDisplayText","text","userInfoActions","OtherUser","pushRoomsRef","createRoomHandler","off","player1","player2","accepted","OtherUsers","otherUsersList","otherUserListDisplay","pair","index","WaitingMessage","cancelRoomHandler","gameStateInitialState","playerNumber","myCurrentShape","myCurrentCoords","myGhostCoords","myPieceQueue","myHeldPiece","myLinesCleared","opponentPieceQueue","opponentHeldPiece","opponentLinesCleared","currentGameStatus","myTurn","linesToClear","lineDeduction","keepTurn","keepTurn2","turnTaken","myRoomRef","gameStateSlice2","LINESTOCLEAR","setOpponentInfo","unfreeze","placeCurrentPiece","gameWon","setMultiplayer","roomRef","setDisplayMessage","includes","setMyTurn","bool","setMyLinesCleared","lines","setLinesToClear","setTurnTaken","gameStateActions2","InviteNotfication","opponentuid","getOpponentName","acceptInvite","InviteNotifications","invitations","margin","gameState2","player","opponentPieces","LineClearedCounter","opponentCounter","myCounter","counterOpponent","counterMyself","WhoseTurnText","textAlign","height","InputForm","linesToClearInput","setLinesToClearInput","onValue","exists","controlsLocked","InnerGame","gameLoop","startButtonLocked","GameShared","gameQueue","beginGame","Promise","resolve","onDisconnect","LeaveRoom","leaveRoomHandler","TwoPlayer","userStatus","Object","entries","filter","onChildAdded","room","onChildRemoved","skip","NavigationBar","setPage","backgroundColor","App","page","showKeyBindings","onAuthStateChanged","user","Fragment","pageName","store","configureStore","reducer","gameStateReducer","userInfoReducer","gameStateReducer2","controlsSliceReducer","ReactDOM","createRoot","render"],"mappings":"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G,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAIdC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAA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ACNC,KAAM,EAENkB,KAAM,CACH,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,SAG5EgB,SAAS,EACTC,eAAgB,GAEhB4J,OAAQ,KACRC,aApGkB,GAqGlBC,cAAc,EACdC,SAAU,EACVC,WAAU,EAEVC,WAAY,GAGJC,GAAY,KAEZ1K,GAAa,IAAI9C,EAEtBmC,GAAkB,SAACvI,GAAW,IAAD,gBACZA,EAAM6S,iBADM,IAChC,2BAA2C,CAAC,IAAjCzK,EAAgC,QACxCpI,EAAMyI,KAAKL,EAAMN,GAAGM,EAAMP,GAAK,QAFF,gCAY7Ba,GAAc,SAAC1I,GAA6B,IAAtBiI,EAAqB,wDAC1CU,EAAa3I,EAAMyI,KAAKjB,KAAI,SAAAoB,GAAM,OAAEA,EAAOC,WAC/C,GAAIZ,EAAU,CACX,IADW,EACLa,EAAY9I,EAAM4S,eAAiB,QAD9B,cAES5S,EAAM8S,eAFf,IAEX,2BAAyC,CAAC,IAA/B1K,EAA8B,QACtCO,EAAWP,EAAMN,GAAGM,EAAMP,GAAKiB,EADO,oBAEX9I,EAAM6S,iBAFK,IAEtC,2BAAkD,CAAC,IAAxC5J,EAAuC,QAC3CA,EAAanB,IAAMM,EAAMN,GAAKmB,EAAapB,IAAMO,EAAMP,IACxDc,EAAWP,EAAMN,GAAGM,EAAMP,GAAK7H,EAAM4S,iBAJL,gCAF9B,mCAUP,CAAC,IAAD,gBACgB5S,EAAM6S,iBADtB,IACJ,2BAA2C,CAAC,IAAjCzK,EAAgC,QACxCO,EAAWP,EAAMN,GAAGM,EAAMP,GAAK7H,EAAM4S,gBAFpC,+BAKP5S,EAAMyI,KAAOE,GAGVN,GAAe,SAACrI,EAAOoI,GAA6B,IAAtBH,EAAqB,wDACtD,GAAIG,GACGA,EAAMN,GAAK,IAAMM,EAAMP,GAAK,GAAKO,EAAMP,GAAK,EAAG,CAAC,IAAD,gBACvB7H,EAAM6S,iBADiB,IAChD,2BAAgD,CAAC,IAAxC5J,EAAuC,QAC7C,GAAIhB,GACGgB,EAAanB,IAAMM,EAAMN,GAAKmB,EAAapB,IAAMO,EAAMP,EACxD,OAAO,GAJgC,8BAQhD,GAAI7H,EAAMyI,KAAKL,EAAMN,GAAGM,EAAMP,GAAGtF,OAAS,EACvC,OAAO,EAIhB,OAAO,GAGJsR,GAAkB1U,YAAY,CACjCC,KAAM,aACNC,aAAcqT,GACd5S,SAAU,CACP6J,MADO,SACD3J,GACHA,EAAM2S,aAAe,KAErB3S,EAAMoJ,aAAc,EACpBpJ,EAAM4S,eAAiB,KACvB5S,EAAM6S,gBAAkB,GACxB7S,EAAM8S,cAAgB,GACtB9S,EAAM+S,aAAe,KACrB/S,EAAMgT,YAAc,KACpBhT,EAAMiT,eAAiB,EAEvBjT,EAAMkT,mBAAqB,GAC3BlT,EAAMmT,kBAAoB,KAC1BnT,EAAMoT,qBAAuB,EAE7BpT,EAAMqT,kBAAoB,OAC1BrT,EAAMqH,UAAY,EAClBrH,EAAMsH,KAAO,EACbtH,EAAMuH,KAAO,EAEbvH,EAAMyI,KAAO,CACV,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,SAG5EzI,EAAMyJ,SAAU,EAChBzJ,EAAM0J,eAAiB,GAEvB1J,EAAMyT,SAAW,EACjBzT,EAAM0T,WAAU,EAChB1T,EAAMsT,OAAS,KACftT,EAAMuT,aAxNM,GAyNZvT,EAAMwT,cAAgBzM,KAAKC,MAAM8M,GACjCF,GAAY,KACZ1K,GAAa,IAAI9C,EAEjBpG,EAAM2T,WAAY,GAErBnC,QA1DO,SA0DCxR,EAAOyI,GACZzI,EAAMyI,KAAOA,EAAKrI,SAErByJ,aA7DO,SA6DM7J,GACVA,EAAM4S,eAAiB,KACvB5S,EAAM6S,gBAAkB,GACxB7S,EAAM8S,cAAgB,GACtB9S,EAAM+S,aAAe,KACrB/S,EAAMgT,YAAc,KACpBhT,EAAMiT,eAAiB,EACvBjT,EAAMqT,kBAAoB,OAC1BrT,EAAMyI,KAAO,CACV,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,UAI/EnJ,QA9FO,SA8FCU,GACLA,EAAMsH,KAAO,EACbtH,EAAMuH,KAAO,EACbvH,EAAMqH,UAAY,EAElBR,GAAa,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC/EqC,GAAa,IAAI9C,EACjB,IAAK,IAAI0D,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAAC,IAAD,GACzB,EAAAZ,IAAWa,QAAX,oBAAsBjD,SAI5BiN,gBA1GO,SA0GS/T,EAAO0K,GACpB1K,EAAMkT,mBAAqBxI,EAAOtK,QAAQ8S,mBAC1ClT,EAAMoT,qBAAuB1I,EAAOtK,QAAQgT,sBAE/CpJ,WA9GO,SA8GIhK,GACR,IADe,EACXiK,EAAU,GACVC,EAAe,EAFJ,cAGGlK,EAAMyI,MAHT,IAGf,2BAA8B,CAAC,IAApBhB,EAAmB,QACvBA,EAAI0C,OAAM,SAACC,GAAD,MAA6B,SAAdA,MAC1BpK,EAAMiT,gBAAkB,EACxB/I,GAAgB,GAEhBD,EAAQ3B,KAAKb,IARJ,8BAWf,IAAK,IAAIqC,EAAI,EAAGA,EAAII,EAAcJ,IAC/BG,EAAQI,QAAQ,CACb,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,SAGNrK,EAAMyI,KAAOwB,EACbwF,YAAItK,YAAMyO,GAAW,QAAS5T,EAAMyI,MAChCyB,EAAa,GACdlK,EAAMyT,SAAWzT,EAAMyT,SAAS,EAEhCzT,EAAM0T,WAAY,GAGlB1T,EAAM0T,WAAY,GAIxBM,SAnJO,SAmJEhU,GACNA,EAAMqT,kBAAoB,WAE7B/I,YAtJO,SAsJKtK,EAAOwQ,GAAe,IAAD,EAWQ,GAVtCxQ,EAAM8S,cAAgB,GACtB9S,EAAM4S,eAAiB1J,GAAWtC,WAClC,EAAAsC,IAAWa,QAAX,oBAAsBjD,OACtB9G,EAAMsH,KAAO,EACbtH,EAAMuH,KAAO,EACbvH,EAAMqH,UAAY,EAClBrH,EAAM6S,gBAAkB9K,GACrB/H,EACAmH,GAAUnH,EAAM4S,eAAgB5S,EAAMqH,UAAWrH,EAAMsH,KAAMtH,EAAMuH,OAElEvH,EAAM6S,gBAAgBtQ,OAAS,KAChCvC,EAAMyI,KAAO,CACV,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,SAE5EzI,EAAM4S,eAAiB1J,GAAWtC,WAClC,EAAAsC,IAAWa,QAAX,oBAAsBjD,OACtBiL,YAAI5M,YAAMyO,GAAD,gBAA4C,IAAvB5T,EAAM2S,aAAqB,EAAI,EAApD,cACTlD,YACGtK,YAAMyO,GAAD,gBAA4C,IAAvB5T,EAAM2S,aAAqB,EAAI,EAApD,0BACL3S,EAAMoT,qBAAuBpT,EAAMwT,eAEtCzB,YAAI5M,YAAMyO,GAAW,mBACrB5T,EAAM0J,eAAN,UAA0B8G,EAAapQ,QAAvC,oBACAqP,YAAItK,YAAMyO,GAAW,kBAAlB,UAAwCpD,EAAapQ,QAArD,qBACHqO,YAAW,WACRgB,YAAItK,YAAMyO,GAAW,kBAAmB,aACxC,KAEH5T,EAAM6S,gBAAkB9K,GACrB/H,EACAmH,GAAUnH,EAAM4S,eAAgB5S,EAAMqH,UAAWrH,EAAMsH,KAAMtH,EAAMuH,QAGzEmB,GAAY1I,GAMZA,EAAMqT,kBAAoB,WAE7B5I,YApNO,SAoNKzK,EAAO0K,GAChB,IAAMC,EAAoB3K,EAAMqH,UAChCrH,EAAMqH,UAvWK,SAACuD,EAAoB5K,GACtC,IAAMqH,EAAcrH,EAAdqH,UACN,OAAIuD,EACiB,IAAdvD,EACM,EAEAA,EAAY,EAGJ,IAAdA,EACM,EAEAA,EAAY,EA2VDoD,CAAYC,EAAOtK,QAAS,CAC3CiH,UAAWrH,EAAMqH,YAEpBkB,GAAgBvI,GAChBA,EAAM6S,gBAAkB9K,GACrB/H,EACAmH,GAAUnH,EAAM4S,eAAgB5S,EAAMqH,UAAWrH,EAAMsH,KAAMtH,EAAMuH,OAElEvH,EAAM6S,gBAAgBtQ,OAAS,GAChCvC,EAAMqH,UAAYsD,EAClB3K,EAAM6S,gBAAkB9K,GACrB/H,EACAmH,GAAUnH,EAAM4S,eAAgB5S,EAAMqH,UAAWrH,EAAMsH,KAAMtH,EAAMuH,QAGtEvH,EAAMqT,kBAAoB,UAE7B3K,GAAY1I,IAEf6K,UAzOO,SAyOG7K,GACP,GAAIA,EAAMoJ,YAAa,CACpB,GAAgC,YAA5BpJ,EAAMqT,kBAEP,YADArT,EAAMqT,kBAAoB,UAG7B9K,GAAgBvI,GAChBA,EAAMuH,MAAQ,EACdvH,EAAM6S,gBAAkB9K,GACrB/H,EACAmH,GAAUnH,EAAM4S,eAAgB5S,EAAMqH,UAAWrH,EAAMsH,KAAMtH,EAAMuH,OAElEvH,EAAM6S,gBAAgBtQ,OAAS,GAChCvC,EAAMuH,MAAQ,EACdvH,EAAM6S,gBAAkB9K,GACrB/H,EACAmH,GAAUnH,EAAM4S,eAAgB5S,EAAMqH,UAAWrH,EAAMsH,KAAMtH,EAAMuH,OAEtEvH,EAAMqT,kBAAoB,WAE1BrT,EAAMqT,kBAAoB,UAE7B3K,GAAY1I,KAIlB8K,eAnQO,SAmQQ9K,IAlTQ,SAACA,GAAW,IAAD,gBACjBA,EAAM8S,eADW,IACrC,2BAAyC,CAAC,IAA/B1K,EAA8B,QACtCpI,EAAMyI,KAAKL,EAAMN,GAAGM,EAAMP,GAAK,QAFG,+BAmT/BkD,CAAqB/K,GACrBA,EAAM8S,cAAgB,GAFH,oBAGD9S,EAAM6S,iBAHL,IAGnB,2BAAyC,CAAC,IAAjCzK,EAAgC,QACtCpI,EAAM8S,cAAcxK,KAAK,CAAET,EAAGO,EAAMP,EAAGC,EAAGM,EAAMN,KAJhC,8BAOnB,IADA,IAAIkD,EAAYhL,EAAMuH,KACgB,IAA/BvH,EAAM8S,cAAcvQ,QACxByI,GAAa,EACbhL,EAAM8S,cAAgB/K,GACnB/H,EACAmH,GAAUnH,EAAM4S,eAAgB5S,EAAMqH,UAAWrH,EAAMsH,KAAM0D,IAC7D,GAGNA,GAAa,EACbhL,EAAM8S,cAAgB/K,GACnB/H,EACAmH,GAAUnH,EAAM4S,eAAgB5S,EAAMqH,UAAWrH,EAAMsH,KAAM0D,IAC7D,IAGNtL,SAzRO,SAyREM,GACNuI,GAAgBvI,GAChBA,EAAM6S,gBAAkB7S,EAAM8S,cAC9BpK,GAAY1I,GACZA,EAAMqT,kBAAoB,UAE7BpI,eA/RO,SA+RQjL,GACZ0I,GAAY1I,GAAO,IAEtBkL,UAlSO,SAkSGlL,GACPuI,GAAgBvI,GAChBA,EAAMsH,MAAQ,EACdtH,EAAM6S,gBAAkB9K,GACrB/H,EACAmH,GAAUnH,EAAM4S,eAAgB5S,EAAMqH,UAAWrH,EAAMsH,KAAMtH,EAAMuH,OAElEvH,EAAM6S,gBAAgBtQ,OAAS,GAChCvC,EAAMsH,MAAQ,EACdtH,EAAM6S,gBAAkB9K,GACrB/H,EACAmH,GAAUnH,EAAM4S,eAAgB5S,EAAMqH,UAAWrH,EAAMsH,KAAMtH,EAAMuH,QAGtEvH,EAAMqT,kBAAoB,UAE7B3K,GAAY1I,IAEfmL,WApTO,SAoTInL,GACRuI,GAAgBvI,GAChBA,EAAMsH,MAAQ,EACdtH,EAAM6S,gBAAkB9K,GACrB/H,EACAmH,GAAUnH,EAAM4S,eAAgB5S,EAAMqH,UAAWrH,EAAMsH,KAAMtH,EAAMuH,OAElEvH,EAAM6S,gBAAgBtQ,OAAS,GAChCvC,EAAMsH,MAAQ,EACdtH,EAAM6S,gBAAkB9K,GACrB/H,EACAmH,GAAUnH,EAAM4S,eAAgB5S,EAAMqH,UAAWrH,EAAMsH,KAAMtH,EAAMuH,QAGtEvH,EAAMqT,kBAAoB,UAE7B3K,GAAY1I,IAEfiU,kBAtUO,SAsUWjU,GACf0I,GAAY1I,IAGfkU,QA1UO,SA0UClU,GACLA,EAAMoJ,aAAc,GAEvBiC,UA7UO,SA6UGrL,GACP,IAAsB,IAAlBA,EAAMyJ,QAAV,CAMA,GAHAzJ,EAAMyJ,SAAU,EAEhBlB,GAAgBvI,GACQ,OAApBA,EAAMwJ,UAAoB,CAAC,IAAD,EAC3BxJ,EAAMwJ,UAAYxJ,EAAM+I,aACxB/I,EAAM+I,aAAeG,GAAWtC,WAChC,EAAAsC,IAAWa,QAAX,oBAAsBjD,WAClB,CACJ,IAAMwE,EAActL,EAAM+I,aAC1B/I,EAAM+I,aAAe/I,EAAMwJ,UAC3BxJ,EAAMwJ,UAAY8B,EAErBtL,EAAMsH,KAAO,EACbtH,EAAMuH,KAAO,EACbvH,EAAMqH,UAAY,EAClBrH,EAAMwI,cAAgBT,GACnB/H,EACAmH,GAAUnH,EAAM+I,aAAc/I,EAAMqH,UAAWrH,EAAMsH,KAAMtH,EAAMuH,OAEpEmB,GAAY1I,GACZA,EAAMqJ,kBAAoB,YAE7B8K,eAvWO,SAuWQnU,EAAO0K,GACnB1K,EAAM2S,aAAejI,EAAOtK,QAAQuS,aACpCiB,GAAYlJ,EAAOtK,QAAQgU,SAE9BC,kBA3WO,SA2WWrU,EAAO0J,GACtB1J,EAAM0J,eAAiBA,EAAetJ,QACT,YAAzBJ,EAAM0J,iBACP1J,EAAMoJ,aAAc,GAEnBpJ,EAAM0J,eAAe4K,SAAS,SAC/BtU,EAAMoJ,aAAc,IAG1BmL,UApXO,SAoXGvU,EAAOwU,GAEdxU,EAAMsT,OAASkB,EAAKpU,SAEvBqU,kBAxXO,SAwXWzU,EAAO0U,GACtB1U,EAAMiT,eAAiByB,EAAMtU,SAEhCuU,gBA3XO,SA2XS3U,EAAM0U,GACnB1U,EAAMuT,aAAemB,EAAMtU,QAC3BJ,EAAMwT,cAAgBzM,KAAKC,MAAM0N,EAAMtU,QAAQ,IAElDwU,aA/XO,SA+XM5U,EAAMwU,GAChBxU,EAAM2T,UAAYa,EAAKpU,YAMnByU,GAAoBhB,GAAgBvT,QAElCuT,MAAf,QC3gBeiB,GA9BW,SAAC,GAA8B,IAA5BvE,EAA2B,EAA3BA,QAASwE,EAAkB,EAAlBA,YAC7BlS,EAAWC,cACjB,EAAwCpB,mBAAS,MAAjD,mBAAO8O,EAAP,KAAqBY,EAArB,KACM4D,EAAe,iDAAG,oGACrB5D,EADqB,SACC/L,EAAmB0P,GADpB,6EAAH,qDAIfE,EAAY,iDAAG,wGACZxF,YAAItK,YAAMC,EAAUmL,EAAU,cAAc,GADhC,uBAEZd,YAAItK,YAAMC,EAAUmL,EAAU,mBAAoB,IAFtC,cAGlB1N,EAAS8O,GAAgBN,cAAc0D,IACvClS,EAAS8O,GAAgBT,cAAc,YACvCrO,EAAS8O,GAAgBV,WAAWV,IACpC1N,EAAS8O,GAAgBP,gBAAgBZ,IACzC3N,EACGgS,GAAkBV,eAAe,CAAExB,aAAc,EAAGyB,QAASjP,YAAMC,EAAUmL,MAR9D,UAUZd,YAAItK,YAAMD,EAAgBd,EAAKsL,YAAYpK,IAAM,YAAY,GAVjD,4CAAH,qDAclB,OADA0P,IAEG,gCACIxE,EACD,wBAAQ5P,QAASqU,EAAjB,oBACA,wBAAQrU,QAASqU,EAAjB,yBChCHC,GAAsB,WACzB,IAAIC,EAAcnS,aAAY,SAAChD,GAAD,OAAWA,EAAM+O,SAAS2B,kBAUxD,OATyB,IAArByE,EAAY5S,SACb4S,EAAcA,EAAY3N,KAAI,WAA2B+K,GAA3B,IAAGhC,EAAH,EAAGA,QAASwE,EAAZ,EAAYA,YAAZ,OAC3B,cAAC,GAAD,CAEGxE,QAASA,EACTwE,YAAaA,GAFRxC,OAMP,eAAC,GAAD,WACJ,mBAAGtO,MAAS,CAACmR,OAAO,GAApB,8BAA6CD,MAGpChR,kBAAK+Q,I,wCCbL1J,GALD,SAAChL,GACb,IAAMiL,EAAQjL,EAAMiL,MACpB,OAAO,qBAAKhL,UAAS,UAAKC,KAAOgL,MAAZ,aAAsBhL,KAAO+K,O,oBCC9CE,GAAU,WACb,IAAMjC,EAAiB1G,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW3L,kBAC/D,MAAuB,YAAnBA,EACM,qBAAKjJ,UAAWC,KAAOmL,UAEvB,qBAAKpL,UAAWC,KAAOmL,QAAvB,SAAiCnC,KAI/BvF,kBAAKwH,ICaLG,GArBF,WACV,IAEMrD,EAFYzF,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,cAExB5M,KAAKI,MAAM,GAAGrB,KAAI,SAACC,EAAKsE,GAC5C,OACG,qBAAK9H,MAAS,CAAC+H,QAAQ,QAAvB,SACIvE,EAAID,KAAI,SAACiE,EAAOQ,GACd,OAAO,cAAC,GAAD,CAAOR,MAAOA,GAAYQ,OAFFF,MAQ3C,OACG,sBAAKtL,UAAWC,KAAO+H,KAAvB,UACIA,EACD,cAAC,GAAD,QCtBI7C,GAAa,CACxBC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAIdC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,M,oBCjIE+F,GAnBS,SAAC1L,GACtB,IAaIiI,EAAO7C,GAAWpF,EAAMiL,OAAO,GAAGjE,KAbf,SAACC,EAAKF,GAC1B,OACG,qBAAK9G,UAAWC,KAAOyL,SAAvB,SACI1E,EAAID,KAAI,SAACiE,EAAOnE,GACd,OAAc,IAAVmE,EACM,cAAC,GAAD,CAAkBA,MAAO,MAAbnE,GAEZ,cAAC,GAAD,CAAOmE,MAAOjL,EAAMiL,OAAYnE,OALVC,MAa5C,OAAO,qBAAK9G,UAAWC,KAAO0L,MAAvB,SAA+B3D,KCuB1B4D,GAtCI,SAAC,GAAgB,IAAdiJ,EAAa,EAAbA,OACbC,EAAiBvS,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAWnC,sBAE3DpJ,GADiB9G,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW/B,UACrD,GACJhH,EAAS,GACb,GAAe,SAAXgJ,EAAmB,CACpB,GAAIpM,GAAWvC,QACZ,OAAO,qBAAKlG,UAAWC,KAAOwI,aAGjC,IAAK,IAAIqD,KAAcrD,GAAW5C,SAC/BgG,EAAOhE,KAAK,cAAC,GAAD,CAA2BmD,MAAOvC,GAAW5C,SAASiG,IAAhCzC,MAErC,OACG,cAAC,WAAD,UACG,qBAAKrJ,UAAWC,KAAOwI,WAAvB,SAAoCoD,MAGtC,GAAe,aAAXgJ,EAAuB,CAC/B,IAAKC,GAAkBA,EAAe5O,QACnC,OAAO,qBAAKlG,UAAWC,KAAOwI,aAEjC,IAAK,IAAIqD,KAAcgJ,EACfhJ,GAGLD,EAAOhE,KAAK,cAAC,GAAD,CAA2BmD,MAAO8J,EAAehJ,IAA3BzC,MAErC,OACG,cAAC,WAAD,UACG,qBAAKrJ,UAAWC,KAAOwI,WAAvB,SACIoD,Q,oBChCVkJ,GAAqB,SAAC,GAAgB,IAAdF,EAAa,EAAbA,OACrBG,EAAkBzS,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAWjC,wBAC1DsC,EAAY1S,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAWpC,kBAC1D,MAAe,aAAXqC,EACM,qBAAK7U,UAAaC,KAAOiV,gBAAzB,SAA2CF,IAEtC,SAAXH,EACM,qBAAK7U,UAAaC,KAAOkV,cAAzB,SAAyCF,SADnD,GAKYvR,kBAAKqR,ICbdK,GAAgB,WACnB,IAAMzM,EAAcpG,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAWjM,eACtDkK,EAAStQ,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW/B,UACjD9C,EAAexN,aAAY,SAAChD,GAAD,OAAWA,EAAM+O,SAASyB,gBAC3D,OAAKpH,EAEMkK,EACD,qBAAKrP,MAAO,CAAE6R,UAAW,UAAzB,uBAEA,qBAAK7R,MAAO,CAAE6R,UAAW,UAAzB,mBAAyCtF,EAAzC,aAJA,qBAAKvM,MAAO,CAAE6R,UAAW,SAASC,OAAO,QAAzC,gBAOE5R,kBAAK0R,IC+BLG,GAxCG,WACf,IAAMnT,EAAWC,cACXyQ,EAAevQ,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW9B,gBAC7D,EAAkD7R,mBAAS6R,GAA3D,mBAAO0C,EAAP,KAA0BC,EAA1B,KAsBA,OAPAC,YAAQhR,YAAMyO,GAAW,iBAAiB,SAACnO,GACpCA,EAAS2Q,UAEVvT,EAASgS,GAAkBF,gBAAgBlP,EAASE,WAKvD,eAAC,GAAD,WACG,uBAAOzD,GAAG,QAAV,6BACA,uBACGA,GAAG,QACHkF,KAAK,SACL9E,MAAO2T,EACP9T,SA3B0B,SAACC,GAC7BA,EAAMC,OAAOC,OAAS,GAGvB4T,GAAsB9T,EAAMC,OAAOC,UAyBnC,wBAAQ1B,QAtBiB,WAC5BmR,YAAI5M,YAAMyO,GAAW,iBACrB/Q,EAASgS,GAAkBF,gBAAgBsB,IAC3CxG,YAAItK,YAAMyO,GAAW,gBAAiBqC,IAmBnC,iBACA,uDAA0B1C,SCnC/B8C,IAAiB,EA6INC,GA3IG,WACf,IAAMzT,EAAWC,cAEXC,EAAWC,aAAY,SAAChD,GAAD,OAAWA,EAAM+C,YAExC4P,EAAe3P,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW1C,gBACvDnC,EAAexN,aAAY,SAAChD,GAAD,OAAWA,EAAM+O,SAASyB,gBAErD8C,EAAStQ,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW/B,UAEjDlK,GADiBpG,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW3L,kBAC3C1G,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAWjM,gBAEtDqK,GADoBzQ,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAWhC,qBACjDrQ,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW5B,aACnDhL,EAAOzF,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW5M,QACrD5G,qBAAU,WACP,GAAKuH,GAAekK,EAAS,CAG1BvB,YAAI5M,YAAMyO,GAAW,SACrBrJ,QAAQC,IAAI,QACZ3H,EAASgS,GAAkBvK,YAAYkG,IACvCf,YAAItK,YAAMyO,GAAD,gBAAqBjB,EAArB,uBAAwDzJ,GAAW5C,UAC5EzD,EAASgS,GAAkBZ,qBAC3BpR,EAASgS,GAAkB/J,kBAC3BjI,EAASgS,GAAkB5J,kBAC3B,IAAMkD,EAAoBP,aAAY,WACnC2I,MACA,KACGnI,EAAsBR,aAAY,WACrCS,MACA,GACGC,EAAqBV,aAAY,WACpCW,MACA,GACH,OAAO,WACJV,cAAcM,GACdN,cAAcO,GACdP,cAAcS,OAGpB,CAACgF,EAAQlK,EAAavG,EAAS4Q,IAElC,IAAMlF,EAAe,iDAAG,8FACrB,IAASvM,KAAO8K,GACTA,GAAgB9K,KACjB8K,GAAgB9K,IAAQ,GAI3B4K,GAAa7J,EAAQ,WACrB8J,GAAc9J,EAAQ,WACtB+J,GAAgB/J,EAAQ,UAAgB,KAExCF,EAASgS,GAAkBhK,aAC3BgC,GAAc9J,EAAQ,WAAgB,EACtC+J,GAAgB/J,EAAQ,UAAgB,IAGxC6J,GAAa7J,EAAQ,YACrB8J,GAAc9J,EAAQ,YACtB+J,GAAgB/J,EAAQ,WAAiB,KAEzCF,EAASgS,GAAkB1J,cAC3BtI,EAASgS,GAAkB/J,kBAC3BjI,EAASgS,GAAkB5J,kBAC3B4B,GAAc9J,EAAQ,YAAiB,EACvC+J,GAAgB/J,EAAQ,WAAiB,IAGzC6J,GAAa7J,EAAQ,WACrB8J,GAAc9J,EAAQ,WACtB+J,GAAgB/J,EAAQ,UAAgB,KAExCF,EAASgS,GAAkB3J,aAC3BrI,EAASgS,GAAkB/J,kBAC3BjI,EAASgS,GAAkB5J,kBAC3B4B,GAAc9J,EAAQ,WAAgB,EACtC+J,GAAgB/J,EAAQ,UAAgB,IAnCtB,2CAAH,qDAsCfsL,EAAU,iDAAG,2FACXjF,IAAeiN,GADJ,iDAIZzJ,GAAa7J,EAAQ,cAAoB8J,GAAc9J,EAAQ,cAChEF,EAASgS,GAAkBpK,aAAY,IACvC5H,EAASgS,GAAkB/J,kBAC3BjI,EAASgS,GAAkB5J,kBAC3B4B,GAAc9J,EAAQ,aAAkB,GAEvC6J,GAAa7J,EAAQ,eAAqB8J,GAAc9J,EAAQ,eACjEF,EAASgS,GAAkBpK,aAAY,IACvC5H,EAASgS,GAAkB/J,kBAC3BjI,EAASgS,GAAkB5J,kBAC3B4B,GAAc9J,EAAQ,cAAmB,GAExC6J,GAAa7J,EAAQ,YAAkB8J,GAAc9J,EAAQ,YAC9DsT,IAAiB,EACjBxT,EAASgS,GAAkBnV,YAC3BmN,GAAc9J,EAAQ,WAAgB,EAEtC0L,YAAW,WACR4H,IAAiB,IACjB,MAEFzJ,GAAa7J,EAAQ,YAAkB8J,GAAc9J,EAAQ,YAC9D+J,GAAgB/J,EAAQ,UAAgB,EACxCF,EAASgS,GAAkBhK,aAC3BgC,GAAc9J,EAAQ,WAAgB,GAErC6J,GAAa7J,EAAQ,aAAmB8J,GAAc9J,EAAQ,aAC/D+J,GAAgB/J,EAAQ,WAAiB,EACzCF,EAASgS,GAAkB1J,cAC3BtI,EAASgS,GAAkB/J,kBAC3BjI,EAASgS,GAAkB5J,kBAC3B4B,GAAc9J,EAAQ,YAAiB,GAEtC6J,GAAa7J,EAAQ,YAAkB8J,GAAc9J,EAAQ,YAC9D+J,GAAgB/J,EAAQ,UAAgB,EACxCF,EAASgS,GAAkB3J,aAC3BrI,EAASgS,GAAkB/J,kBAC3BjI,EAASgS,GAAkB5J,kBAC3B4B,GAAc9J,EAAQ,WAAgB,GA1CzB,2CAAH,qDA6CVwT,EAAQ,iDAAG,wFACd1T,EAASgS,GAAkBhK,aAC3BhI,EAASgS,GAAkB/J,kBAC3BjI,EAASgS,GAAkB5J,kBAHb,2CAAH,qDAKdpJ,qBAAU,WACHyR,GAED7D,YAAItK,YAAMyO,GAAW,QAASnL,KAEjC,CAACA,EAAM6K,KC1HTkD,IAAoB,EAElBC,GAAa,WAChB,IAAM5T,EAAWC,cAEXC,EAAWC,aAAY,SAAChD,GAAD,OAAWA,EAAM+C,YAExC4P,EAAe3P,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW1C,gBAGvDW,GAFetQ,aAAY,SAAChD,GAAD,OAAWA,EAAM+O,SAASyB,gBAE5CxN,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW/B,WACjD5J,EAAiB1G,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW3L,kBACzDN,EAAcpG,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAWjM,eACtDiK,EAAoBrQ,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAWhC,qBAC5DJ,EAAiBjQ,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAWpC,kBACzDM,EAAevQ,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW9B,gBACvDI,EAAY3Q,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW1B,aACpDD,EAAY1Q,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW3B,aAErDhK,IACF8M,IAAoB,GAGnB9M,EAAe4K,SAAS,QACzB7F,YAAW,WACR+H,IAAoB,IACpB,KAGoB,WAAtBnD,IACDxQ,EAASgS,GAAkBb,YAC3BnR,EAASgS,GAAkB7K,cAC3BnH,EAASgS,GAAkBD,cAAa,KAG3C/S,qBAAU,WACH8R,IACGV,GAAkBM,GACnB9D,YAAItK,YAAMyO,GAAW,QAAS,MAC9BvO,EAAmBjB,EAAKsL,YAAYpK,KAAKE,MAAK,SAACpG,GAC5CqQ,YAAItK,YAAMyO,GAAW,kBAAlB,UAAwCxU,EAAxC,YAENyD,EAASgS,GAAkBX,YACnBR,GAIRjE,YAAItK,YAAMyO,GAAW,QAA0B,IAAjBjB,EAAqB,EAAI,IAG7D9P,EAASgS,GAAkBD,cAAa,MACxC,CAAC3B,EAAgBM,EAAc1Q,EAAU8Q,EAAWD,IAEvD7R,qBAAU,WACP,GAAIuH,EAQD,OAPA2I,YAAI5M,YAAMyO,GAAD,gBAAsC,IAAjBjB,EAAqB,EAAI,EAA9C,cACT9P,EAASgS,GAAkBvV,WAC3BmQ,YAAItK,YAAMyO,GAAD,gBAAqBjB,EAArB,aAA8C,CACpD+D,UAAWxN,GAAW5C,SACtB4D,aAAc+I,IAGV,eAEV,CAAC7J,IAEJvH,qBAAU,WACP4N,YAAItK,YAAMyO,GAAD,gBAAqBjB,EAArB,aAA8C,CACpD+D,UAAWxN,GAAW5C,SACtB4D,aAAc+I,MAEjB,CAACA,EAAgB/J,GAAW5C,WAuH/B,IAAMqQ,EAAS,iDAAG,+FACflH,YAAItK,YAAMyO,GAAW,kBAAmB,SADzB,SAET,IAAIgD,SAAQ,SAACC,GAAD,OAAapI,WAAWoI,EAAS,QAFpC,cAGfpH,YAAItK,YAAMyO,GAAW,kBAAmB,MAHzB,SAIT,IAAIgD,SAAQ,SAACC,GAAD,OAAapI,WAAWoI,EAAS,QAJpC,uBAKTpH,YAAItK,YAAMyO,GAAW,kBAAmB,WAL/B,wBAMTnE,YAAItK,YAAMyO,GAAW,QAAS,CACjC,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,UA3B7D,yBA6BTnE,YAAItK,YAAMyO,GAAW,SAA2B,IAAjBjB,EAAqB,EAAI,GA7B/C,4CAAH,qDAgGf,OAhEAmE,YAAa3R,YAAMD,EAAgBd,EAAKsL,YAAYpK,IAAM,YAAYmK,KAAI,GAC1E5N,qBAAU,WACPsU,YAAQhR,YAAMyO,GAAW,mBAAmB,SAACnO,GACtCA,EAAS2Q,WACVvT,EAASgS,GAAkBR,kBAAkB5O,EAASE,QAC/B,UAAnBF,EAASE,QACV9C,EAASgS,GAAkBhL,gBAC3B4F,YAAItK,YAAMyO,GAAD,gBAAqBjB,EAArB,aAA8C,CACpD+D,UAAWxN,GAAW5C,SACtB4D,aAAc+I,IAGjBuD,IAAoB,UAO5BpN,IAAgBkK,GACjB6C,YAAQhR,YAAMyO,GAAW,SAAS,SAACnO,GAC5BA,EAAS2Q,UACVvT,EAASgS,GAAkBrD,QAAQ/L,EAASE,WAIjDyD,IAAgBkK,GACjB6C,YAAQhR,YAAMyO,GAAD,gBAAqBjB,EAArB,2BAA2D,SAAClN,GACtE5C,EAASgS,GAAkBJ,kBAAkBhP,EAASE,WAK5DwQ,YAAQhR,YAAMyO,GAAD,gBAAsC,IAAjBjB,EAAqB,EAAI,EAA9C,cAA4D,SAAClN,GACnEA,EAAS2Q,UACVvT,EACGgS,GAAkBd,gBAAgB,CAC/Bb,mBAAoBzN,EAASE,MAAM+Q,UACnCtD,qBAAsB3N,EAASE,MAAMuE,mBAMjDiM,YAAQhR,YAAMyO,GAAW,SAAS,SAACnO,GAC5BA,EAAS2Q,UACVvT,EAASgS,GAAkBN,UAAU9O,EAASE,QAAUgN,OAI9DzR,SAASY,UAAY,SAACC,GACfyU,IAGAzU,EAAQC,MAAQe,EAAQ,UACzByT,IAAoB,EACpBG,MASH,eAAC,WAAD,WACG,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,sBACG1S,MAAO,CACJ+H,QAAS,OACT0C,SAAU,SACVC,eAAgB,UAJtB,UAOG,cAAC,GAAD,CAAoB2G,OAAO,aAC3B,cAAC,GAAD,CAAYA,OAAO,aACnB,cAAC,GAAD,IACA,cAAC,GAAD,CAAYA,OAAO,SACnB,cAAC,GAAD,CAAoBA,OAAO,aAE5BlM,GAAe,cAAC,GAAD,IACjB,cAAC,GAAD,UACG,sBAAKnF,MAAO,CAAEwH,MAAO,UAArB,UACG,6CACA,oDACA,qEACA,6EACA,6FACA,wFAOAtH,kBAAKsS,IC1ULM,GARG,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAClB,OACG,cAAC,GAAD,UACG,wBAAQpW,QAASoW,EAAjB,2BC0KMC,GApJG,WACf,IAAMpU,EAAWC,cACXoU,EAAalU,aAAY,SAAChD,GAAD,OAAWA,EAAM+O,SAASsB,cACnDvB,EAAa9L,aAAY,SAAChD,GAAD,OAAWA,EAAM+O,SAASD,cAEnD6D,EAAe3P,aAAY,SAAChD,GAAD,OAAWA,EAAMqV,WAAW1C,gBACvDpC,EAAUvN,aAAY,SAAChD,GAAD,OAAWA,EAAM+O,SAASwB,WAClDA,GACDuG,YAAa3R,YAAMC,EAAUmL,IAAUV,SAI1CsG,YAAQjR,GAAgB,WACjBd,EAAKsL,aACNnK,YAAIL,GAAgBM,MAAK,SAACC,GACnBA,EAASE,OACV9C,EACG8O,GAAgBZ,cACboG,OAAOC,QAAQ3R,EAASE,OAAO0R,QAC5B,SAAC/E,GAAD,OAAUA,EAAK,KAAOlO,EAAKsL,YAAYpK,MAAQgN,EAAK,GAAG3C,kBAUxEY,GACD4F,YAAQhR,YAAMC,EAAUmL,EAAU,cAAc,SAAC9K,GACzCA,EAAS2Q,WACH3Q,EAASE,MACI,IAAjBgN,IACD9P,EACGgS,GAAkBV,eAAe,CAC9BxB,aAAc,EACdyB,QAASjP,YAAMC,EAAUmL,MAG/B1N,EAAS8O,GAAgBT,cAAc,YACvCzB,YAAItK,YAAMD,EAAgBd,EAAKsL,YAAYpK,IAAM,YAAY,IAIhEzC,EAAS8O,GAAgBT,cAAc,gBAKhDoG,YAAalS,GAAU,WAChBhB,EAAKsL,aACNnK,YAAIH,GAAUI,MAAK,SAACC,GACbA,EAAS2Q,UACVvT,EACG8O,GAAgBL,mBACb6F,OAAOC,QAAQ3R,EAASE,OACpB0R,QACE,SAACE,GAAD,OAAWA,EAAK,GAAGrF,UAAYqF,EAAK,GAAGtF,UAAY7N,EAAKsL,YAAYpK,OAEtEkC,KAAI,SAAC+P,GACH,MAAO,CAAExC,YAAawC,EAAK,GAAGvF,QAASzB,QAASgH,EAAK,eAO7EC,YAAepS,GAAU,WAClBhB,EAAKsL,aACNnK,YAAIH,GAAUI,MAAK,SAACC,GACbA,EAAS2Q,SACVvT,EACG8O,GAAgBL,mBACb6F,OAAOC,QAAQ3R,EAASE,OACpB0R,QACE,SAACE,GAAD,OAAWA,EAAK,GAAGrF,UAAYqF,EAAK,GAAGtF,UAAY7N,EAAKsL,YAAYpK,OAEtEkC,KAAI,SAAC+P,GACH,MAAO,CAAExC,YAAawC,EAAK,GAAGvF,QAASzB,QAASgH,EAAK,SAKjE1U,EAAS8O,GAAgBL,mBAAmB,WAKxD,IAAMb,EAAazN,aAAY,SAAChD,GAAD,OAAWA,EAAM+O,SAAS0B,cACnDgC,EAAiB,iDAAG,+FACvBV,YAAI5M,YAAMD,EAAgBuL,IAC1B5N,EAASgS,GAAkBlL,SAFJ,SAGjBkG,YAAO1K,YAAMC,EAAUmL,IAHN,OAIvB1N,EAAS8O,GAAgBhI,SACrBvF,EAAKsL,aACND,YAAItK,YAAMD,EAAgBd,EAAKsL,YAAYpK,IAAM,YAAY,GANzC,2CAAH,qDA6CvB,OAlCImL,GACD0F,YAAQhR,YAAMD,EAAgBuL,GAAvB,iDAAoC,WAAOhL,GAAP,oFACnCA,EAAS2Q,SAD0B,gBAErC3D,IAFqC,0BAG7BhN,EAASE,MAAMgK,OAHc,uBAKjC8H,GAAO,EAL0B,SAM/BlS,YAAIJ,YAAMyO,GAAW,aAAapO,MAAK,SAACC,GAC3CgS,EAAOhS,EAASE,SAPkB,OAShC8R,GACFhF,IAVkC,2CAApC,uDAiBS,YAAfyE,GACDf,YAAQvC,IAAW,SAACnO,GAEZA,EAAS2Q,WACXrE,YAAI5M,YAAMC,EAAUmL,IACpBwB,YAAI5M,YAAMD,EAAgBuL,IAC1B5N,EAAS8O,GAAgBhI,SAErBvF,EAAKsL,aACND,YAAItK,YAAMD,EAAgBd,EAAKsL,YAAYpK,IAAM,YAAY,GAEhEzC,EAASgS,GAAkBlL,aAMjC,eAAC,WAAD,WACG,oDACEmF,GAAc,+CACA,qBAAfoI,GAAqC,cAAC,GAAD,IACtB,qBAAfA,GAAqC,cAAC,GAAD,IACtB,YAAfA,GAA4B,cAAC,GAAD,CAAgBzE,kBAAmBA,IAChD,YAAfyE,GAA4B,cAAC,GAAD,CAAWF,iBAAkBvE,IAC1C,YAAfyE,GAA4B,cAAC,GAAD,Q,oBCvIvBQ,GAhCO,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,QAAS/U,EAAyB,EAAzBA,mBAC/B,OACG,qBAAInC,UAAWC,KAAO,WAAtB,UACG,oBACGE,QAAS,WACN+W,EAAQ,iBAFd,0BAOA,oBACG/W,QAAS,WACN+W,EAAQ,eAFd,wBAOA,oBAAI1T,MAAO,CAAE2T,gBAAiB,OAAQ1T,MAAO,SAA7C,SACG,cAAC,GAAD,MAEH,oBACGtD,QAAS,WACNgC,GAAmB,IAEtBqB,MAAO,CAAEC,MAAO,SAJnB,8BCiCM2T,GA3CH,WACT,IAAMhV,EAAWC,cACjB,EAAwBpB,mBAAS,cAAC,GAAD,KAAjC,mBAAOoW,EAAP,KAAaH,EAAb,KACA,EAA6CjW,oBAAS,GAAtD,mBAAOqW,EAAP,KAAuBnV,EAAvB,KAgCA,OAlBAoV,YAAmB5T,GAAM,SAAC6T,GACnBA,GACDpV,EAAS8O,GAAgBd,SACzBhO,EAAS8O,GAAgBhI,SACzB9G,EAAS8O,GAAgBT,cAAc,uBAGvCrO,EAAS8O,GAAgBb,UACtBX,IACA4B,YAAI5B,IAEPtN,EAAS8O,GAAgBhI,aAQ5B,eAAC,IAAMuO,SAAP,WACG,cAAC,GAAD,CAAeP,QAjCK,SAACQ,GACP,iBAAbA,GACDtV,EAAS0I,EAAiB5B,SAC1BgO,EAAQ,cAAC,GAAD,MACa,eAAbQ,IACLvE,IACA/D,YAAO+D,IAEV/Q,EAASgS,GAAkBlL,SAC3BgO,EAAQ,cAAC,GAAD,OAwBmC/U,mBAAoBA,IAC9DkV,EACAC,GAAiB,cAAC,EAAD,CAAanV,mBAAoBA,QCpC7CwV,GATDC,YAAe,CAC1BC,QAAS,CACN1M,UAAW2M,EACXxJ,SAAUyJ,GACVnD,WAAYoD,GACZ1V,SAAU2V,KCNHC,IAASC,WAAW1X,SAASC,eAAe,SACpD0X,OACH,cAAC,IAAD,CAAUT,MAAOA,GAAjB,SACE,cAAC,GAAD,S","file":"static/js/main.76c17f62.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HeldBlock_title__-UOyq\",\"heldBlockOuter\":\"HeldBlock_heldBlockOuter__1Xhyv\",\"grid\":\"HeldBlock_grid__rrQf0\",\"gridRow\":\"HeldBlock_gridRow__2llk9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pieceQueue\":\"PieceQueue_pieceQueue___hxZt\",\"piece\":\"PieceQueue_piece__NTkk0\",\"pieceRow\":\"PieceQueue_pieceRow__1CaEL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pieceQueue\":\"PieceQueue_pieceQueue__N5gJS\",\"piece\":\"PieceQueue_piece__1nqbS\",\"pieceRow\":\"PieceQueue_pieceRow__2ZzqI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stopWatch\":\"StopWatch_stopWatch__2hbXZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__2znzX\",\"modal\":\"Modal_modal__2QgxK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Block_block__1kjjl\",\"None\":\"Block_None__ltR1S\",\"I\":\"Block_I__1Pnys\",\"T\":\"Block_T__WdEBm\",\"L\":\"Block_L__1zsbc\",\"J\":\"Block_J__2iV29\",\"Z\":\"Block_Z__28EjD\",\"S\":\"Block_S__MKS_j\",\"O\":\"Block_O__3X5pc\",\"Ighost\":\"Block_Ighost__1pBKL\",\"Tghost\":\"Block_Tghost__2h680\",\"Lghost\":\"Block_Lghost__3KiXo\",\"Jghost\":\"Block_Jghost__9BTwX\",\"Zghost\":\"Block_Zghost__3ytmC\",\"Sghost\":\"Block_Sghost__1z9Pj\",\"Oghost\":\"Block_Oghost__34NVA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Block_block__7hl6T\",\"None\":\"Block_None__2PHRA\",\"I\":\"Block_I__2hPz5\",\"T\":\"Block_T__1zbV7\",\"L\":\"Block_L__vPAnW\",\"J\":\"Block_J__1lt8I\",\"Z\":\"Block_Z__2BuFD\",\"S\":\"Block_S__36R4_\",\"O\":\"Block_O__1LvhJ\",\"Ighost\":\"Block_Ighost__lbI0G\",\"Tghost\":\"Block_Tghost__3-N71\",\"Lghost\":\"Block_Lghost__2imGj\",\"Jghost\":\"Block_Jghost__3QcrR\",\"Zghost\":\"Block_Zghost__eEqpK\",\"Sghost\":\"Block_Sghost__2Fbny\",\"Oghost\":\"Block_Oghost__1cvVz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"readyGo\":\"ReadyGo_readyGo__3i4cO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterOpponent\":\"LineClearedCounter_counterOpponent__3bjI0\",\"counterMyself\":\"LineClearedCounter_counterMyself__2Fnqt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__9Fsru\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"readyGo\":\"ReadyGo_readyGo__18l16\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"howToPlay\":\"HowToPlay_howToPlay__2-hPX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2N-0v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__3hTgC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav-bar\":\"NavigationBar_nav-bar__WRYyO\"};","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialControlsState = {\n   newGame: \"Escape\",\n   moveLeft: \"ArrowLeft\",\n   moveRight: \"ArrowRight\",\n   softDrop: \"ArrowDown\",\n   hardDrop: \" \",\n   rotateLeft: \"z\",\n   rotateRight: \"ArrowUp\",\n   hold: \"c\",\n};\n\nconst controlsSlice = createSlice({\n   name: \"controls\",\n   initialState: initialControlsState,\n   reducers: {\n      resetDefault(state) {\n        state.newGame= \"Escape\";\n        state.moveLeft= \"ArrowLeft\";\n        state.moveRight= \"ArrowRight\";\n        state.softDrop= \"ArrowDown\";\n        state.hardDrop= \" \";\n        state.rotateLeft= \"z\";\n        state.rotateRight= \"ArrowUp\";\n        state.hold= \"c\";\n      },\n      resetAlbert(state) {\n        state.newGame= \"Escape\";\n        state.moveLeft= \"ArrowLeft\";\n        state.moveRight= \"ArrowRight\";\n        state.softDrop= \"ArrowDown\";\n        state.hardDrop= \" \";\n        state.rotateLeft= \"q\";\n        state.rotateRight= \"w\";\n        state.hold= \"Tab\";\n      },\n      setNewControls(state,newControls){\n        state.newGame= newControls.payload.newGame\n        state.moveLeft= newControls.payload.moveLeft\n        state.moveRight= newControls.payload.moveRight\n        state.softDrop= newControls.payload.softDrop\n        state.hardDrop= newControls.payload.hardDrop\n        state.rotateLeft= newControls.payload.rotateLeft\n        state.rotateRight= newControls.payload.rotateRight\n        state.hold= newControls.payload.hold\n      }\n   },\n});\n\nexport const controlsActions = controlsSlice.actions;\n\nexport default controlsSlice.reducer;","import { Fragment } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport styles from \"./Modal.module.css\";\nconst Backdrop = (props) => {\n   return <div className={styles.backdrop} onClick={props.onClick} ></div>;\n};\n\nconst ModalOverlay = ({ children }) => {\n   return <div className={styles.modal}>{children}</div>;\n};\n\n\nconst Modal = (props) => {\n    const portalElement = document.getElementById(\"overlays\");\n    return (\n      <Fragment>\n        {createPortal(\n          <Backdrop onClick={props.onClick} />,\n          portalElement\n        )}\n        {createPortal(\n          <ModalOverlay>{props.children}</ModalOverlay>,\n          portalElement\n        )}\n      </Fragment>\n    );\n  };\n\nexport default Modal;\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst KeyBinding = ({ controlName, input, setInput, currentKey }) => {\n   const [bindingBeingChanged, setBindingBeingChanged] = useState(false);\n   useEffect(() => {\n      document.onkeydown = (keycode) => {\n         if (bindingBeingChanged) {\n            setInput(keycode.key);\n         }\n      };\n   }, [bindingBeingChanged]);\n   let displayWord = input;\n   if (displayWord === \" \") {\n      displayWord = \"space\";\n   }\n   useEffect(() => {\n      setInput(currentKey);\n   },[currentKey]);\n   return (\n      <div>\n         <label id={controlName}>{`${controlName} `}</label>\n         <input\n            onChange={(event) => {\n               if (event.target.value.length === 1) {\n                  event.target.blur();\n               }\n            }}\n            onFocus={(event) => {\n               setInput(\"\");\n               setBindingBeingChanged(true);\n            }}\n            onBlur={(event) => {\n               if (event.target.value === \"\") {\n                  setInput(currentKey);\n               }\n               setBindingBeingChanged(false);\n            }}\n            id={controlName}\n            value={displayWord}\n         ></input>\n      </div>\n   );\n};\nexport default KeyBinding;\n","import { memo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { controlsActions } from \"../../store/Controls\";\nimport Modal from \"../UI/Modal\";\nimport KeyBinding from \"./KeyBinding\";\n\nconst KeyBindings = ({ setShowKeyBindings }) => {\n   const dispatch = useDispatch();\n   const controls = useSelector((state) => state.controls);\n   const [newGameInput, setNewGameInput] = useState(controls[\"newGame\"]);\n   const [rotateRightInput, setRotateRightInput] = useState(controls[\"rotateRight\"]);\n   const [rotateLeftInput, setRotateLeftInput] = useState(controls[\"rotateLeft\"]);\n   const [holdInput, setHoldInput] = useState(controls[\"hold\"]);\n   const [hardDropInput, setHardDropInput] = useState(controls[\"hardDrop\"]);\n   const [softDropInput, setSoftDropInput] = useState(controls[\"softDrop\"]);\n   const [moveLeftInput, setMoveLeftInput] = useState(controls[\"moveLeft\"]);\n   const [moveRightInput, setMoveRightInput] = useState(controls[\"moveRight\"]);\n   return (\n      <Modal\n         onClick={() => {\n            setShowKeyBindings(false);\n         }}\n      >\n         <button\n            onClick={() => {\n               setShowKeyBindings(false);\n            }}\n            style={{ float: \"right\" }}\n         >\n            x\n         </button>\n         <KeyBinding\n            controlName=\"newGame\"\n            currentKey={controls[\"newGame\"]}\n            input={newGameInput}\n            setInput={setNewGameInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"rotateRight\"]}\n            controlName=\"rotateRight\"\n            input={rotateRightInput}\n            setInput={setRotateRightInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"rotateLeft\"]}\n            controlName=\"rotateLeft\"\n            input={rotateLeftInput}\n            setInput={setRotateLeftInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"hold\"]}\n            controlName=\"hold\"\n            input={holdInput}\n            setInput={setHoldInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"hardDrop\"]}\n            controlName=\"hardDrop\"\n            input={hardDropInput}\n            setInput={setHardDropInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"softDrop\"]}\n            controlName=\"softDrop\"\n            input={softDropInput}\n            setInput={setSoftDropInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"moveLeft\"]}\n            controlName=\"moveLeft\"\n            input={moveLeftInput}\n            setInput={setMoveLeftInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"moveRight\"]}\n            controlName=\"moveRight\"\n            input={moveRightInput}\n            setInput={setMoveRightInput}\n         />\n         <div>\n            <button\n               onClick={() => {\n                  dispatch(controlsActions.resetDefault());\n               }}\n            >\n               Default\n            </button>\n            <button\n               onClick={() => {\n                  dispatch(controlsActions.resetAlbert());\n               }}\n            >\n               Albert\n            </button>\n            <button\n               onClick={() => {\n                  dispatch(\n                     controlsActions.setNewControls({\n                        newGame: newGameInput,\n                        rotateRight: rotateRightInput,\n                        rotateLeft: rotateLeftInput,\n                        hardDrop:hardDropInput,\n                        softDrop:softDropInput,\n                        moveLeft:moveLeftInput,\n                        moveRight:moveRightInput,\n                        hold:holdInput\n                     })\n                  );\n               }}\n            >\n               Save\n            </button>\n         </div>\n      </Modal>\n   );\n};\n\nexport default memo(KeyBindings);\n","// Import the functions you need from the SDKs you need\nimport { getAuth } from \"@firebase/auth\";\nimport { child, get, getDatabase, ref } from \"@firebase/database\";\nimport { initializeApp } from \"firebase/app\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA9ipNK6_boqbwThQlJgolni-O5iIgIl40\",\n  authDomain: \"ditris-2244c.firebaseapp.com\",\n  databaseURL: \"https://ditris-2244c-default-rtdb.firebaseio.com\",\n  projectId: \"ditris-2244c\",\n  storageBucket: \"ditris-2244c.appspot.com\",\n  messagingSenderId: \"743373731037\",\n  appId: \"1:743373731037:web:9552a80db8b0df8d875734\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth()\nexport const db = getDatabase()\nexport const rootRef = ref(db);\nexport const onlineUsersRef = child(rootRef,'users')\nexport const roomsRef= child(rootRef,'rooms')\nexport const getUsernameFromuid = async (uid) =>{\n  let username;\n  await get(child(onlineUsersRef,uid)).then(snapshot=>{username = snapshot.val().username})\n  return username\n}\n\n\n","export const TETRIMINOS = {\n  I: [\n    //I\n    [\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  ],\n\n  T: [\n    //T\n    [\n      [0, 1, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  L: [\n    //L\n    [\n      [0, 0, 1],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  J: [\n    //J\n    [\n      [1, 0, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  ],\n  Z: [\n    //Z\n    [\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  ],\n  S: [\n    //S\n    [\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  O: [\n    //O\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n  ],\n};\n\nexport const getRandomPiece = () => {\n  const value = Math.round(6 * Math.random());\n  switch (value) {\n    case 0:\n      return \"I\";\n    case 1:\n      return \"T\";\n    case 2:\n      return \"L\";\n    case 3:\n      return \"J\";\n    case 4:\n      return \"Z\";\n    case 5:\n      return \"S\";\n    case 6:\n      return \"O\";\n  }\n};\n\nexport const getPiece = (type, rotatePos, xPos, yPos) =>\n  TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n    row.map((col, colPos) => {\n      if (col) {\n        return { x: xPos + colPos, y: yPos + rowPos };\n      }\n      return null;\n    })\n  );\n\nexport const rotatePiece = (isCounterClockwise, { type, rotatePos }) => {\n  return isCounterClockwise\n    ? rotatePos === 0\n      ? TETRIMINOS[type].length - 1\n      : rotatePos - 1\n    : rotatePos === TETRIMINOS[type].length - 1\n    ? 0\n    : rotatePos + 1;\n};\n\nexport const convertMappingToCoords = (mapping) => {\n  let coordArray = [];\n  for (const array of mapping) {\n    for (const coord of array) {\n      if (coord) {\n        coordArray.push(coord);\n      }\n    }\n  }\n  return coordArray;\n};\n","export default class Queue {\n    constructor() {\n      this.elements = {};\n      this.head = 0;\n      this.tail = 0;\n    }\n    enqueue(element) {\n      this.elements[this.tail] = element;\n      this.tail++;\n    }\n    dequeue() {\n      const item = this.elements[this.head];\n      delete this.elements[this.head];\n      this.head++;\n      return item;\n    }\n    peek() {\n      return this.elements[this.head];\n    }\n    empty(){\n        while(!this.isEmpty){\n            this.dequeue()\n        }\n    }\n    get length() {\n      return this.tail - this.head;\n    }\n    get isEmpty() {\n      return this.length === 0;\n    }\n  }","import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { TETRIMINOS } from \"../Components/GameUI/Tetrimino\";\n\nimport Queue from \"../modules/piece-queue\";\n\nlet pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\nconst getRandomPiece = () => {\n   if (pieceArray.length === 0) {\n      pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n   }\n   const value = Math.floor(pieceArray.length * Math.random());\n   return pieceArray.splice(value, 1);\n};\n\nexport let myRoomRef = null;\n\nconst getCoords = (type, rotatePos, xPos, yPos) =>\n   TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n      row.map((col, colPos) => {\n         if (col) {\n            return { x: xPos + colPos, y: yPos + rowPos };\n         }\n         return null;\n      })\n   );\n\nconst rotatePiece = (isCounterClockwise, state) => {\n   let { rotatePos } = state;\n   if (isCounterClockwise) {\n      if (rotatePos === 0) {\n         return 3;\n      } else {\n         return rotatePos - 1;\n      }\n   } else {\n      if (rotatePos === 3) {\n         return 0;\n      } else {\n         return rotatePos + 1;\n      }\n   }\n};\n\nconst convertMappingToCoords = (state, mapping, forGhost = false) => {\n   let coordArray = [];\n   for (const array of mapping) {\n      for (const coord of array) {\n         if (coord) {\n            if (coordIsValid(state, coord, forGhost)) {\n               coordArray.push(coord);\n            }\n         }\n      }\n   }\n   return coordArray;\n};\n\nconst gameStateInitialState = {\n   gameRunning: false,\n   currentShape: null,\n   currentCoords: [],\n   ghostCoords: [],\n   currentPieceState: \"NONE\",\n   rotatePos: 0,\n   xPos: 3,\n   yPos: 0,\n   totalLinesCleared: 0,\n   grid: [\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n   ],\n   // winCondition:(state) =>{return state.totalLinesCleared >= 5},\n   pieceQueue: null,\n   isGameWon: false,\n   heldPiece: null,\n   rotated: false,\n   displayMessage: null,\n\n};\n\nconst removeLastState = (state) => {\n   for (const coord of state.currentCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst removeLastGhostPiece = (state) => {\n   for (const coord of state.ghostCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst placeBlocks = (state, forGhost = false) => {\n   let copiedGrid = state.grid.map(nested=>nested.slice())\n   if (forGhost) {\n      const colorName = state.currentShape + \"ghost\";\n      for (const coord of state.ghostCoords) {\n         copiedGrid[coord.y][coord.x] = colorName;\n         for (const currentCoord of state.currentCoords) {\n            if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n               copiedGrid[coord.y][coord.x] = state.currentShape;\n            }\n         }\n      }\n   } else {\n      for (const coord of state.currentCoords) {\n         copiedGrid[coord.y][coord.x] = state.currentShape;\n      }\n   }\n   state.grid = copiedGrid\n\n};\n\nconst coordIsValid = (state, coord, forGhost = false) => {\n   if (coord) {\n      if (coord.y <= 20 && coord.x >= 0 && coord.x <= 9) {\n         for (let currentCoord of state.currentCoords) {\n            if (forGhost) {\n               if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n                  return true;\n               }\n            }\n         }\n         if (state.grid[coord.y][coord.x].length > 1) {\n            return true;\n         }\n      }\n   }\n   return false;\n};\n\n\nexport let pieceQueue = new Queue();\n\nconst gameStateSlice = createSlice({\n   name: \"gameState\",\n   initialState: gameStateInitialState,\n   reducers: {\n      reset(state) {\n         pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.totalLinesCleared = 0;\n         state.displayMessage = null;\n         state.rotated = false\n         state.heldPiece = null\n         state.currentPieceState = \"GETTING READY\";\n         pieceQueue.empty();\n         state.gameRunning = false;\n      },\n      newGame(state) {\n         pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.totalLinesCleared = 0;\n         state.rotated = false\n         state.heldPiece = null\n         state.displayMessage = \"READY\";\n         state.currentPieceState = \"GETTING READY\";\n         pieceQueue.empty();\n         state.gameRunning = false;\n      },\n      gettingReady(state) {\n         if (state.currentPieceState === \"GETTING READY\") {\n            state.currentPieceState = \"BEFORE START\";\n            state.displayMessage = \"GO!\";\n         } else if (state.currentPieceState === \"BEFORE START\") {\n            state.displayMessage = null;\n            state.gameRunning = true;\n            state.currentShape = getRandomPiece()[0];\n            for (let i = 0; i < 5; i++) {\n               pieceQueue.enqueue(...getRandomPiece());\n            }\n         }\n      },\n      clearLines(state) {\n         let newGrid = [];\n         let linesCleared = 0;\n         for (const row of state.grid) {\n            if (row.every((blockType) => blockType !== \"None\")) {\n               state.totalLinesCleared += 1;\n               linesCleared += 1;\n            } else {\n               newGrid.push(row);\n            }\n         }\n         for (let i = 0; i < linesCleared; i++) {\n            newGrid.unshift([\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n            ]);\n         }\n         state.grid = newGrid;\n         \n      },\n      getNewPiece(state) {\n         if (!state.gameRunning) {\n            return;\n         }\n         state.ghostCoords = [];\n         state.rotated = false;\n         state.currentShape = pieceQueue.dequeue();\n         pieceQueue.enqueue(...getRandomPiece());\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.gameRunning = false;\n            state.displayMessage = \"YOU LOST\";\n            console.log(\"lost\");\n            return;\n         }\n         placeBlocks(state);\n         state.currentPieceState = \"FALLING\";\n      },\n      rotatePiece(state, action) {\n         const originalRotatePos = state.rotatePos;\n         state.rotatePos = rotatePiece(action.payload, {\n            rotatePos: state.rotatePos,\n         });\n         removeLastState(state);\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.rotatePos = originalRotatePos;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentPieceState = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      dropPiece(state) {\n         if (state.gameRunning) {\n            if (state.currentPieceState === \"LANDING\") {\n               state.currentPieceState = \"FROZEN\";\n               return;\n            }\n            if(state.currentPieceState ===\"FROZEN\"){\n               return\n            }\n            removeLastState(state);\n            state.yPos += 1;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n            if (state.currentCoords.length < 4) {\n               state.yPos -= 1;\n               state.currentCoords = convertMappingToCoords(\n                  state,\n                  getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n               );\n               state.currentPieceState = \"LANDING\";\n            } else {\n               state.currentPieceState = \"FALLING\";\n            }\n            placeBlocks(state);\n         } else {\n         }\n      },\n      getGhostCoords(state) {\n         if (!state.gameRunning) {\n            return;\n         }\n         removeLastGhostPiece(state);\n         state.ghostCoords = [];\n         for (let coord of state.currentCoords) {\n            state.ghostCoords.push({ x: coord.x, y: coord.y });\n         }\n         let ghostYPos = state.yPos;\n         while (state.ghostCoords.length === 4) {\n            ghostYPos += 1;\n            state.ghostCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, ghostYPos),\n               true\n            );\n         }\n         ghostYPos -= 1;\n         state.ghostCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, ghostYPos),\n            true\n         );\n      },\n      hardDrop(state) {\n         removeLastState(state);\n         state.currentCoords = state.ghostCoords;\n         placeBlocks(state);\n         state.currentPieceState = \"FROZEN\";\n      },\n      showGhostPiece(state) {\n         if (!state.gameRunning) {\n            return;\n         }\n         placeBlocks(state, true);\n      },\n      shiftLeft(state) {\n         removeLastState(state);\n         state.xPos -= 1;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.xPos += 1;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentPieceState = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      shiftRight(state) {\n         removeLastState(state);\n         state.xPos += 1;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.xPos -= 1;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentPieceState = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      checkIfGameWon(state) {\n         if (state.totalLinesCleared >= 4) {\n            console.log(\"won\");\n            state.isGameWon = true;\n            state.gameRunning = false;\n            state.displayMessage = \"YOU WON\";\n         }\n      },\n      holdPiece(state) {\n         if (state.rotated === true) {\n            return;\n         }\n         state.rotated = true;\n\n         removeLastState(state);\n         if (state.heldPiece === null) {\n            state.heldPiece = state.currentShape;\n            state.currentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n         } else {\n            const placeHolder = state.currentShape;\n            state.currentShape = state.heldPiece;\n            state.heldPiece = placeHolder;\n         }\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         placeBlocks(state);\n         state.currentPieceState = \"FALLING\"\n      },\n\n      // setWinCondition(state,condition){\n      //   state.winCondition = condition;\n      // }\n   },\n});\n\nexport const gameStateActions = gameStateSlice.actions;\n\nexport default gameStateSlice.reducer;\n","import styles from \"./Block.module.css\";\n\nconst Block = (props) => {\n  const color = props.color;\n  return <div className={`${styles.block}  ${styles[color]}`}></div>;\n};\n\nexport default Block;\n","import { useSelector } from \"react-redux\";\n\nimport styles from './ReadyGo.module.css'\n\nconst ReadyGo = () => {\n   const gameState = useSelector((state) => state.gameState);\n   return (\n      <div\n         className = {styles.readyGo}\n      >\n         {gameState.displayMessage}\n      </div>\n   );\n};\n\nexport default ReadyGo;\n","import { useSelector } from \"react-redux\";\n\nimport styles from \"./Grid.module.css\";\nimport Block from \"./Block\";\nimport ReadyGo from \"./ReadyGo\";\n\nconst Grid = () => {\n   const gameState = useSelector((state) => state.gameState);\n\n   const grid = gameState.grid.slice(1).map((row, y_pos) => {\n      return (\n         <div style = {{display:\"flex\"}} key={y_pos}>\n            {row.map((color, x_pos) => {\n               return <Block color={color} key={x_pos} />;\n            })}\n         </div>\n      );\n   });\n\n   return (\n      <div className={styles.grid}>\n         {grid}\n         <ReadyGo></ReadyGo>\n      </div>\n   );\n};\n\nexport default Grid;\n","import Block from \"./Block\";\nimport { TETRIMINOS } from \"./Tetrimino\";\nimport styles from \"./PieceQueue.module.css\";\n\nconst PieceQueuePiece = (props) => {\n   const convertToPiece = (row, yPos) => {\n      return (\n         <div className={styles.pieceRow} key={yPos}>\n            {row.map((color, xPos) => {\n               if (color === 0) {\n                  return <Block key={xPos} color={null} />;\n               } else {\n                  return <Block color={props.color} key={xPos} />;\n               }\n            })}\n         </div>\n      );\n   };\n   let grid = TETRIMINOS[props.color][0].map(convertToPiece);\n\n   return <div className={styles.piece}>{grid}</div>;\n};\n\nexport default PieceQueuePiece;\n","import PieceQueuePiece from \"./PieceQueuePiece\";\nimport styles from './PieceQueue.module.css'\nimport {pieceQueue} from '../../store/GameState'\nimport { useSelector } from \"react-redux\";\n\nconst PieceQueue= (props) =>{\n    const queueChanged= useSelector(state=>state.gameState.heldPiece)\n    let i = 0\n    let pieces = []\n    if (pieceQueue.isEmpty){\n        return <div className = {styles.pieceQueue}></div>\n    }\n\n    for (let pieceColor in pieceQueue.elements){\n        pieces.push(<PieceQueuePiece key = {i++} color = {pieceQueue.elements[pieceColor]}/>)\n    }\n    return <div className = {styles.pieceQueue}>{pieces}</div>\n}\n\nexport default PieceQueue;","import styles from \"./HeldBlock.module.css\";\n\nimport { TETRIMINOS } from \"./Tetrimino\";\nimport { useSelector } from \"react-redux\";\nimport Block from \"./Block\";\nimport { Fragment } from \"react\";\n\nconst HeldBlock = () => {\n   const gameState = useSelector((state) => state.gameState);\n   if (!gameState.heldPiece) {\n      return (\n         <div className={styles.heldBlockOuter}>\n            <div className={styles.title}>Held Piece</div>\n            <div className = {styles.gridRow}>\n               <Block />\n               <Block />\n               <Block />\n               <Block />\n            </div>\n            <div className = {styles.gridRow}>\n               <Block />\n               <Block />\n               <Block />\n               <Block />\n            </div>\n            <div className = {styles.gridRow}>\n               <Block />\n               <Block />\n               <Block />\n               <Block />\n            </div>\n         </div>\n      );\n   }\n\n   const convertToPiece = (row, yPos) => {\n      return (\n         <div style={{ display: \"flex\" }} key={yPos}>\n            {row.map((color, xPos) => {\n               if (color === 0) {\n                  return <Block key={xPos} color={null} />;\n               } else {\n                  return <Block color={gameState.heldPiece} key={xPos} />;\n               }\n            })}\n         </div>\n      );\n   };\n\n   let grid = TETRIMINOS[gameState.heldPiece][0].map(convertToPiece);\n   return (\n      <Fragment>\n         <div className={styles.heldBlockOuter}>\n            <div className={styles.title}>Held Piece</div>\n            <div className={styles.grid}>{grid}</div>\n         </div>\n      </Fragment>\n   );\n};\n\nexport default HeldBlock;\n","export let keyIsPressed = {};\nexport let keyIsShifted = {};\nexport let keyIsDisabled = {};\nexport let keyShiftCounter = {};\n\nconst KeyControls = () => {\n  window.addEventListener(\"keydown\", (event) => {\n    keyIsPressed[event.key] = true\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    if (event.key === \" \") {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    if (event.key === \"ArrowDown\") {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    if (event.key === \"ArrowUp\") {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  });\n  window.addEventListener(\"keyup\", (event) => {\n    keyShiftCounter[event.key] = 0\n    keyIsPressed[event.key] = false\n    keyIsDisabled[event.key] = false;\n  });\n\n  \n};\n\nexport default KeyControls;\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport styles from './StopWatch.module.css'\n\nconst StopWatch = () => {\n   const gameRunning = useSelector((state) => state.gameState.gameRunning);\n   const [miliseconds, setMiliseconds] = useState(0);\n   const [seconds, setSeconds] = useState(0);\n   const [minutes, setMinutes] = useState(0);\n\n   useEffect(() => {\n      let incrementInterval = null;\n      if (gameRunning) {\n        setMiliseconds(() => 0)\n        setSeconds(() => 0)\n        setMinutes(() => 0)\n         incrementInterval = setInterval(() => {\n            setMiliseconds((miliseconds) => miliseconds + 1);\n         }, 100);\n      }\n      return () => {\n         clearInterval(incrementInterval);\n      };\n   }, [gameRunning]);\n\n   if (miliseconds === 10) {\n      setSeconds(seconds + 1);\n      setMiliseconds(0);\n   }\n   if (seconds === 60) {\n      setMinutes(minutes + 1);\n      setSeconds(0);\n   }\n\n   if (minutes) {\n      return <div className={styles.stopWatch}>{`Time ${minutes}:${seconds}:${miliseconds}`}</div>;\n   } else if (seconds) {\n      return <div className={styles.stopWatch}>{`Time ${seconds}:${miliseconds}`}</div>;\n   } else if (miliseconds) {\n      return <div className={styles.stopWatch}>{`Time 0:${miliseconds}`}</div>;\n   }\n};\n\nexport default StopWatch;\n","import { Fragment, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { gameStateActions } from \"../../store/GameState\";\nimport Grid from \"./Grid\";\nimport PieceQueue from \"./PieceQueue\";\nimport HeldBlock from \"./HeldBlock\";\n\nimport { keyShiftCounter, keyIsPressed, keyIsDisabled } from \"../../modules/KeyControls\";\nimport KeyControls from \"../../modules/KeyControls\";\nimport HowToPlay from \"./HowToPlay\";\nimport StopWatch from \"./StopWatch\";\n\nlet gameLocked = false;\n\nconst Game = () => {\n   const dispatch = useDispatch();\n   const gameRunning = useSelector((state) => state.gameState.gameRunning);\n   const currentPieceState = useSelector((state) => state.gameState.currentPieceState);\n   const displayMessage = useSelector((state) => state.gameState.displayMessage);\n   const controls = useSelector((state) => state.controls);\n\n\n   const [startGame, setStartGame] = useState(false);\n\n   const gameLoop = () => {\n      if (gameRunning) {\n         if (currentPieceState === \"FROZEN\") {\n            dispatch(gameStateActions.clearLines());\n            dispatch(gameStateActions.checkIfGameWon());\n            dispatch(gameStateActions.getNewPiece());\n            dispatch(gameStateActions.getGhostCoords());\n            dispatch(gameStateActions.showGhostPiece());\n         } else {\n            dispatch(gameStateActions.dropPiece());\n            dispatch(gameStateActions.getGhostCoords());\n            dispatch(gameStateActions.showGhostPiece());\n         }\n      }\n   };\n   useEffect(() => {\n      const dropPieceInterval = window.setInterval(() => {\n         gameLoop();\n      }, 300);\n      const handleInputInterval = window.setInterval(() => {\n         keyHandler();\n      }, 1);\n      const shiftInputInterval = window.setInterval(() => {\n         keyShiftHandler();\n      }, 1);\n\n      return () => {\n         window.clearInterval(dropPieceInterval);\n         window.clearInterval(handleInputInterval);\n         window.clearInterval(shiftInputInterval);\n      };\n   });\n   useEffect(() => {\n      if (startGame) {\n         const interval = window.setInterval(() => {\n            dispatch(gameStateActions.gettingReady());\n         }, 500);\n         return () => {\n            window.clearInterval(interval);\n         };\n      }\n   }, [displayMessage, dispatch, startGame]);\n\n   const keyShiftHandler = () => {\n      if (!gameRunning || gameLocked) {\n         return;\n      }\n      for (let key in keyShiftCounter) {\n         if (keyShiftCounter[key]) {\n            keyShiftCounter[key] += 1;\n         }\n      }\n      if (\n         keyIsPressed[controls.softDrop] &&\n         keyIsDisabled[controls.softDrop] &&\n         keyShiftCounter[controls.softDrop] > 40\n      ) {\n         dispatch(gameStateActions.dropPiece());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.softDrop] = true;\n         keyShiftCounter[controls.softDrop] = 30;\n      }\n      if (\n         keyIsPressed[controls.moveRight] &&\n         keyIsDisabled[controls.moveRight] &&\n         keyShiftCounter[controls.moveRight] > 40\n      ) {\n         dispatch(gameStateActions.shiftRight());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.moveRight] = true;\n         keyShiftCounter[controls.moveRight] = 30;\n      }\n      if (\n         keyIsPressed[controls.moveLeft] &&\n         keyIsDisabled[controls.moveLeft] &&\n         keyShiftCounter[controls.moveLeft] > 40\n      ) {\n         dispatch(gameStateActions.shiftLeft());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.moveLeft] = true;\n         keyShiftCounter[controls.moveLeft] = 30;\n      }\n   };\n   const keyHandler = () => {\n      if (!gameRunning || gameLocked) {\n         return;\n      }\n      if (keyIsPressed[controls.rotateLeft] && !keyIsDisabled[controls.rotateLeft]) {\n         dispatch(gameStateActions.rotatePiece(true));\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.rotateLeft] = true;\n      }\n      if (keyIsPressed[controls.rotateRight] && !keyIsDisabled[controls.rotateRight]) {\n         dispatch(gameStateActions.rotatePiece(false));\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.rotateRight] = true;\n      }\n      if (keyIsPressed[controls.hardDrop] && !keyIsDisabled[controls.hardDrop]) {\n         gameLocked = true;\n         dispatch(gameStateActions.hardDrop());\n         keyIsDisabled[controls.hardDrop] = true;\n         setTimeout(() => {\n            gameLocked = false;\n         }, 350);\n      }\n      if (keyIsPressed[controls.hold] && !keyIsDisabled[controls.hold]) {\n         dispatch(gameStateActions.holdPiece());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.hold] = true;\n      }\n      if (keyIsPressed[controls.softDrop] && !keyIsDisabled[controls.softDrop]) {\n         keyShiftCounter[controls.softDrop] = 1;\n         dispatch(gameStateActions.dropPiece());\n         keyIsDisabled[controls.softDrop] = true;\n      }\n      if (keyIsPressed[controls.moveRight] && !keyIsDisabled[controls.moveRight]) {\n         keyShiftCounter[controls.moveRight] = 1;\n         dispatch(gameStateActions.shiftRight());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.moveRight] = true;\n      }\n      if (keyIsPressed[controls.moveLeft] && !keyIsDisabled[controls.moveLeft]) {\n         keyShiftCounter[controls.moveLeft] = 1;\n         dispatch(gameStateActions.shiftLeft());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.moveLeft] = true;\n      }\n   };\n   document.onkeydown = (keycode) => {\n      if (keycode.key === controls.newGame) {\n         setStartGame(true);\n         dispatch(gameStateActions.newGame());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n      }\n   };\n   return (\n      <Fragment>\n         <KeyControls />\n         <div\n            style={{\n               display: \"flex\",\n               flexWrap: \"nowrap\",\n               justifyContent: \"center\",\n            }}\n         >\n            <HeldBlock />\n            <Grid></Grid>\n            <PieceQueue />\n         </div>\n         <StopWatch></StopWatch>\n      </Fragment>\n   );\n};\n\nexport default Game;\n","import { useEffect } from \"react\";\nimport { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Game from \"../Components/GameUI/Game\";\n\nconst SinglePlayer = () => {\n\n   return (\n      <Fragment>\n         <h1>Ditris</h1>\n         <Game></Game>\n      </Fragment>\n   );\n};\n\nexport default SinglePlayer;\n","import { signInAnonymously, signOut } from \"firebase/auth\";\nimport { child, remove, set } from \"firebase/database\";\nimport { Fragment, memo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { auth, onlineUsersRef } from \"../../modules/firebase-config\";\nimport { myRoomRef } from \"../../store/GameState\";\nimport Modal from \"./Modal\";\n\nconst Login = () => {\n   const isLoggedIn = useSelector((state) => state.userInfo.isLoggedIn);\n   const [loggingIn, setLoggingIn] = useState(false);\n   const [usernameInput, setUsernameInput] = useState(\"\");\n   const [showError, setShowError] = useState(false);\n   const loginHandler = async (event) => {\n      event.preventDefault();\n      if (usernameInput.trim().length === 0) {\n         setShowError(true);\n      } else {\n         await signInAnonymously(auth);\n         set(child(onlineUsersRef, auth.currentUser.uid), {\n            username: usernameInput,\n            inRoom: false,\n         });\n         setUsernameInput(\"\");\n         setLoggingIn(false)\n         setShowError(false);\n      }\n   };\n\n   const logoutHandler = async () => {\n      remove(child(onlineUsersRef, auth.currentUser.uid));\n      if (myRoomRef) {\n         remove(myRoomRef);\n      }\n\n      signOut(auth);\n   };\n\n   const errorMessage = <p>Invalid Username</p>;\n\n   if (!isLoggedIn) {\n      return (\n         <Fragment>\n            <button onClick = {()=>{setLoggingIn(true)}}>Login</button>\n            {loggingIn && (\n               <Modal onClick = {()=>{setLoggingIn(false)}}>\n                  <form onSubmit={loginHandler}>\n                     <label id=\"name\">Username: </label>\n                     <input\n                        id=\"name\"\n                        value={usernameInput}\n                        onChange={(event) => {\n                           setUsernameInput(event.target.value);\n                        }}\n                     ></input>\n\n                     <button>Login</button>\n                     {showError && errorMessage}\n                  </form>\n               </Modal>\n            )}\n         </Fragment>\n      );\n   } else {\n      return <button onClick={logoutHandler}>Logout</button>;\n   }\n};\nexport default memo(Login);\n","import styles from \"./Card.module.css\";\n\nconst Card = (props) => {\n   if (props.children) {\n      return <div className={styles.card}>{props.children}</div>;\n   }\n};\n\nexport default Card;\n","import { child } from \"@firebase/database\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { onlineUsersRef } from \"../modules/firebase-config\";\n\nexport let opponentRef = null;\nconst userInfoInitialState = {\n   isLoggedIn: false,\n   roomStatus: null, //\"looking for room\" \"waiting\" \"in room\"\n\n   otherUsers: [], //other users that aren't you\n   roomKey: null, //key for the room you are in\n   opponentName: \"\", // name of your opponent, empty if not in room\n   opponentID: null, // id of your oppponent, null opponent hasn't been chosen\n   invitationKeys: [], // keys of rooms that you are invited to\n\n   grid: [], // grid of game from opponent\n\n   displayText:\"\"\n};\n\nconst userInfoSlice = createSlice({\n   name: \"UserInfo\",\n   initialState: userInfoInitialState,\n   reducers: {\n      reset(state) {\n         state.roomStatus = \"looking for room\";\n         state.otherUsers = [];\n         state.roomKey = null;\n         state.opponentName = \"\";\n         state.opponentID = null;\n         state.invitationKeys = [];\n         state.grid = [];\n         state.myName = \"\"\n         opponentRef = null;\n\n      },\n      login(state) {\n         state.isLoggedIn = true;\n      },\n      logout(state) {\n         state.isLoggedIn = false;\n      },\n      setOtherUsers(state, users) {\n         state.otherUsers = users.payload;\n      },\n      setRoomKey(state, key) {\n         state.roomKey = key.payload;\n      },\n      setRoomStatus(state, newStatus) {\n         state.roomStatus = newStatus.payload;\n      },\n      setOpponentName(state, opponentName) {\n\n         state.opponentName = opponentName.payload;\n      },\n      setOpponentid(state, id) {\n         if (id.payload) {\n            opponentRef = child(onlineUsersRef, id.payload);\n         }\n         state.opponentID = id.payload;\n      },\n      setInvitiationKeys(state, keysList) {\n         state.invitationKeys = keysList.payload;\n      },\n      setGrid(state, grid) {\n         state.grid = grid;\n      },\n      setDisplayText(state,text){\n         state.displayText = text.payload\n      }\n   },\n});\n\nexport const userInfoActions = userInfoSlice.actions;\n\nexport default userInfoSlice.reducer;\n","import { off, push, set } from \"firebase/database\";\nimport { useDispatch } from \"react-redux\";\nimport { auth,  roomsRef } from \"../../modules/firebase-config\";\nimport { userInfoActions } from \"../../store/UserInfo\";\n\nconst OtherUser = ({ username, uid }) => {\n   const dispatch = useDispatch();\n   const pushRoomsRef = push(roomsRef);\n   const createRoomHandler = async () => {\n      off(roomsRef)\n      await set(pushRoomsRef, { player1: auth.currentUser.uid, player2: uid, accepted: false });\n      dispatch(userInfoActions.setRoomStatus(\"waiting\"));\n      dispatch(userInfoActions.setRoomKey(pushRoomsRef.key));\n      dispatch(userInfoActions.setOpponentName(username));\n      dispatch(userInfoActions.setOpponentid(uid));\n   };\n   return (\n      <li>\n         <button onClick={createRoomHandler}>{username}</button>\n      </li>\n   );\n};\n\nexport default OtherUser;\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Card from \"../UI/Card\";\nimport OtherUser from \"./OtherUser\";\n\nconst OtherUsers = () => {\n   const otherUsersList = useSelector((state) => state.userInfo.otherUsers);\n   const otherUserListDisplay = otherUsersList\n      ? otherUsersList.map((pair, index) => (\n           <OtherUser key={index} username={pair[1].username} uid={pair[0]}></OtherUser>\n        ))\n      : null;\n   if (otherUserListDisplay) {\n      return (\n         <Card>\n            <div>Available Users</div>\n            {otherUserListDisplay}\n         </Card>\n      );\n   }\n};\nexport default memo(OtherUsers);\n","import {  memo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Modal from \"../UI/Modal\";\n\n\nconst WaitingMessage = ({ cancelRoomHandler }) => {\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n   const roomKey = useSelector((state) => state.userInfo.roomKey);\n\n   return (\n      <Modal>\n         Waiting for {opponentName} to join\n         <button onClick={cancelRoomHandler}>Cancel</button>\n      </Modal>\n   );\n};\n\nexport default memo(WaitingMessage);\n","import { child, off, set } from \"@firebase/database\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nimport { TETRIMINOS } from \"../Components/GameUI/Tetrimino\";\nimport { auth, getUsernameFromuid } from \"../modules/firebase-config\";\n\nimport Queue from \"../modules/piece-queue\";\n\nconst LINESTOCLEAR = 15\n\nlet pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\nconst getRandomPiece = () => {\n   if (pieceArray.length === 0) {\n      pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n   }\n   const value = Math.floor(pieceArray.length * Math.random());\n   return pieceArray.splice(value, 1);\n};\n\nconst getCoords = (type, rotatePos, xPos, yPos) =>\n   TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n      row.map((col, colPos) => {\n         if (col) {\n            return { x: xPos + colPos, y: yPos + rowPos };\n         }\n         return null;\n      })\n   );\nconst rotatePiece = (isCounterClockwise, state) => {\n   let { rotatePos } = state;\n   if (isCounterClockwise) {\n      if (rotatePos === 0) {\n         return 3;\n      } else {\n         return rotatePos - 1;\n      }\n   } else {\n      if (rotatePos === 3) {\n         return 0;\n      } else {\n         return rotatePos + 1;\n      }\n   }\n};\n\nconst convertMappingToCoords = (state, mapping, forGhost = false) => {\n   let coordArray = [];\n   for (const array of mapping) {\n      for (const coord of array) {\n         if (coord) {\n            if (coordIsValid(state, coord, forGhost)) {\n               coordArray.push(coord);\n            }\n         }\n      }\n   }\n   return coordArray;\n};\n\n\nconst gameStateInitialState = {\n   playerNumber: null,\n\n   gameRunning: false,\n   myCurrentShape: null,\n   myCurrentCoords: [],\n   myGhostCoords: [],\n   myPieceQueue: null,\n   myHeldPiece: null,\n   myLinesCleared: 0,\n\n   opponentPieceQueue: [],\n   opponentHeldPiece: null,\n   opponentLinesCleared: 0,\n\n   currentGameStatus: \"NONE\",\n   rotatePos: 0,\n   xPos: 3,\n   yPos: 0,\n\n   grid: [\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n   ],\n\n   rotated: false,\n   displayMessage: \"\",\n\n   myTurn: null,\n   linesToClear:LINESTOCLEAR,\n   lineDeduction:2,\n   keepTurn: 0,\n   keepTurn2:false,\n\n   turnTaken : false\n};\n\nexport let myRoomRef = null;\n\nexport let pieceQueue = new Queue();\n\nconst removeLastState = (state) => {\n   for (const coord of state.myCurrentCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst removeLastGhostPiece = (state) => {\n   for (const coord of state.myGhostCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst placeBlocks = (state, forGhost = false) => {\n   let copiedGrid = state.grid.map(nested=>nested.slice())\n   if (forGhost) {\n      const colorName = state.myCurrentShape + \"ghost\";\n      for (const coord of state.myGhostCoords) {\n         copiedGrid[coord.y][coord.x] = colorName;\n         for (const currentCoord of state.myCurrentCoords) {\n            if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n               copiedGrid[coord.y][coord.x] = state.myCurrentShape;\n            }\n         }\n      }\n   } else {\n      for (const coord of state.myCurrentCoords) {\n         copiedGrid[coord.y][coord.x] = state.myCurrentShape;\n      }\n   }\n   state.grid = copiedGrid\n};\n\nconst coordIsValid = (state, coord, forGhost = false) => {\n   if (coord) {\n      if (coord.y <= 20 && coord.x >= 0 && coord.x <= 9) {\n         for (let currentCoord of state.myCurrentCoords) {\n            if (forGhost) {\n               if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n                  return true;\n               }\n            }\n         }\n         if (state.grid[coord.y][coord.x].length > 1) {\n            return true;\n         }\n      }\n   }\n   return false;\n};\n\nconst gameStateSlice2 = createSlice({\n   name: \"gameState2\",\n   initialState: gameStateInitialState,\n   reducers: {\n      reset(state) {\n         state.playerNumber = null;\n\n         state.gameRunning = false;\n         state.myCurrentShape = null;\n         state.myCurrentCoords = [];\n         state.myGhostCoords = [];\n         state.myPieceQueue = null;\n         state.myHeldPiece = null;\n         state.myLinesCleared = 0;\n\n         state.opponentPieceQueue = [];\n         state.opponentHeldPiece = null;\n         state.opponentLinesCleared = 0;\n\n         state.currentGameStatus = \"NONE\";\n         state.rotatePos = 0;\n         state.xPos = 3;\n         state.yPos = 0;\n\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n\n         state.rotated = false;\n         state.displayMessage = \"\";\n\n         state.keepTurn = 0\n         state.keepTurn2=false;\n         state.myTurn = null;\n         state.linesToClear =LINESTOCLEAR;\n         state.lineDeduction = Math.floor(LINESTOCLEAR/5)\n         myRoomRef = null;\n         pieceQueue = new Queue()\n\n         state.turnTaken = false\n      },\n      setGrid(state, grid) {\n         state.grid = grid.payload;\n      },\n      gettingReady(state) {\n         state.myCurrentShape = null;\n         state.myCurrentCoords = [];\n         state.myGhostCoords = [];\n         state.myPieceQueue = null;\n         state.myHeldPiece = null;\n         state.myLinesCleared = 0;\n         state.currentGameStatus = \"NONE\";\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n\n      },\n      newGame(state) {\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n\n         pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n         pieceQueue = new Queue();\n         for (let i = 0; i < 5; i++) {\n            pieceQueue.enqueue(...getRandomPiece());\n         }\n\n      },\n      setOpponentInfo(state, action) {\n         state.opponentPieceQueue = action.payload.opponentPieceQueue;\n         state.opponentLinesCleared = action.payload.opponentLinesCleared;\n      },\n      clearLines(state) {\n         let newGrid = [];\n         let linesCleared = 0;\n         for (const row of state.grid) {\n            if (row.every((blockType) => blockType !== \"None\")) {\n               state.myLinesCleared += 1;\n               linesCleared += 1;\n            } else {\n               newGrid.push(row);\n            }\n         }\n         for (let i = 0; i < linesCleared; i++) {\n            newGrid.unshift([\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n            ]);\n         }\n         state.grid = newGrid;\n         set(child(myRoomRef, \"grid\"), state.grid);\n         if (linesCleared>0){\n            state.keepTurn = state.keepTurn+1\n            // console.log(state.keepTurn)\n            state.keepTurn2 = true\n         }\n         else{\n            state.keepTurn2 = false\n         }\n         // off(child(myRoomRef, `player${state.playerNumber}GameInfo/linesCleared`))\n      },\n      unfreeze(state) {\n         state.currentGameStatus = \"FALLING\";\n      },\n      getNewPiece(state, opponentName) {\n         state.myGhostCoords = [];\n         state.myCurrentShape = pieceQueue.dequeue();\n         pieceQueue.enqueue(...getRandomPiece());\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.grid = [\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            ];\n            state.myCurrentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n            off(child(myRoomRef, `player${state.playerNumber === 1 ? 2 : 1}GameInfo`));\n            set(\n               child(myRoomRef, `player${state.playerNumber === 1 ? 2 : 1}GameInfo/linesCleared`),\n               state.opponentLinesCleared - state.lineDeduction\n            );\n            off(child(myRoomRef, \"displayMessage\"));\n            state.displayMessage = `${opponentName.payload} CAUSED OVERFLOW`;\n            set(child(myRoomRef, \"displayMessage\"), `${opponentName.payload} CAUSED OVERFLOW`);\n            setTimeout(() => {\n               set(child(myRoomRef, \"displayMessage\"), \"in game\");\n            }, 1000);\n\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         }\n         placeBlocks(state);\n         // set(\n         //    child(myRoomRef, `player${state.playerNumber}GameInfo/gameQueue`),\n         //    pieceQueue.elements\n         // );\n\n         state.currentGameStatus = \"FALLING\";\n      },\n      rotatePiece(state, action) {\n         const originalRotatePos = state.rotatePos;\n         state.rotatePos = rotatePiece(action.payload, {\n            rotatePos: state.rotatePos,\n         });\n         removeLastState(state);\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.rotatePos = originalRotatePos;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      dropPiece(state) {\n         if (state.gameRunning) {\n            if (state.currentGameStatus === \"LANDING\") {\n               state.currentGameStatus = \"FROZEN\";\n               return;\n            }\n            removeLastState(state);\n            state.yPos += 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n            if (state.myCurrentCoords.length < 4) {\n               state.yPos -= 1;\n               state.myCurrentCoords = convertMappingToCoords(\n                  state,\n                  getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n               );\n               state.currentGameStatus = \"LANDING\";\n            } else {\n               state.currentGameStatus = \"FALLING\";\n            }\n            placeBlocks(state);\n         } else {\n         }\n      },\n      getGhostCoords(state) {\n         removeLastGhostPiece(state);\n         state.myGhostCoords = [];\n         for (let coord of state.myCurrentCoords) {\n            state.myGhostCoords.push({ x: coord.x, y: coord.y });\n         }\n         let ghostYPos = state.yPos;\n         while (state.myGhostCoords.length === 4) {\n            ghostYPos += 1;\n            state.myGhostCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, ghostYPos),\n               true\n            );\n         }\n         ghostYPos -= 1;\n         state.myGhostCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, ghostYPos),\n            true\n         );\n      },\n      hardDrop(state) {\n         removeLastState(state);\n         state.myCurrentCoords = state.myGhostCoords;\n         placeBlocks(state);\n         state.currentGameStatus = \"FROZEN\";\n      },\n      showGhostPiece(state) {\n         placeBlocks(state, true);\n      },\n      shiftLeft(state) {\n         removeLastState(state);\n         state.xPos -= 1;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.xPos += 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      shiftRight(state) {\n         removeLastState(state);\n         state.xPos += 1;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.xPos -= 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      placeCurrentPiece(state){\n         placeBlocks(state)\n      },\n\n      gameWon(state){\n         state.gameRunning = false;\n      },\n      holdPiece(state) {\n         if (state.rotated === true) {\n            return;\n         }\n         state.rotated = true;\n\n         removeLastState(state);\n         if (state.heldPiece === null) {\n            state.heldPiece = state.currentShape;\n            state.currentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n         } else {\n            const placeHolder = state.currentShape;\n            state.currentShape = state.heldPiece;\n            state.heldPiece = placeHolder;\n         }\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         placeBlocks(state);\n         state.currentPieceState = \"FALLING\";\n      },\n      setMultiplayer(state, action) {\n         state.playerNumber = action.payload.playerNumber;\n         myRoomRef = action.payload.roomRef;\n      },\n      setDisplayMessage(state, displayMessage) {\n         state.displayMessage = displayMessage.payload;\n         if (state.displayMessage === \"in game\") {\n            state.gameRunning = true;\n         }\n         if (state.displayMessage.includes(\"WON\")) {\n            state.gameRunning = false;\n         }\n      },\n      setMyTurn(state, bool) {\n         // state.keepTurn = 0\n         state.myTurn = bool.payload;\n      },\n      setMyLinesCleared(state, lines) {\n         state.myLinesCleared = lines.payload;\n      },\n      setLinesToClear(state,lines){\n         state.linesToClear = lines.payload\n         state.lineDeduction = Math.floor(lines.payload/5)\n      },\n      setTurnTaken(state,bool){\n         state.turnTaken = bool.payload\n      },\n   },\n});\n\n\nexport const gameStateActions2 = gameStateSlice2.actions;\n\nexport default gameStateSlice2.reducer;\n","import { child, set } from \"@firebase/database\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n   auth,\n   getUsernameFromuid,\n   onlineUsersRef,\n   roomsRef,\n} from \"../../modules/firebase-config\";\nimport { gameStateActions2 } from \"../../store/GameState2\";\nimport { userInfoActions } from \"../../store/UserInfo\";\n\nconst InviteNotfication = ({ roomKey, opponentuid }) => {\n   const dispatch = useDispatch();\n   const [opponentName, setOpponentName] = useState(null);\n   const getOpponentName = async () => {\n      setOpponentName(await getUsernameFromuid(opponentuid));\n   };\n\n   const acceptInvite = async () => {\n      await set(child(roomsRef, roomKey + \"/accepted\"), true);\n      await set(child(roomsRef, roomKey + \"/displayMessage\"), \"\");\n      dispatch(userInfoActions.setOpponentid(opponentuid));\n      dispatch(userInfoActions.setRoomStatus(\"in room\"));\n      dispatch(userInfoActions.setRoomKey(roomKey));\n      dispatch(userInfoActions.setOpponentName(opponentName));\n      dispatch(\n         gameStateActions2.setMultiplayer({ playerNumber: 2, roomRef: child(roomsRef, roomKey) })\n      );\n      await set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), true);\n   };\n\n   getOpponentName();\n   return (\n      <div>\n         {opponentName}\n         <button onClick={acceptInvite}>ACCEPT</button>\n         <button onClick={acceptInvite}>DECLINE</button>\n      </div>\n   );\n};\n\nexport default InviteNotfication;\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Card from \"../UI/Card\";\nimport InviteNotfication from \"./InviteNotifcation\";\n\nconst InviteNotifications = () => {\n   let invitations = useSelector((state) => state.userInfo.invitationKeys);\n   if (invitations.length!==0) {\n      invitations = invitations.map(({ roomKey, opponentuid }, index) => (\n         <InviteNotfication\n            key={index}\n            roomKey={roomKey}\n            opponentuid={opponentuid}\n         ></InviteNotfication>\n      ));\n   }\n   return <Card>\n      <p style = {{margin:0}}>Room Invitations</p>{invitations}</Card>;\n};\n\nexport default memo(InviteNotifications);\n","import styles from \"./Block.module.css\";\n\nconst Block = (props) => {\n  const color = props.color;\n  return <div className={`${styles.block}  ${styles[color]}`}></div>;\n};\n\nexport default Block;\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport styles from \"./ReadyGo.module.css\";\n\nconst ReadyGo = () => {\n   const displayMessage = useSelector((state) => state.gameState2.displayMessage);\n   if (displayMessage === \"in game\") {\n      return <div className={styles.readyGo}></div>;\n   } else {\n      return <div className={styles.readyGo}>{displayMessage}</div>;\n   }\n};\n\nexport default memo(ReadyGo);\n","import { useSelector, useDispatch } from \"react-redux\";\n\nimport styles from \"./Grid.module.css\";\nimport Block from \"./Block\";\nimport ReadyGo from \"./ReadyGo\";\n\nconst Grid = () => {\n   const gameState = useSelector((state) => state.gameState2);\n\n   const grid = gameState.grid.slice(1).map((row, y_pos) => {\n      return (\n         <div style = {{display:\"flex\"}} key={y_pos}>\n            {row.map((color, x_pos) => {\n               return <Block color={color} key={x_pos} />;\n            })}\n         </div>\n      );\n   });\n\n   return (\n      <div className={styles.grid}>\n         {grid}\n         <ReadyGo></ReadyGo>\n      </div>\n   );\n};\n\nexport default Grid;\n","export const TETRIMINOS = {\n  I: [\n    //I\n    [\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  ],\n\n  T: [\n    //T\n    [\n      [0, 1, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  L: [\n    //L\n    [\n      [0, 0, 1],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  J: [\n    //J\n    [\n      [1, 0, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  ],\n  Z: [\n    //Z\n    [\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  ],\n  S: [\n    //S\n    [\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  O: [\n    //O\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n  ],\n};\n\nexport const getRandomPiece = () => {\n  const value = Math.round(6 * Math.random());\n  switch (value) {\n    case 0:\n      return \"I\";\n    case 1:\n      return \"T\";\n    case 2:\n      return \"L\";\n    case 3:\n      return \"J\";\n    case 4:\n      return \"Z\";\n    case 5:\n      return \"S\";\n    case 6:\n      return \"O\";\n  }\n};\n\nexport const getPiece = (type, rotatePos, xPos, yPos) =>\n  TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n    row.map((col, colPos) => {\n      if (col) {\n        return { x: xPos + colPos, y: yPos + rowPos };\n      }\n      return null;\n    })\n  );\n\nexport const rotatePiece = (isCounterClockwise, { type, rotatePos }) => {\n  return isCounterClockwise\n    ? rotatePos === 0\n      ? TETRIMINOS[type].length - 1\n      : rotatePos - 1\n    : rotatePos === TETRIMINOS[type].length - 1\n    ? 0\n    : rotatePos + 1;\n};\n\nexport const convertMappingToCoords = (mapping) => {\n  let coordArray = [];\n  for (const array of mapping) {\n    for (const coord of array) {\n      if (coord) {\n        coordArray.push(coord);\n      }\n    }\n  }\n  return coordArray;\n};\n","import Block from \"./Block\";\nimport { TETRIMINOS } from \"./Tetrimino\";\n\nimport styles from \"./PieceQueue.module.css\";\n\nconst PieceQueuePiece = (props) => {\n   const convertToPiece = (row, yPos) => {\n      return (\n         <div className={styles.pieceRow} key={yPos}>\n            {row.map((color, xPos) => {\n               if (color === 0) {\n                  return <Block key={xPos} color={null} />;\n               } else {\n                  return <Block color={props.color} key={xPos} />;\n               }\n            })}\n         </div>\n      );\n   };\n   let grid = TETRIMINOS[props.color][0].map(convertToPiece);\n\n   return <div className={styles.piece}>{grid}</div>;\n};\n\nexport default PieceQueuePiece;\n","import PieceQueuePiece from \"./PieceQueuePiece\";\nimport styles from \"./PieceQueue.module.css\";\nimport { pieceQueue } from \"../../../store/GameState2\";\nimport { useSelector } from \"react-redux\";\nimport { Fragment, memo } from \"react\";\n\nconst PieceQueue = ({ player }) => {\n   const opponentPieces = useSelector((state) => state.gameState2.opponentPieceQueue);\n   const queueChanged = useSelector((state) => state.gameState2.myTurn);\n   let i = 0;\n   let pieces = [];\n   if (player === \"mine\") {\n      if (pieceQueue.isEmpty) {\n         return <div className={styles.pieceQueue}></div>;\n      }\n\n      for (let pieceColor in pieceQueue.elements) {\n         pieces.push(<PieceQueuePiece key={i++} color={pieceQueue.elements[pieceColor]} />);\n      }\n      return (\n         <Fragment>\n            <div className={styles.pieceQueue}>{pieces}</div>\n         </Fragment>\n      );\n   } else if (player === \"opponent\") {\n      if (!opponentPieces || opponentPieces.isEmpty) {\n         return <div className={styles.pieceQueue}></div>;\n      }\n      for (let pieceColor in opponentPieces) {\n         if (!pieceColor) {\n            continue;\n         }\n         pieces.push(<PieceQueuePiece key={i++} color={opponentPieces[pieceColor]} />);\n      }\n      return (\n         <Fragment>\n            <div className={styles.pieceQueue}>\n               {pieces}\n            </div>\n         </Fragment>\n      );\n   }\n};\n\nexport default PieceQueue;\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport styles from \"./LineClearedCounter.module.css\"\n\nconst LineClearedCounter = ({ player }) => {\n   const opponentCounter = useSelector((state) => state.gameState2.opponentLinesCleared);\n   const myCounter = useSelector((state) => state.gameState2.myLinesCleared);\n   if (player === \"opponent\") {\n      return <div className = {styles.counterOpponent}>{opponentCounter}</div>;\n   }\n   if (player === \"mine\") {\n      return <div className = {styles.counterMyself}>{myCounter}</div>;\n   }\n};\n\nexport default memo(LineClearedCounter);\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst WhoseTurnText = () => {\n   const gameRunning = useSelector((state) => state.gameState2.gameRunning);\n   const myTurn = useSelector((state) => state.gameState2.myTurn);\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n   if (!gameRunning) {\n      return <div style={{ textAlign: \"center\",height:\"24px\"}}> </div>;;\n   } else if (myTurn) {\n      return <div style={{ textAlign: \"center\" }}>{`Your Turn`}</div>;\n   } else {\n      return <div style={{ textAlign: \"center\" }}>{`${opponentName}'s Turn`}</div>;\n   }\n};\nexport default memo(WhoseTurnText);\n","import { child, off, onValue, set } from \"@firebase/database\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { gameStateActions2, myRoomRef } from \"../../../store/GameState2\";\nimport Card from \"../../UI/Card\";\n\nconst InputForm = () => {\n   const dispatch = useDispatch();\n   const linesToClear = useSelector((state) => state.gameState2.linesToClear);\n   const [linesToClearInput, setLinesToClearInput] = useState(linesToClear);\n\n   const setLinesToClearInputChange = (event) => {\n      if (event.target.value <= 0) {\n         return;\n      } else {\n         setLinesToClearInput(+event.target.value);\n      }\n   };\n   const setLinesToClearHandler = () => {\n      off(child(myRoomRef, \"linesToClear\"));\n      dispatch(gameStateActions2.setLinesToClear(linesToClearInput));\n      set(child(myRoomRef, \"linesToClear\"), linesToClearInput);\n   };\n\n   onValue(child(myRoomRef, \"linesToClear\"), (snapshot) => {\n      if (snapshot.exists()) {\n         // setLinesToClearInput(snapshot.val())\n         dispatch(gameStateActions2.setLinesToClear(snapshot.val()));\n      }\n   });\n\n   return (\n      <Card>\n         <label id=\"lines\">Lines to Clear </label>\n         <input\n            id=\"lines\"\n            type=\"number\"\n            value={linesToClearInput}\n            onChange={setLinesToClearInputChange}\n         ></input>\n         <button onClick={setLinesToClearHandler}>set</button>\n         <span> Current amount is {linesToClear}</span>\n      </Card>\n   );\n};\n\nexport default InputForm;\n","import { child, off, set } from \"@firebase/database\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { keyIsDisabled, keyIsPressed, keyShiftCounter } from \"../../modules/KeyControls\";\nimport { gameStateActions2, myRoomRef, pieceQueue } from \"../../store/GameState2\";\n\nlet controlsLocked = false;\n\nconst InnerGame = () => {\n   const dispatch = useDispatch();\n\n   const controls = useSelector((state) => state.controls);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n\n   const myTurn = useSelector((state) => state.gameState2.myTurn);\n   const displayMessage = useSelector((state) => state.gameState2.displayMessage);\n   const gameRunning = useSelector((state) => state.gameState2.gameRunning);\n   const currentGameStatus = useSelector((state) => state.gameState2.currentGameStatus);\n   const keepTurn = useSelector((state) => state.gameState2.keepTurn);\n   const grid = useSelector((state) => state.gameState2.grid);\n   useEffect(() => {\n      if ((gameRunning && myTurn)) {\n\n         \n         off(child(myRoomRef, \"grid\"));\n         console.log('here')\n         dispatch(gameStateActions2.getNewPiece(opponentName));\n         set(child(myRoomRef, `player${playerNumber}GameInfo/gameQueue`), pieceQueue.elements);\n         dispatch(gameStateActions2.placeCurrentPiece());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         const dropPieceInterval = setInterval(() => {\n            gameLoop();\n         }, 300);\n         const handleInputInterval = setInterval(() => {\n            keyHandler();\n         }, 1);\n         const shiftInputInterval = setInterval(() => {\n            keyShiftHandler();\n         }, 1);\n         return () => {\n            clearInterval(dropPieceInterval);\n            clearInterval(handleInputInterval);\n            clearInterval(shiftInputInterval);\n         };\n      }\n   }, [myTurn, gameRunning, dispatch,keepTurn]);\n\n   const keyShiftHandler = async () => {\n      for (let key in keyShiftCounter) {\n         if (keyShiftCounter[key]) {\n            keyShiftCounter[key] += 1;\n         }\n      }\n      if (\n         keyIsPressed[controls[\"softDrop\"]] &&\n         keyIsDisabled[controls[\"softDrop\"]] &&\n         keyShiftCounter[controls[\"softDrop\"]] > 40\n      ) {\n         dispatch(gameStateActions2.dropPiece());\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n         keyShiftCounter[controls[\"softDrop\"]] = 30;\n      }\n      if (\n         keyIsPressed[controls[\"moveRight\"]] &&\n         keyIsDisabled[controls[\"moveRight\"]] &&\n         keyShiftCounter[controls[\"moveRight\"]] > 40\n      ) {\n         dispatch(gameStateActions2.shiftRight());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n         keyShiftCounter[controls[\"moveRight\"]] = 30;\n      }\n      if (\n         keyIsPressed[controls[\"moveLeft\"]] &&\n         keyIsDisabled[controls[\"moveLeft\"]] &&\n         keyShiftCounter[controls[\"moveLeft\"]] > 40\n      ) {\n         dispatch(gameStateActions2.shiftLeft());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n         keyShiftCounter[controls[\"moveLeft\"]] = 30;\n      }\n   };\n   const keyHandler = async () => {\n      if (!gameRunning || controlsLocked) {\n         return;\n      }\n      if (keyIsPressed[controls[\"rotateLeft\"]] && !keyIsDisabled[controls[\"rotateLeft\"]]) {\n         dispatch(gameStateActions2.rotatePiece(true));\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"rotateLeft\"]] = true;\n      }\n      if (keyIsPressed[controls[\"rotateRight\"]] && !keyIsDisabled[controls[\"rotateRight\"]]) {\n         dispatch(gameStateActions2.rotatePiece(false));\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"rotateRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"hardDrop\"]] && !keyIsDisabled[controls[\"hardDrop\"]]) {\n         controlsLocked = true;\n         dispatch(gameStateActions2.hardDrop());\n         keyIsDisabled[controls[\"hardDrop\"]] = true;\n         // dispatch(gameStateActions2.setTurnTaken(true));\n         setTimeout(() => {\n            controlsLocked = false;\n         }, 400);\n      }\n      if (keyIsPressed[controls[\"softDrop\"]] && !keyIsDisabled[controls[\"softDrop\"]]) {\n         keyShiftCounter[controls[\"softDrop\"]] = 1;\n         dispatch(gameStateActions2.dropPiece());\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveRight\"]] && !keyIsDisabled[controls[\"moveRight\"]]) {\n         keyShiftCounter[controls[\"moveRight\"]] = 1;\n         dispatch(gameStateActions2.shiftRight());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveLeft\"]] && !keyIsDisabled[controls[\"moveLeft\"]]) {\n         keyShiftCounter[controls[\"moveLeft\"]] = 1;\n         dispatch(gameStateActions2.shiftLeft());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n      }\n   };\n   const gameLoop = async () => {\n      dispatch(gameStateActions2.dropPiece());\n      dispatch(gameStateActions2.getGhostCoords());\n      dispatch(gameStateActions2.showGhostPiece());\n   };\n   useEffect(() => {\n      if (myTurn) {\n         // off(child(myRoomRef, \"grid\"))\n         set(child(myRoomRef, \"grid\"), grid);\n      }\n   }, [grid, myTurn]);\n\n   return;\n};\nexport default InnerGame;\n","import { Fragment, memo, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { gameStateActions2, myRoomRef, grid, pieceQueue } from \"../../store/GameState2\";\nimport { child, off, onDisconnect, onValue, set } from \"@firebase/database\";\nimport { auth, getUsernameFromuid, onlineUsersRef } from \"../../modules/firebase-config\";\n\nimport Grid from \"./Components/Grid\";\nimport PieceQueue from \"./Components/PieceQueue\";\nimport LineClearedCounter from \"./Components/LineClearedCounter\";\nimport WhoseTurnText from \"./Components/WhoseTurnText\";\nimport InputForm from \"./Components/InputForm\";\nimport InnerGame from \"./InnerGame\";\nimport Card from \"../UI/Card\";\n\nimport KeyControls, {\n   keyIsDisabled,\n   keyIsPressed,\n   keyShiftCounter,\n} from \"../../modules/KeyControls\";\n\nlet startButtonLocked = false;\n\nconst GameShared = () => {\n   const dispatch = useDispatch();\n\n   const controls = useSelector((state) => state.controls);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n\n   const myTurn = useSelector((state) => state.gameState2.myTurn);\n   const displayMessage = useSelector((state) => state.gameState2.displayMessage);\n   const gameRunning = useSelector((state) => state.gameState2.gameRunning);\n   const currentGameStatus = useSelector((state) => state.gameState2.currentGameStatus);\n   const myLinesCleared = useSelector((state) => state.gameState2.myLinesCleared);\n   const linesToClear = useSelector((state) => state.gameState2.linesToClear);\n   const turnTaken = useSelector((state) => state.gameState2.turnTaken);\n   const keepTurn2 = useSelector((state) => state.gameState2.keepTurn2);\n\n   if (!displayMessage) {\n      startButtonLocked = false;\n   }\n\n   if (displayMessage.includes(\"WON\")) {\n      setTimeout(() => {\n         startButtonLocked = false;\n      }, 1000);\n   }\n\n   if (currentGameStatus === \"FROZEN\") {\n      dispatch(gameStateActions2.unfreeze());\n      dispatch(gameStateActions2.clearLines());\n      dispatch(gameStateActions2.setTurnTaken(true));\n   }\n\n   useEffect(() => {\n      if (turnTaken) {\n         if (myLinesCleared >= linesToClear) {\n            set(child(myRoomRef, \"turn\"), null);\n            getUsernameFromuid(auth.currentUser.uid).then((name) => {\n               set(child(myRoomRef, \"displayMessage\"), `${name} WON`);\n            });\n            dispatch(gameStateActions2.gameWon());\n         } else if (keepTurn2) {\n            // console.log('keep turn')\n         } else {\n            // console.log('other turn')\n            set(child(myRoomRef, \"turn\"), playerNumber === 1 ? 2 : 1);\n         }\n      }\n      dispatch(gameStateActions2.setTurnTaken(false));\n   }, [myLinesCleared, linesToClear, dispatch, turnTaken, keepTurn2]);\n\n   useEffect(() => {\n      if (gameRunning) {\n         off(child(myRoomRef, `player${playerNumber === 1 ? 2 : 1}GameInfo`));\n         dispatch(gameStateActions2.newGame());\n         set(child(myRoomRef, `player${playerNumber}GameInfo`), {\n            gameQueue: pieceQueue.elements,\n            linesCleared: myLinesCleared,\n         });\n\n         return () => {};\n      }\n   }, [gameRunning]);\n\n   useEffect(() => {\n      set(child(myRoomRef, `player${playerNumber}GameInfo`), {\n         gameQueue: pieceQueue.elements,\n         linesCleared: myLinesCleared,\n      });\n   }, [myLinesCleared, pieceQueue.elements]);\n\n   // useEffect(() => {\n   //    if (gameRunning && myTurn) {\n   //       off(child(myRoomRef, \"grid\"));\n   //       dispatch(gameStateActions2.getNewPiece(opponentName));\n   //       dispatch(gameStateActions2.placeCurrentPiece(opponentName));\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       const dropPieceInterval = setInterval(() => {\n   //          gameLoop();\n   //       }, 300);\n   //       const handleInputInterval = setInterval(() => {\n   //          keyHandler();\n   //       }, 1);\n   //       const shiftInputInterval = setInterval(() => {\n   //          keyShiftHandler();\n   //       }, 1);\n   //       return () => {\n   //          clearInterval(dropPieceInterval);\n   //          clearInterval(handleInputInterval);\n   //          clearInterval(shiftInputInterval);\n   //       };\n   //    }\n   // }, [myTurn, gameRunning]);\n\n   // const keyShiftHandler = () => {\n   //    for (let key in keyShiftCounter) {\n   //       if (keyShiftCounter[key]) {\n   //          keyShiftCounter[key] += 1;\n   //       }\n   //    }\n   //    if (\n   //       keyIsPressed[controls[\"softDrop\"]] &&\n   //       keyIsDisabled[controls[\"softDrop\"]] &&\n   //       keyShiftCounter[controls[\"softDrop\"]] > 40\n   //    ) {\n   //       console.log(dispatch(gameStateActions2.dropPiece()));\n   //       keyIsDisabled[controls[\"softDrop\"]] = true;\n   //       keyShiftCounter[controls[\"softDrop\"]] = 30;\n   //    }\n   //    if (\n   //       keyIsPressed[controls[\"moveRight\"]] &&\n   //       keyIsDisabled[controls[\"moveRight\"]] &&\n   //       keyShiftCounter[controls[\"moveRight\"]] > 40\n   //    ) {\n   //       dispatch(gameStateActions2.shiftRight());\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"moveRight\"]] = true;\n   //       keyShiftCounter[controls[\"moveRight\"]] = 30;\n   //    }\n   //    if (\n   //       keyIsPressed[controls[\"moveLeft\"]] &&\n   //       keyIsDisabled[controls[\"moveLeft\"]] &&\n   //       keyShiftCounter[controls[\"moveLeft\"]] > 40\n   //    ) {\n   //       dispatch(gameStateActions2.shiftLeft());\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"moveLeft\"]] = true;\n   //       keyShiftCounter[controls[\"moveLeft\"]] = 30;\n   //    }\n   // };\n   // const keyHandler = async () => {\n   //    if (!gameRunning || controlsLocked) {\n   //       return;\n   //    }\n   //    if (keyIsPressed[controls[\"rotateLeft\"]] && !keyIsDisabled[controls[\"rotateLeft\"]]) {\n   //       dispatch(gameStateActions2.rotatePiece(true));\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"rotateLeft\"]] = true;\n   //    }\n   //    if (keyIsPressed[controls[\"rotateRight\"]] && !keyIsDisabled[controls[\"rotateRight\"]]) {\n   //       dispatch(gameStateActions2.rotatePiece(false));\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"rotateRight\"]] = true;\n   //    }\n   //    if (keyIsPressed[controls[\"hardDrop\"]] && !keyIsDisabled[controls[\"hardDrop\"]]) {\n   //       controlsLocked = true;\n   //       dispatch(gameStateActions2.hardDrop());\n   //       dispatch(gameStateActions2.clearLines());\n   //       dispatch(gameStateActions2.checkIfGameWon());\n   //       await set(child(myRoomRef, \"turn\"), playerNumber === 1 ? 2 : 1);\n   //       keyIsDisabled[controls[\"hardDrop\"]] = true;\n   //       setTimeout(() => {\n   //          controlsLocked = false;\n   //       }, 400);\n   //    }\n   //    if (keyIsPressed[controls[\"softDrop\"]] && !keyIsDisabled[controls[\"softDrop\"]]) {\n   //       keyShiftCounter[controls[\"softDrop\"]] = 1;\n   //       dispatch(gameStateActions2.dropPiece());\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"softDrop\"]] = true;\n   //    }\n   //    if (keyIsPressed[controls[\"moveRight\"]] && !keyIsDisabled[controls[\"moveRight\"]]) {\n   //       keyShiftCounter[controls[\"moveRight\"]] = 1;\n   //       dispatch(gameStateActions2.shiftRight());\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"moveRight\"]] = true;\n   //    }\n   //    if (keyIsPressed[controls[\"moveLeft\"]] && !keyIsDisabled[controls[\"moveLeft\"]]) {\n   //       keyShiftCounter[controls[\"moveLeft\"]] = 1;\n   //       dispatch(gameStateActions2.shiftLeft());\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"moveLeft\"]] = true;\n   //    }\n   // };\n   // const gameLoop = async () => {\n   //    dispatch(gameStateActions2.dropPiece());\n   //    dispatch(gameStateActions2.getGhostCoords());\n   //    dispatch(gameStateActions2.showGhostPiece());\n   // };\n\n   const beginGame = async () => {\n      set(child(myRoomRef, \"displayMessage\"), \"READY\");\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      set(child(myRoomRef, \"displayMessage\"), \"GO\");\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      await set(child(myRoomRef, \"displayMessage\"), \"in game\");\n      await set(child(myRoomRef, \"grid\"), [\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      ]);\n      await set(child(myRoomRef, \"/turn\"), playerNumber === 1 ? 2 : 1);\n   };\n\n   onDisconnect(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\")).set(false);\n   useEffect(() => {\n      onValue(child(myRoomRef, \"displayMessage\"), (snapshot) => {\n         if (snapshot.exists()) {\n            dispatch(gameStateActions2.setDisplayMessage(snapshot.val()));\n            if (snapshot.val() === \"READY\") {\n               dispatch(gameStateActions2.gettingReady());\n               set(child(myRoomRef, `player${playerNumber}GameInfo`), {\n                  gameQueue: pieceQueue.elements,\n                  linesCleared: myLinesCleared,\n               });\n\n               startButtonLocked = true;\n            }\n         }\n      });\n   });\n\n   //updating the game grid\n   if (gameRunning && !myTurn) {\n      onValue(child(myRoomRef, \"grid\"), (snapshot) => {\n         if (snapshot.exists()) {\n            dispatch(gameStateActions2.setGrid(snapshot.val()));\n         }\n      });\n   }\n   if (gameRunning && !myTurn) {\n      onValue(child(myRoomRef, `player${playerNumber}GameInfo/linesCleared`), (snapshot) => {\n         dispatch(gameStateActions2.setMyLinesCleared(snapshot.val()));\n      });\n   }\n\n   //updating the queuePieces and linesClearedNumber\n   onValue(child(myRoomRef, `player${playerNumber === 1 ? 2 : 1}GameInfo`), (snapshot) => {\n      if (snapshot.exists()) {\n         dispatch(\n            gameStateActions2.setOpponentInfo({\n               opponentPieceQueue: snapshot.val().gameQueue,\n               opponentLinesCleared: snapshot.val().linesCleared,\n            })\n         );\n      }\n   });\n\n   onValue(child(myRoomRef, \"turn\"), (snapshot) => {\n      if (snapshot.exists()) {\n         dispatch(gameStateActions2.setMyTurn(snapshot.val() === playerNumber));\n      }\n   });\n\n   document.onkeydown = (keycode) => {\n      if (startButtonLocked) {\n         return;\n      }\n      if (keycode.key === controls[\"newGame\"]) {\n         startButtonLocked = true;\n         beginGame();\n         //    setStartGame(true);\n         //    dispatch(gameStateActions.newGame());\n         //    dispatch(gameStateActions.getNewPiece());\n         //    dispatch(gameStateActions.getGhostCoords());\n         //    dispatch(gameStateActions.showGhostPiece());\n      }\n   };\n   return (\n      <Fragment>\n         <KeyControls></KeyControls>\n         <InnerGame></InnerGame>\n         <WhoseTurnText />\n         <div\n            style={{\n               display: \"flex\",\n               flexWrap: \"nowrap\",\n               justifyContent: \"center\",\n            }}\n         >\n            <LineClearedCounter player=\"opponent\" />\n            <PieceQueue player=\"opponent\"></PieceQueue>\n            <Grid></Grid>\n            <PieceQueue player=\"mine\"></PieceQueue>\n            <LineClearedCounter player=\"mine\" />\n         </div>\n         {!gameRunning && <InputForm />}\n         <Card>\n            <div style={{ color: \"yellow\" }}>\n               <p>How To Play:</p>\n               <p>Press esc to start.</p>\n               <p>Game starts with other person first.</p>\n               <p>After player drops piece, other player goes.</p>\n               <p>Person that causes the board to overflow loses a line point.</p>\n               <p>Play until a person clears an amount of lines.</p>\n            </div>\n         </Card>\n      </Fragment>\n   );\n};\n\nexport default memo(GameShared);\n","import Card from \"../../UI/Card\";\n\nconst LeaveRoom = ({ leaveRoomHandler }) => {\n   return (\n      <Card>\n         <button onClick={leaveRoomHandler}>Leave Room</button>\n      </Card>\n   );\n};\n\nexport default LeaveRoom;\n","import { Fragment } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"../modules/firebase-config\";\nimport Login from \"../Components/UI/Login\"\nimport OtherUsers from \"../Components/Multiplayer/OtherUsers\";\n\nimport WaitingMessage from \"../Components/Multiplayer/WaitingMessage\";\nimport InviteNotification from \"../Components/Multiplayer/InviteNotfications\";\nimport Game from \"../Components/GameUI/Game\";\nimport {\n   child,\n   get,\n   off,\n   onChildAdded,\n   onChildRemoved,\n   onDisconnect,\n   onValue,\n   remove,\n   set,\n} from \"@firebase/database\";\nimport { userInfoActions } from \"../store/UserInfo\";\nimport { auth, onlineUsersRef, roomsRef } from \"../modules/firebase-config\";\nimport GameShared from \"../Components/Multiplayer/GameShared\";\nimport { gameStateActions2, myRoomRef } from \"../store/GameState2\";\nimport LeaveRoom from \"../Components/Multiplayer/Components/LeaveRoom\";\n\nconst TwoPlayer = () => {\n   const dispatch = useDispatch();\n   const userStatus = useSelector((state) => state.userInfo.roomStatus);\n   const isLoggedIn = useSelector((state) => state.userInfo.isLoggedIn);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const roomKey = useSelector((state) => state.userInfo.roomKey);\n   if (roomKey) {\n      onDisconnect(child(roomsRef, roomKey)).remove();\n   }\n\n   //when list of other users changes\n   onValue(onlineUsersRef, () => {\n      if (auth.currentUser) {\n         get(onlineUsersRef).then((snapshot) => {\n            if (snapshot.val()) {\n               dispatch(\n                  userInfoActions.setOtherUsers(\n                     Object.entries(snapshot.val()).filter(\n                        (pair) => pair[0] !== auth.currentUser.uid && !pair[1].inRoom\n                     )\n                  )\n               );\n            }\n         });\n      }\n   });\n\n   //when someone accepts your invite\n   if (roomKey) {\n      onValue(child(roomsRef, roomKey + \"/accepted\"), (snapshot) => {\n         if (!snapshot.exists()) {\n         } else if (snapshot.val()) {\n            if (playerNumber !== 2) {\n               dispatch(\n                  gameStateActions2.setMultiplayer({\n                     playerNumber: 1,\n                     roomRef: child(roomsRef, roomKey),\n                  })\n               );\n               dispatch(userInfoActions.setRoomStatus(\"in room\"));\n               set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), true);\n            }\n            // off(child(onlineUsersRef, opponentID))\n         } else {\n            dispatch(userInfoActions.setRoomStatus(\"waiting\"));\n         }\n      });\n   }\n   //someone sends you an invite\n   onChildAdded(roomsRef, () => {\n      if (auth.currentUser)\n         get(roomsRef).then((snapshot) => {\n            if (snapshot.exists())\n               dispatch(\n                  userInfoActions.setInvitiationKeys(\n                     Object.entries(snapshot.val())\n                        .filter(\n                           (room) => !room[1].accepted && room[1].player2 === auth.currentUser.uid\n                        )\n                        .map((room) => {\n                           return { opponentuid: room[1].player1, roomKey: room[0] };\n                        })\n                  )\n               );\n         });\n   });\n\n   onChildRemoved(roomsRef, () => {\n      if (auth.currentUser)\n         get(roomsRef).then((snapshot) => {\n            if (snapshot.exists()) {\n               dispatch(\n                  userInfoActions.setInvitiationKeys(\n                     Object.entries(snapshot.val())\n                        .filter(\n                           (room) => !room[1].accepted && room[1].player2 === auth.currentUser.uid\n                        )\n                        .map((room) => {\n                           return { opponentuid: room[1].player1, roomKey: room[0] };\n                        })\n                  )\n               );\n            } else {\n               dispatch(userInfoActions.setInvitiationKeys([]));\n            }\n         });\n   });\n\n   const opponentID = useSelector((state) => state.userInfo.opponentID);\n   const cancelRoomHandler = async () => {\n      off(child(onlineUsersRef, opponentID));\n      dispatch(gameStateActions2.reset());\n      await remove(child(roomsRef, roomKey));\n      dispatch(userInfoActions.reset());\n      if (auth.currentUser) {\n         set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), false);\n      }\n   };\n\n   //check if opponent log out or is in another room or leaves\n   if (opponentID) {\n      onValue(child(onlineUsersRef, opponentID), async (snapshot) => {\n         if (!snapshot.exists()) {\n            cancelRoomHandler();\n         } else if (snapshot.val().inRoom) {\n            // if (myRoomRef){\n            let skip = false;\n            await get(child(myRoomRef, \"accepted\")).then((snapshot) => {\n               skip = snapshot.val();\n            });\n            if (!skip) {\n               cancelRoomHandler();\n            }\n\n            // }\n         }\n      });\n   }\n   if (userStatus === \"in room\") {\n      onValue(myRoomRef, (snapshot) => {\n         //room is removed\n         if (!snapshot.exists()) {\n            off(child(roomsRef, roomKey));\n            off(child(onlineUsersRef, opponentID));\n            dispatch(userInfoActions.reset());\n\n            if (auth.currentUser) {\n               set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), false);\n            }\n            dispatch(gameStateActions2.reset());\n         }\n      });\n   }\n\n   return (\n      <Fragment>\n         <h1>Ditris Two-Player</h1>\n         {!isLoggedIn && <p>Login to begin</p>}\n         {userStatus === \"looking for room\" && <InviteNotification />}\n         {userStatus === \"looking for room\" && <OtherUsers />}\n         {userStatus === \"waiting\" && <WaitingMessage cancelRoomHandler={cancelRoomHandler} />}\n         {userStatus === \"in room\" && <LeaveRoom leaveRoomHandler={cancelRoomHandler}></LeaveRoom>}\n         {userStatus === \"in room\" && <GameShared></GameShared>}\n      </Fragment>\n   );\n};\n\nexport default TwoPlayer;\n","import Login from \"./Login\";\nimport styles from \"./NavigationBar.module.css\";\n\nconst NavigationBar = ({ setPage, setShowKeyBindings }) => {\n   return (\n      <ul className={styles[\"nav-bar\"]}>\n         <li\n            onClick={() => {\n               setPage(\"singleplayer\");\n            }}\n         >\n            SinglePlayer\n         </li>\n         <li\n            onClick={() => {\n               setPage(\"two-player\");\n            }}\n         >\n            Two-Player\n         </li>\n         <li style={{ backgroundColor: \"#333\", float: \"right\" }}>\n            <Login></Login>\n         </li>\n         <li\n            onClick={() => {\n               setShowKeyBindings(true);\n            }}\n            style={{ float: \"right\" }}\n         >\n            Set Controls\n         </li>\n      </ul>\n   );\n};\n\nexport default NavigationBar;\n","import { onAuthStateChanged } from \"@firebase/auth\";\nimport { off, remove} from \"@firebase/database\";\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport KeyBindings from \"./Components/KeyBindings/KeyBindings\";\nimport { auth } from \"./modules/firebase-config\";\nimport SinglePlayer from \"./Pages/SinglePlayer\";\nimport TwoPlayer from \"./Pages/TwoPlayer\";\nimport { gameStateActions } from \"./store/GameState\";\nimport { gameStateActions2, myRoomRef } from \"./store/GameState2\";\nimport { opponentRef, userInfoActions } from \"./store/UserInfo\";\nimport NavigationBar from \"./Components/UI/NavigationBar\";\n\nconst App = () => {\n   const dispatch = useDispatch();\n   const [page, setPage] = useState(<SinglePlayer></SinglePlayer>);\n   const [showKeyBindings,setShowKeyBindings] = useState(false)\n   const changePageHandler = (pageName) => {\n      if (pageName === \"singleplayer\") {\n         dispatch(gameStateActions.reset());\n         setPage(<SinglePlayer></SinglePlayer>);\n      } else if (pageName === \"two-player\") {\n         if(myRoomRef){\n            remove(myRoomRef)\n         }\n         dispatch(gameStateActions2.reset())\n         setPage(<TwoPlayer></TwoPlayer>);\n      }\n   };\n\n   onAuthStateChanged(auth, (user) => {\n      if (user) {\n         dispatch(userInfoActions.login());\n         dispatch(userInfoActions.reset())\n         dispatch(userInfoActions.setRoomStatus(\"looking for room\"))\n\n      } else {\n         dispatch(userInfoActions.logout());\n         if(opponentRef){\n            off(opponentRef)\n         }\n         dispatch(userInfoActions.reset())\n      }\n   });\n\n\n\n\n   return (\n      <React.Fragment>\n         <NavigationBar setPage={changePageHandler} setShowKeyBindings={setShowKeyBindings}></NavigationBar>\n         {page}\n         {showKeyBindings&&<KeyBindings setShowKeyBindings={setShowKeyBindings}></KeyBindings>}\n      </React.Fragment>\n   );\n};\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport gameStateReducer from \"./GameState\";\nimport userInfoReducer from \"./UserInfo\";\nimport gameStateReducer2 from \"./GameState2\";\nimport controlsSliceReducer from \"./Controls\"\n\nconst store = configureStore({\n   reducer: {\n      gameState: gameStateReducer,\n      userInfo: userInfoReducer,\n      gameState2: gameStateReducer2,\n      controls: controlsSliceReducer,\n   },\n});\n\nexport default store;\n","import ReactDOM from \"react-dom/client\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n"],"sourceRoot":""}