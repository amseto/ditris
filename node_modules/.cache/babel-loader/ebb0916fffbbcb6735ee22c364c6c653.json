{"ast":null,"code":"import _regeneratorRuntime from\"/Users/albert/Desktop/-/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/albert/Desktop/-/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{Fragment}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import\"../modules/firebase-config\";import Login from\"../Components/Multiplayer/Login\";import OtherUsers from\"../Components/Multiplayer/OtherUsers\";import WaitingMessage from\"../Components/Multiplayer/WaitingMessage\";import InviteNotification from\"../Components/Multiplayer/InviteNotfications\";import Game from\"../Components/GameUI/Game\";import{child,get,off,onChildAdded,onChildRemoved,onDisconnect,onValue,remove,set}from\"@firebase/database\";import{userInfoActions}from\"../store/UserInfo\";import{auth,onlineUsersRef,roomsRef}from\"../modules/firebase-config\";import LeaveRoom from\"../Components/GameUI/LeaveRoom\";import GameShared from\"../Components/Multiplayer/GameShared\";import{gameStateActions2,myRoomRef}from\"../store/GameState2\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TwoPlayer=function TwoPlayer(){var dispatch=useDispatch();var userStatus=useSelector(function(state){return state.userInfo.roomStatus;});var playerNumber=useSelector(function(state){return state.gameState2.playerNumber;});var roomKey=useSelector(function(state){return state.userInfo.roomKey;});if(roomKey){onDisconnect(child(roomsRef,roomKey)).remove();}//when list of other users changes\nonValue(onlineUsersRef,function(){if(auth.currentUser){get(onlineUsersRef).then(function(snapshot){if(snapshot.val()){dispatch(userInfoActions.setOtherUsers(Object.entries(snapshot.val()).filter(function(pair){return pair[0]!==auth.currentUser.uid&&!pair[1].inRoom;})));}});}});//when someone accepts your invite\nif(roomKey){onValue(child(roomsRef,roomKey+\"/accepted\"),function(snapshot){if(!snapshot.exists()){}else if(snapshot.val()){if(playerNumber!==2){dispatch(gameStateActions2.setMultiplayer({playerNumber:1,roomRef:child(roomsRef,roomKey)}));dispatch(userInfoActions.setRoomStatus(\"in room\"));set(child(onlineUsersRef,auth.currentUser.uid+\"/inRoom\"),true);}// off(child(onlineUsersRef, opponentID))\n}else{dispatch(userInfoActions.setRoomStatus(\"waiting\"));}});}//someone sends you an invite\nonChildAdded(roomsRef,function(){if(auth.currentUser)get(roomsRef).then(function(snapshot){if(snapshot.exists())dispatch(userInfoActions.setInvitiationKeys(Object.entries(snapshot.val()).filter(function(room){return!room[1].accepted&&room[1].player2===auth.currentUser.uid;}).map(function(room){return{opponentuid:room[1].player1,roomKey:room[0]};})));});});onChildRemoved(roomsRef,function(){if(auth.currentUser)get(roomsRef).then(function(snapshot){if(snapshot.exists()){dispatch(userInfoActions.setInvitiationKeys(Object.entries(snapshot.val()).filter(function(room){return!room[1].accepted&&room[1].player2===auth.currentUser.uid;}).map(function(room){return{opponentuid:room[1].player1,roomKey:room[0]};})));}else{dispatch(userInfoActions.setInvitiationKeys([]));}});});var opponentID=useSelector(function(state){return state.userInfo.opponentID;});var cancelRoomHandler=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:off(child(onlineUsersRef,opponentID));dispatch(gameStateActions2.reset());_context.next=4;return remove(child(roomsRef,roomKey));case 4:dispatch(userInfoActions.reset());if(auth.currentUser){set(child(onlineUsersRef,auth.currentUser.uid+\"/inRoom\"),false);}case 6:case\"end\":return _context.stop();}}},_callee);}));return function cancelRoomHandler(){return _ref.apply(this,arguments);};}();//check if opponent log out or is in another room or leaves\nif(opponentID){onValue(child(onlineUsersRef,opponentID),/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(snapshot){var skip;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(snapshot.exists()){_context2.next=4;break;}cancelRoomHandler();_context2.next=9;break;case 4:if(!snapshot.val().inRoom){_context2.next=9;break;}// if (myRoomRef){\nskip=false;_context2.next=8;return get(child(myRoomRef,\"accepted\")).then(function(snapshot){skip=snapshot.val();});case 8:if(!skip){cancelRoomHandler();}// }\ncase 9:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x){return _ref2.apply(this,arguments);};}());}if(userStatus===\"in room\"){onValue(myRoomRef,function(snapshot){//room is removed\nif(!snapshot.exists()){off(child(roomsRef,roomKey));off(child(onlineUsersRef,opponentID));dispatch(userInfoActions.reset());if(auth.currentUser){set(child(onlineUsersRef,auth.currentUser.uid+\"/inRoom\"),false);}dispatch(gameStateActions2.reset());}});}return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Ditris Two-Player\"}),userStatus===\"looking for room\"&&/*#__PURE__*/_jsx(InviteNotification,{}),userStatus===\"looking for room\"&&/*#__PURE__*/_jsx(OtherUsers,{}),userStatus===\"waiting\"&&/*#__PURE__*/_jsx(WaitingMessage,{cancelRoomHandler:cancelRoomHandler}),/*#__PURE__*/_jsx(Login,{}),userStatus===\"in room\"&&/*#__PURE__*/_jsx(LeaveRoom,{leaveRoomHandler:cancelRoomHandler}),userStatus===\"in room\"&&/*#__PURE__*/_jsx(GameShared,{})]});};export default TwoPlayer;","map":{"version":3,"names":["Fragment","useDispatch","useSelector","Login","OtherUsers","WaitingMessage","InviteNotification","Game","child","get","off","onChildAdded","onChildRemoved","onDisconnect","onValue","remove","set","userInfoActions","auth","onlineUsersRef","roomsRef","LeaveRoom","GameShared","gameStateActions2","myRoomRef","TwoPlayer","dispatch","userStatus","state","userInfo","roomStatus","playerNumber","gameState2","roomKey","currentUser","then","snapshot","val","setOtherUsers","Object","entries","filter","pair","uid","inRoom","exists","setMultiplayer","roomRef","setRoomStatus","setInvitiationKeys","room","accepted","player2","map","opponentuid","player1","opponentID","cancelRoomHandler","reset","skip"],"sources":["/Users/albert/Desktop/-/src/Pages/TwoPlayer.js"],"sourcesContent":["import { Fragment } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"../modules/firebase-config\";\nimport Login from \"../Components/Multiplayer/Login\";\nimport OtherUsers from \"../Components/Multiplayer/OtherUsers\";\n\nimport WaitingMessage from \"../Components/Multiplayer/WaitingMessage\";\nimport InviteNotification from \"../Components/Multiplayer/InviteNotfications\";\nimport Game from \"../Components/GameUI/Game\";\nimport {\n   child,\n   get,\n   off,\n   onChildAdded,\n   onChildRemoved,\n   onDisconnect,\n   onValue,\n   remove,\n   set,\n} from \"@firebase/database\";\nimport { userInfoActions } from \"../store/UserInfo\";\nimport { auth, onlineUsersRef, roomsRef } from \"../modules/firebase-config\";\nimport LeaveRoom from \"../Components/GameUI/LeaveRoom\";\nimport GameShared from \"../Components/Multiplayer/GameShared\";\nimport { gameStateActions2, myRoomRef } from \"../store/GameState2\";\n\nconst TwoPlayer = () => {\n   const dispatch = useDispatch();\n   const userStatus = useSelector((state) => state.userInfo.roomStatus);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const roomKey = useSelector((state) => state.userInfo.roomKey);\n   if (roomKey) {\n      onDisconnect(child(roomsRef, roomKey)).remove();\n   }\n\n   //when list of other users changes\n   onValue(onlineUsersRef, () => {\n      if (auth.currentUser) {\n         get(onlineUsersRef).then((snapshot) => {\n            if (snapshot.val()) {\n               dispatch(\n                  userInfoActions.setOtherUsers(\n                     Object.entries(snapshot.val()).filter(\n                        (pair) => pair[0] !== auth.currentUser.uid && !pair[1].inRoom\n                     )\n                  )\n               );\n            }\n         });\n      }\n   });\n\n   //when someone accepts your invite\n   if (roomKey) {\n      onValue(child(roomsRef, roomKey + \"/accepted\"), (snapshot) => {\n         if (!snapshot.exists()) {\n         } else if (snapshot.val()) {\n            if (playerNumber !== 2) {\n               dispatch(\n                  gameStateActions2.setMultiplayer({\n                     playerNumber: 1,\n                     roomRef: child(roomsRef, roomKey),\n                  })\n               );\n               dispatch(userInfoActions.setRoomStatus(\"in room\"));\n               set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), true);\n            }\n            // off(child(onlineUsersRef, opponentID))\n         } else {\n            dispatch(userInfoActions.setRoomStatus(\"waiting\"));\n         }\n      });\n   }\n   //someone sends you an invite\n   onChildAdded(roomsRef, () => {\n      if (auth.currentUser)\n         get(roomsRef).then((snapshot) => {\n            if (snapshot.exists())\n               dispatch(\n                  userInfoActions.setInvitiationKeys(\n                     Object.entries(snapshot.val())\n                        .filter(\n                           (room) => !room[1].accepted && room[1].player2 === auth.currentUser.uid\n                        )\n                        .map((room) => {\n                           return { opponentuid: room[1].player1, roomKey: room[0] };\n                        })\n                  )\n               );\n         });\n   });\n\n   onChildRemoved(roomsRef, () => {\n      if (auth.currentUser)\n         get(roomsRef).then((snapshot) => {\n            if (snapshot.exists()) {\n               dispatch(\n                  userInfoActions.setInvitiationKeys(\n                     Object.entries(snapshot.val())\n                        .filter(\n                           (room) => !room[1].accepted && room[1].player2 === auth.currentUser.uid\n                        )\n                        .map((room) => {\n                           return { opponentuid: room[1].player1, roomKey: room[0] };\n                        })\n                  )\n               );\n            } else {\n               dispatch(userInfoActions.setInvitiationKeys([]));\n            }\n         });\n   });\n\n   const opponentID = useSelector((state) => state.userInfo.opponentID);\n   const cancelRoomHandler = async () => {\n      off(child(onlineUsersRef, opponentID));\n      dispatch(gameStateActions2.reset());\n      await remove(child(roomsRef, roomKey));\n      dispatch(userInfoActions.reset());\n      if (auth.currentUser) {\n         set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), false);\n      }\n   };\n\n   //check if opponent log out or is in another room or leaves\n   if (opponentID) {\n      onValue(child(onlineUsersRef, opponentID), async (snapshot) => {\n         if (!snapshot.exists()) {\n            cancelRoomHandler();\n         } else if (snapshot.val().inRoom) {\n            // if (myRoomRef){\n            let skip = false;\n            await get(child(myRoomRef, \"accepted\")).then((snapshot) => {\n               skip = snapshot.val();\n            });\n            if (!skip) {\n               cancelRoomHandler();\n            }\n            // }\n         }\n      });\n   }\n   if (userStatus === \"in room\") {\n      onValue(myRoomRef, (snapshot) => {\n         //room is removed\n         if (!snapshot.exists()) {\n            off(child(roomsRef, roomKey));\n            off(child(onlineUsersRef, opponentID));\n            dispatch(userInfoActions.reset());\n\n            if (auth.currentUser) {\n               set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), false);\n            }\n            dispatch(gameStateActions2.reset());\n         }\n      });\n   }\n\n   return (\n      <Fragment>\n         <h1>Ditris Two-Player</h1>\n         {userStatus === \"looking for room\" && <InviteNotification />}\n         {userStatus === \"looking for room\" && <OtherUsers />}\n         {userStatus === \"waiting\" && <WaitingMessage cancelRoomHandler={cancelRoomHandler} />}\n         <Login></Login>\n         {userStatus === \"in room\" && <LeaveRoom leaveRoomHandler={cancelRoomHandler}></LeaveRoom>}\n         {/* {userStatus === \"in room\" && playerNumber === 1 && <Game></Game>}\n         {userStatus === \"in room\" && playerNumber === 2 && <GetGame></GetGame>} */}\n         {userStatus === \"in room\" && <GameShared></GameShared>}\n      </Fragment>\n   );\n};\n\nexport default TwoPlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}