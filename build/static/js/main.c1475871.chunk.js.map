{"version":3,"sources":["Components/Multiplayer/Components/PieceQueue.module.css","Components/GameUI/HeldBlock.module.css","Components/GameUI/StopWatch.module.css","Components/UI/Modal.module.css","Components/GameUI/Block.module.css","Components/GameUI/PieceQueue.module.css","Components/Multiplayer/Components/Block.module.css","Components/GameUI/Grid.module.css","Components/GameUI/HowToPlay.module.css","Components/Multiplayer/Components/Grid.module.css","Components/UI/NavigationBar.module.css","store/Controls.js","Components/UI/Modal.js","Components/KeyBindings/KeyBinding.js","Components/KeyBindings/KeyBindings.js","modules/firebase-config.js","Components/GameUI/Tetrimino.js","modules/piece-queue.js","store/GameState.js","Components/GameUI/Block.js","Components/GameUI/ReadyGo.js","Components/GameUI/Grid.js","Components/GameUI/PieceQueuePiece.js","Components/GameUI/PieceQueue.js","Components/GameUI/HeldBlock.js","modules/KeyControls.js","Components/GameUI/HowToPlay.js","Components/GameUI/StopWatch.js","Components/GameUI/Game.js","Pages/SinglePlayer.js","Components/Multiplayer/Login.js","store/UserInfo.js","Components/Multiplayer/OtherUser.js","Components/Multiplayer/OtherUsers.js","Components/Multiplayer/WaitingMessage.js","store/GameState2.js","Components/Multiplayer/InviteNotifcation.js","Components/Multiplayer/InviteNotfications.js","Components/GameUI/LeaveRoom.js","Components/Multiplayer/Components/Block.js","Components/Multiplayer/Components/ReadyGo.js","Components/Multiplayer/Components/Grid.js","Components/Multiplayer/Components/Tetrimino.js","Components/Multiplayer/Components/PieceQueuePiece.js","Components/Multiplayer/Components/PieceQueue.js","Components/Multiplayer/Components/LineClearedCounter.js","Components/Multiplayer/Components/WhoseTurnText.js","Components/Multiplayer/Components/InputForm.js","Components/Multiplayer/GameShared.js","Pages/TwoPlayer.js","Components/UI/NavigationBar.js","App.js","store/index.js","index.js"],"names":["module","exports","controlsSlice","createSlice","name","initialState","newGame","moveLeft","moveRight","softDrop","hardDrop","rotateLeft","rotateRight","hold","reducers","resetDefault","state","resetAlbert","setNewControls","newControls","payload","controlsActions","actions","Backdrop","props","className","styles","backdrop","onClick","ModalOverlay","children","modal","Modal","portalElement","document","getElementById","createPortal","KeyBinding","controlName","input","setInput","currentKey","useState","bindingBeingChanged","setBindingBeingChanged","useEffect","onkeydown","keycode","key","displayWord","id","onChange","event","target","value","length","blur","onFocus","onBlur","KeyBindings","setShowKeyBindings","dispatch","useDispatch","controls","useSelector","newGameInput","setNewGameInput","rotateRightInput","setRotateRightInput","rotateLeftInput","setRotateLeftInput","holdInput","setHoldInput","hardDropInput","setHardDropInput","softDropInput","setSoftDropInput","moveLeftInput","setMoveLeftInput","moveRightInput","setMoveRightInput","style","float","auth","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getAuth","db","getDatabase","rootRef","ref","onlineUsersRef","child","roomsRef","getUsernameFromuid","uid","get","then","snapshot","username","val","TETRIMINOS","I","T","L","J","Z","S","O","Queue","this","elements","head","tail","element","item","isEmpty","dequeue","pieceArray","getRandomPiece","Math","floor","random","splice","getCoords","type","rotatePos","xPos","yPos","map","row","rowPos","col","colPos","x","y","convertMappingToCoords","mapping","forGhost","coordArray","array","coord","coordIsValid","push","removeLastState","currentCoords","grid","placeBlocks","colorName","currentShape","ghostCoords","currentCoord","pieceQueue","gameStateSlice","gameRunning","currentPieceState","totalLinesCleared","isGameWon","heldPiece","rotated","displayMessage","reset","empty","gettingReady","i","enqueue","clearLines","newGrid","linesCleared","every","blockType","unshift","getNewPiece","console","log","rotatePiece","action","originalRotatePos","isCounterClockwise","dropPiece","getGhostCoords","removeLastGhostPiece","ghostYPos","showGhostPiece","shiftLeft","shiftRight","checkIfGameWon","holdPiece","placeHolder","gameStateActions","Block","color","block","ReadyGo","gameState","position","marginTop","fontSize","flexDirection","Grid","slice","y_pos","x_pos","PieceQueuePiece","PieceQueue","pieces","pieceColor","HeldBlock","heldBlock","title","keyIsPressed","keyIsDisabled","keyShiftCounter","KeyControls","window","addEventListener","preventDefault","stopPropagation","HowToPlay","howToPlay","StopWatch","miliseconds","setMiliseconds","seconds","setSeconds","minutes","setMinutes","incrementInterval","setInterval","clearInterval","stopWatch","gameLocked","Game","startGame","setStartGame","dropPieceInterval","handleInputInterval","keyHandler","shiftInputInterval","keyShiftHandler","interval","setTimeout","display","flexWrap","SinglePlayer","Login","isLoggedIn","userInfo","usernameInput","setUsernameInput","loginHandler","signInAnonymously","set","currentUser","inRoom","logoutHandler","remove","signOut","onSubmit","memo","opponentRef","userInfoSlice","roomStatus","otherUsers","roomKey","opponentName","opponentID","invitationKeys","displayText","myName","login","logout","setOtherUsers","users","setRoomKey","setRoomStatus","newStatus","setOpponentName","setOpponentid","setInvitiationKeys","keysList","setGrid","setDisplayText","text","userInfoActions","OtherUser","pushRoomsRef","createRoomHandler","off","player1","player2","accepted","OtherUsers","otherUsersList","otherUserListDisplay","pair","index","WaitingMessage","cancelRoomHandler","myRoomRef","myCurrentCoords","myCurrentShape","myGhostCoords","gameStateSlice2","playerNumber","myPieceQueue","myHeldPiece","myLinesCleared","opponentPieceQueue","opponentHeldPiece","opponentLinesCleared","currentGameStatus","myTurn","linesToClear","sendGrid","gameQueue","setOpponentInfo","placeCurrentPiece","unfreeze","setMultiplayer","roomRef","setDisplayMessage","includes","setMyTurn","bool","setMyLinesCleared","lines","setLinesToClear","gameStateActions2","InviteNotfication","opponentuid","getOpponentName","acceptInvite","InviteNotifications","invitations","LeaveRoom","leaveRoomHandler","gameState2","player","opponentPieces","pieceQueueMine","pieceQueueOpponent","LineClearedCounter","opponentCounter","myCounter","justifyContent","WhoseTurnText","textAlign","InputForm","linesToClearInput","setLinesToClearInput","onValue","exists","startButtonLocked","controlsLocked","GameShared","gameLoop","beginGame","Promise","resolve","onDisconnect","TwoPlayer","userStatus","Object","entries","filter","onChildAdded","room","onChildRemoved","skip","NavigationBar","setPage","App","page","showKeyBindings","onAuthStateChanged","user","Fragment","pageName","store","configureStore","reducer","gameStateReducer","userInfoReducer","gameStateReducer2","controlsSliceReducer","ReactDOM","createRoot","render"],"mappings":"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G,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAA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,IAAK,IAAK,IAAK,IAAK,IAAK,KAC/E5G,EAAMwI,KAAO,CACV,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzE,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ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EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAIdC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGXC,EAAG,CAED,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,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","file":"static/js/main.c1475871.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pieceQueueMine\":\"PieceQueue_pieceQueueMine__1UxQY\",\"pieceQueueOpponent\":\"PieceQueue_pieceQueueOpponent__1ygFA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heldBlock\":\"HeldBlock_heldBlock__2nV0f\",\"title\":\"HeldBlock_title__-UOyq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stopWatch\":\"StopWatch_stopWatch__2hbXZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__2znzX\",\"modal\":\"Modal_modal__2QgxK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Block_block__1kjjl\",\"None\":\"Block_None__ltR1S\",\"I\":\"Block_I__1Pnys\",\"T\":\"Block_T__WdEBm\",\"L\":\"Block_L__1zsbc\",\"J\":\"Block_J__2iV29\",\"Z\":\"Block_Z__28EjD\",\"S\":\"Block_S__MKS_j\",\"O\":\"Block_O__3X5pc\",\"Ighost\":\"Block_Ighost__1pBKL\",\"Tghost\":\"Block_Tghost__2h680\",\"Lghost\":\"Block_Lghost__3KiXo\",\"Jghost\":\"Block_Jghost__9BTwX\",\"Zghost\":\"Block_Zghost__3ytmC\",\"Sghost\":\"Block_Sghost__1z9Pj\",\"Oghost\":\"Block_Oghost__34NVA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pieceQueue\":\"PieceQueue_pieceQueue__N5gJS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Block_block__7hl6T\",\"None\":\"Block_None__2PHRA\",\"I\":\"Block_I__2hPz5\",\"T\":\"Block_T__1zbV7\",\"L\":\"Block_L__vPAnW\",\"J\":\"Block_J__1lt8I\",\"Z\":\"Block_Z__2BuFD\",\"S\":\"Block_S__36R4_\",\"O\":\"Block_O__1LvhJ\",\"Ighost\":\"Block_Ighost__lbI0G\",\"Tghost\":\"Block_Tghost__3-N71\",\"Lghost\":\"Block_Lghost__2imGj\",\"Jghost\":\"Block_Jghost__3QcrR\",\"Zghost\":\"Block_Zghost__eEqpK\",\"Sghost\":\"Block_Sghost__2Fbny\",\"Oghost\":\"Block_Oghost__1cvVz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__9Fsru\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"howToPlay\":\"HowToPlay_howToPlay__2-hPX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__3hTgC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav-bar\":\"NavigationBar_nav-bar__WRYyO\"};","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialControlsState = {\n   newGame: \"Escape\",\n   moveLeft: \"ArrowLeft\",\n   moveRight: \"ArrowRight\",\n   softDrop: \"ArrowDown\",\n   hardDrop: \" \",\n   rotateLeft: \"z\",\n   rotateRight: \"ArrowUp\",\n   hold: \"c\",\n};\n\nconst controlsSlice = createSlice({\n   name: \"controls\",\n   initialState: initialControlsState,\n   reducers: {\n      resetDefault(state) {\n        state.newGame= \"Escape\";\n        state.moveLeft= \"ArrowLeft\";\n        state.moveRight= \"ArrowRight\";\n        state.softDrop= \"ArrowDown\";\n        state.hardDrop= \" \";\n        state.rotateLeft= \"z\";\n        state.rotateRight= \"ArrowUp\";\n        state.hold= \"c\";\n      },\n      resetAlbert(state) {\n        state.newGame= \"Escape\";\n        state.moveLeft= \"ArrowLeft\";\n        state.moveRight= \"ArrowRight\";\n        state.softDrop= \"ArrowDown\";\n        state.hardDrop= \" \";\n        state.rotateLeft= \"q\";\n        state.rotateRight= \"w\";\n        state.hold= \"Tab\";\n      },\n      setNewControls(state,newControls){\n        state.newGame= newControls.payload.newGame\n        state.moveLeft= newControls.payload.moveLeft\n        state.moveRight= newControls.payload.moveRight\n        state.softDrop= newControls.payload.softDrop\n        state.hardDrop= newControls.payload.hardDrop\n        state.rotateLeft= newControls.payload.rotateLeft\n        state.rotateRight= newControls.payload.rotateRight\n        state.hold= newControls.payload.hold\n      }\n   },\n});\n\nexport const controlsActions = controlsSlice.actions;\n\nexport default controlsSlice.reducer;","import { Fragment } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport styles from \"./Modal.module.css\";\nconst Backdrop = (props) => {\n   return <div className={styles.backdrop} onClick={props.onClick} ></div>;\n};\n\nconst ModalOverlay = ({ children }) => {\n   return <div className={styles.modal}>{children}</div>;\n};\n\n\nconst Modal = (props) => {\n    const portalElement = document.getElementById(\"overlays\");\n    return (\n      <Fragment>\n        {createPortal(\n          <Backdrop onClick={props.onClick} />,\n          portalElement\n        )}\n        {createPortal(\n          <ModalOverlay>{props.children}</ModalOverlay>,\n          portalElement\n        )}\n      </Fragment>\n    );\n  };\n\nexport default Modal;\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst KeyBinding = ({ controlName, input, setInput, currentKey }) => {\n   const [bindingBeingChanged, setBindingBeingChanged] = useState(false);\n   useEffect(() => {\n      document.onkeydown = (keycode) => {\n         if (bindingBeingChanged) {\n            setInput(keycode.key);\n         }\n      };\n   }, [bindingBeingChanged]);\n   let displayWord = input;\n   if (displayWord === \" \") {\n      displayWord = \"space\";\n   }\n   useEffect(() => {\n      setInput(currentKey);\n   },[currentKey]);\n   return (\n      <div>\n         <label id={controlName}>{`${controlName} `}</label>\n         <input\n            onChange={(event) => {\n               if (event.target.value.length === 1) {\n                  event.target.blur();\n               }\n            }}\n            onFocus={(event) => {\n               setInput(\"\");\n               setBindingBeingChanged(true);\n            }}\n            onBlur={(event) => {\n               if (event.target.value === \"\") {\n                  setInput(currentKey);\n               }\n               setBindingBeingChanged(false);\n            }}\n            id={controlName}\n            value={displayWord}\n         ></input>\n      </div>\n   );\n};\nexport default KeyBinding;\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { controlsActions } from \"../../store/Controls\";\nimport Modal from \"../UI/Modal\";\nimport KeyBinding from \"./KeyBinding\";\n\nconst KeyBindings = ({ setShowKeyBindings }) => {\n   const dispatch = useDispatch();\n   const controls = useSelector((state) => state.controls);\n   const [newGameInput, setNewGameInput] = useState(controls[\"newGame\"]);\n   const [rotateRightInput, setRotateRightInput] = useState(controls[\"rotateRight\"]);\n   const [rotateLeftInput, setRotateLeftInput] = useState(controls[\"rotateLeft\"]);\n   const [holdInput, setHoldInput] = useState(controls[\"hold\"]);\n   const [hardDropInput, setHardDropInput] = useState(controls[\"hardDrop\"]);\n   const [softDropInput, setSoftDropInput] = useState(controls[\"softDrop\"]);\n   const [moveLeftInput, setMoveLeftInput] = useState(controls[\"moveLeft\"]);\n   const [moveRightInput, setMoveRightInput] = useState(controls[\"moveRight\"]);\n   return (\n      <Modal\n         onClick={() => {\n            setShowKeyBindings(false);\n         }}\n      >\n         <button\n            onClick={() => {\n               setShowKeyBindings(false);\n            }}\n            style={{ float: \"right\" }}\n         >\n            x\n         </button>\n         <KeyBinding\n            controlName=\"newGame\"\n            currentKey={controls[\"newGame\"]}\n            input={newGameInput}\n            setInput={setNewGameInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"rotateRight\"]}\n            controlName=\"rotateRight\"\n            input={rotateRightInput}\n            setInput={setRotateRightInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"rotateLeft\"]}\n            controlName=\"rotateLeft\"\n            input={rotateLeftInput}\n            setInput={setRotateLeftInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"hold\"]}\n            controlName=\"hold\"\n            input={holdInput}\n            setInput={setHoldInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"hardDrop\"]}\n            controlName=\"hardDrop\"\n            input={hardDropInput}\n            setInput={setHardDropInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"softDrop\"]}\n            controlName=\"softDrop\"\n            input={softDropInput}\n            setInput={setSoftDropInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"moveLeft\"]}\n            controlName=\"moveLeft\"\n            input={moveLeftInput}\n            setInput={setMoveLeftInput}\n         />\n         <KeyBinding\n            currentKey={controls[\"moveRight\"]}\n            controlName=\"moveRight\"\n            input={moveRightInput}\n            setInput={setMoveRightInput}\n         />\n         <div>\n            <button\n               onClick={() => {\n                  dispatch(controlsActions.resetDefault());\n               }}\n            >\n               Default\n            </button>\n            <button\n               onClick={() => {\n                  dispatch(controlsActions.resetAlbert());\n               }}\n            >\n               Albert\n            </button>\n            <button\n               onClick={() => {\n                  dispatch(\n                     controlsActions.setNewControls({\n                        newGame: newGameInput,\n                        rotateRight: rotateRightInput,\n                        rotateLeft: rotateLeftInput,\n                        hardDrop:hardDropInput,\n                        softDrop:softDropInput,\n                        moveLeft:moveLeftInput,\n                        moveRight:moveRightInput,\n                        hold:holdInput\n                     })\n                  );\n               }}\n            >\n               Save\n            </button>\n         </div>\n      </Modal>\n   );\n};\nexport default KeyBindings;\n","// Import the functions you need from the SDKs you need\nimport { getAuth } from \"@firebase/auth\";\nimport { child, get, getDatabase, ref } from \"@firebase/database\";\nimport { initializeApp } from \"firebase/app\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA9ipNK6_boqbwThQlJgolni-O5iIgIl40\",\n  authDomain: \"ditris-2244c.firebaseapp.com\",\n  databaseURL: \"https://ditris-2244c-default-rtdb.firebaseio.com\",\n  projectId: \"ditris-2244c\",\n  storageBucket: \"ditris-2244c.appspot.com\",\n  messagingSenderId: \"743373731037\",\n  appId: \"1:743373731037:web:9552a80db8b0df8d875734\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth()\nexport const db = getDatabase()\nexport const rootRef = ref(db);\nexport const onlineUsersRef = child(rootRef,'users')\nexport const roomsRef= child(rootRef,'rooms')\nexport const getUsernameFromuid = async (uid) =>{\n  let username;\n  await get(child(onlineUsersRef,uid)).then(snapshot=>{username = snapshot.val().username})\n  return username\n}\n\n\n","export const TETRIMINOS = {\n  I: [\n    //I\n    [\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  ],\n\n  T: [\n    //T\n    [\n      [0, 1, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  L: [\n    //L\n    [\n      [0, 0, 1],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  J: [\n    //J\n    [\n      [1, 0, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  ],\n  Z: [\n    //Z\n    [\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  ],\n  S: [\n    //S\n    [\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  O: [\n    //O\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n  ],\n};\n\nexport const getRandomPiece = () => {\n  const value = Math.round(6 * Math.random());\n  switch (value) {\n    case 0:\n      return \"I\";\n    case 1:\n      return \"T\";\n    case 2:\n      return \"L\";\n    case 3:\n      return \"J\";\n    case 4:\n      return \"Z\";\n    case 5:\n      return \"S\";\n    case 6:\n      return \"O\";\n  }\n};\n\nexport const getPiece = (type, rotatePos, xPos, yPos) =>\n  TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n    row.map((col, colPos) => {\n      if (col) {\n        return { x: xPos + colPos, y: yPos + rowPos };\n      }\n      return null;\n    })\n  );\n\nexport const rotatePiece = (isCounterClockwise, { type, rotatePos }) => {\n  return isCounterClockwise\n    ? rotatePos === 0\n      ? TETRIMINOS[type].length - 1\n      : rotatePos - 1\n    : rotatePos === TETRIMINOS[type].length - 1\n    ? 0\n    : rotatePos + 1;\n};\n\nexport const convertMappingToCoords = (mapping) => {\n  let coordArray = [];\n  for (const array of mapping) {\n    for (const coord of array) {\n      if (coord) {\n        coordArray.push(coord);\n      }\n    }\n  }\n  return coordArray;\n};\n","export default class Queue {\n    constructor() {\n      this.elements = {};\n      this.head = 0;\n      this.tail = 0;\n    }\n    enqueue(element) {\n      this.elements[this.tail] = element;\n      this.tail++;\n    }\n    dequeue() {\n      const item = this.elements[this.head];\n      delete this.elements[this.head];\n      this.head++;\n      return item;\n    }\n    peek() {\n      return this.elements[this.head];\n    }\n    empty(){\n        while(!this.isEmpty){\n            this.dequeue()\n        }\n    }\n    get length() {\n      return this.tail - this.head;\n    }\n    get isEmpty() {\n      return this.length === 0;\n    }\n  }","import { child, set } from \"@firebase/database\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nimport { TETRIMINOS } from \"../Components/GameUI/Tetrimino\";\n\nimport Queue from \"../modules/piece-queue\";\n\nlet pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\nconst getRandomPiece = () => {\n   if (pieceArray.length === 0) {\n      pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n   }\n   const value = Math.floor(pieceArray.length * Math.random());\n   return pieceArray.splice(value, 1);\n};\n\nexport let myRoomRef = null;\n\nconst getCoords = (type, rotatePos, xPos, yPos) =>\n   TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n      row.map((col, colPos) => {\n         if (col) {\n            return { x: xPos + colPos, y: yPos + rowPos };\n         }\n         return null;\n      })\n   );\n\nconst rotatePiece = (isCounterClockwise, state) => {\n   let { rotatePos } = state;\n   if (isCounterClockwise) {\n      if (rotatePos === 0) {\n         return 3;\n      } else {\n         return rotatePos - 1;\n      }\n   } else {\n      if (rotatePos === 3) {\n         return 0;\n      } else {\n         return rotatePos + 1;\n      }\n   }\n};\n\nconst convertMappingToCoords = (state, mapping, forGhost = false) => {\n   let coordArray = [];\n   for (const array of mapping) {\n      for (const coord of array) {\n         if (coord) {\n            if (coordIsValid(state, coord, forGhost)) {\n               coordArray.push(coord);\n            }\n         }\n      }\n   }\n   return coordArray;\n};\n\nconst gameStateInitialState = {\n   gameRunning: false,\n   currentShape: null,\n   currentCoords: [],\n   ghostCoords: [],\n   currentPieceState: \"NONE\",\n   rotatePos: 0,\n   xPos: 3,\n   yPos: 0,\n   totalLinesCleared: 0,\n   grid: [\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n   ],\n   // winCondition:(state) =>{return state.totalLinesCleared >= 5},\n   pieceQueue: null,\n   isGameWon: false,\n   heldPiece: null,\n   rotated: false,\n   displayMessage: null,\n\n};\n\nconst removeLastState = (state) => {\n   for (const coord of state.currentCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst removeLastGhostPiece = (state) => {\n   for (const coord of state.ghostCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst placeBlocks = (state, forGhost = false) => {\n   if (forGhost) {\n      const colorName = state.currentShape + \"ghost\";\n      for (const coord of state.ghostCoords) {\n         state.grid[coord.y][coord.x] = colorName;\n         for (const currentCoord of state.currentCoords) {\n            if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n               state.grid[coord.y][coord.x] = state.currentShape;\n            }\n         }\n      }\n   } else {\n      for (const coord of state.currentCoords) {\n         state.grid[coord.y][coord.x] = state.currentShape;\n      }\n   }\n   \n};\n\nconst coordIsValid = (state, coord, forGhost = false) => {\n   if (coord) {\n      if (coord.y <= 20 && coord.x >= 0 && coord.x <= 9) {\n         for (let currentCoord of state.currentCoords) {\n            if (forGhost) {\n               if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n                  return true;\n               }\n            }\n         }\n         if (state.grid[coord.y][coord.x].length > 1) {\n            return true;\n         }\n      }\n   }\n   return false;\n};\n\n\nexport let pieceQueue = new Queue();\n\nconst gameStateSlice = createSlice({\n   name: \"gameState\",\n   initialState: gameStateInitialState,\n   reducers: {\n      reset(state) {\n         pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.totalLinesCleared = 0;\n         state.displayMessage = null;\n         state.rotated = false\n         state.heldPiece = null\n         state.currentPieceState = \"GETTING READY\";\n         pieceQueue.empty();\n         state.gameRunning = false;\n      },\n      newGame(state) {\n         pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.totalLinesCleared = 0;\n         state.rotated = false\n         state.heldPiece = null\n         state.displayMessage = \"READY\";\n         state.currentPieceState = \"GETTING READY\";\n         pieceQueue.empty();\n         state.gameRunning = false;\n      },\n      gettingReady(state) {\n         if (state.currentPieceState === \"GETTING READY\") {\n            state.currentPieceState = \"BEFORE START\";\n            state.displayMessage = \"GO!\";\n         } else if (state.currentPieceState === \"BEFORE START\") {\n            state.displayMessage = null;\n            state.gameRunning = true;\n            state.currentShape = getRandomPiece()[0];\n            for (let i = 0; i < 5; i++) {\n               pieceQueue.enqueue(...getRandomPiece());\n            }\n         }\n      },\n      clearLines(state) {\n         let newGrid = [];\n         let linesCleared = 0;\n         for (const row of state.grid) {\n            if (row.every((blockType) => blockType !== \"None\")) {\n               state.totalLinesCleared += 1;\n               linesCleared += 1;\n            } else {\n               newGrid.push(row);\n            }\n         }\n         for (let i = 0; i < linesCleared; i++) {\n            newGrid.unshift([\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n            ]);\n         }\n         state.grid = newGrid;\n      },\n      getNewPiece(state) {\n         if (!state.gameRunning) {\n            return;\n         }\n         state.ghostCoords = [];\n         state.rotated = false;\n         state.currentShape = pieceQueue.dequeue();\n         pieceQueue.enqueue(...getRandomPiece());\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.gameRunning = false;\n            state.displayMessage = \"YOU LOST\";\n            console.log(\"lost\");\n            return;\n         }\n         placeBlocks(state);\n         state.currentPieceState = \"FALLING\";\n      },\n      rotatePiece(state, action) {\n         const originalRotatePos = state.rotatePos;\n         state.rotatePos = rotatePiece(action.payload, {\n            rotatePos: state.rotatePos,\n         });\n         removeLastState(state);\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.rotatePos = originalRotatePos;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentPieceState = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      dropPiece(state) {\n         if (state.gameRunning) {\n            if (state.currentPieceState === \"LANDING\") {\n               state.currentPieceState = \"FROZEN\";\n               return;\n            }\n            removeLastState(state);\n            state.yPos += 1;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n            if (state.currentCoords.length < 4) {\n               state.yPos -= 1;\n               state.currentCoords = convertMappingToCoords(\n                  state,\n                  getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n               );\n               state.currentPieceState = \"LANDING\";\n            } else {\n               state.currentPieceState = \"FALLING\";\n            }\n            placeBlocks(state);\n         } else {\n         }\n      },\n      getGhostCoords(state) {\n         if (!state.gameRunning) {\n            return;\n         }\n         removeLastGhostPiece(state);\n         state.ghostCoords = [];\n         for (let coord of state.currentCoords) {\n            state.ghostCoords.push({ x: coord.x, y: coord.y });\n         }\n         let ghostYPos = state.yPos;\n         while (state.ghostCoords.length === 4) {\n            ghostYPos += 1;\n            state.ghostCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, ghostYPos),\n               true\n            );\n         }\n         ghostYPos -= 1;\n         state.ghostCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, ghostYPos),\n            true\n         );\n      },\n      hardDrop(state) {\n         removeLastState(state);\n         state.currentCoords = state.ghostCoords;\n         placeBlocks(state);\n         state.currentPieceState = \"FROZEN\";\n      },\n      showGhostPiece(state) {\n         if (!state.gameRunning) {\n            return;\n         }\n         placeBlocks(state, true);\n      },\n      shiftLeft(state) {\n         removeLastState(state);\n         state.xPos -= 1;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.xPos += 1;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentPieceState = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      shiftRight(state) {\n         removeLastState(state);\n         state.xPos += 1;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.xPos -= 1;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentPieceState = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      checkIfGameWon(state) {\n         if (state.totalLinesCleared >= 4) {\n            console.log(\"won\");\n            state.isGameWon = true;\n            state.gameRunning = false;\n            state.displayMessage = \"YOU WON\";\n         }\n      },\n      holdPiece(state) {\n         if (state.rotated === true) {\n            return;\n         }\n         state.rotated = true;\n\n         removeLastState(state);\n         if (state.heldPiece === null) {\n            state.heldPiece = state.currentShape;\n            state.currentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n         } else {\n            const placeHolder = state.currentShape;\n            state.currentShape = state.heldPiece;\n            state.heldPiece = placeHolder;\n         }\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         placeBlocks(state);\n         state.currentPieceState = \"FALLING\"\n      },\n\n      // setWinCondition(state,condition){\n      //   state.winCondition = condition;\n      // }\n   },\n});\n\nexport const gameStateActions = gameStateSlice.actions;\n\nexport default gameStateSlice.reducer;\n","import styles from \"./Block.module.css\";\n\nconst Block = (props) => {\n  const color = props.color;\n  return <td className={`${styles.block}  ${styles[color]}`}></td>;\n};\n\nexport default Block;\n","import { useSelector } from \"react-redux\";\n\nconst ReadyGo = () => {\n   const gameState = useSelector((state) => state.gameState);\n   return (\n      <div\n         style={{\n            position: \"absolute\",\n            color: \"yellow\",\n            marginTop: 200,\n            fontSize:\"300%\",\n            flexDirection:\"column\",\n         }}\n      >\n         {gameState.displayMessage}\n      </div>\n   );\n};\n\nexport default ReadyGo;\n","import { useSelector } from \"react-redux\";\n\nimport styles from \"./Grid.module.css\";\nimport Block from \"./Block\";\nimport ReadyGo from \"./ReadyGo\";\n\nconst Grid = () => {\n   const gameState = useSelector((state) => state.gameState);\n\n   const grid = gameState.grid.slice(1).map((row, y_pos) => {\n      return (\n         <tr key={y_pos}>\n            {row.map((color, x_pos) => {\n               return <Block color={color} key={x_pos} />;\n            })}\n         </tr>\n      );\n   });\n\n   return (\n      <table className={styles.grid}>\n         <tbody>{grid}</tbody>\n         <ReadyGo></ReadyGo>\n      </table>\n   );\n};\n\nexport default Grid;\n","import Block from \"./Block\";\nimport { TETRIMINOS } from \"./Tetrimino\";\n\nconst PieceQueuePiece = (props) => {\n  const convertToPiece = (row, yPos) => {\n    return (\n      <tr key={yPos}>\n        {row.map((color, xPos) => {\n          if (color === 0) {\n            return <Block key = {xPos} color={null} />;\n          } else {\n            return <Block color={props.color} key={xPos} />;\n          }\n        })}\n      </tr>\n    );\n  };\n  let grid = TETRIMINOS[props.color][0].map(convertToPiece);\n\n  return (\n    <li>\n      <table>\n        <tbody>{grid}</tbody>\n      </table>\n    </li>\n  );\n};\n\nexport default PieceQueuePiece;\n","import PieceQueuePiece from \"./PieceQueuePiece\";\nimport styles from './PieceQueue.module.css'\nimport {pieceQueue} from '../../store/GameState'\nimport { useSelector } from \"react-redux\";\n\nconst PieceQueue= (props) =>{\n    const queueChanged= useSelector(state=>state.gameState.heldPiece)\n    let i = 0\n    let pieces = []\n    if (pieceQueue.isEmpty){\n        return <ul className = {styles.pieceQueue}></ul>\n    }\n\n    for (let pieceColor in pieceQueue.elements){\n        pieces.push(<PieceQueuePiece key = {i++} color = {pieceQueue.elements[pieceColor]}/>)\n    }\n    return <ul className = {styles.pieceQueue}>{pieces}</ul>\n}\n\nexport default PieceQueue;","import styles from \"./HeldBlock.module.css\";\n\nimport { TETRIMINOS } from \"./Tetrimino\";\nimport { useSelector } from \"react-redux\";\nimport Block from \"./Block\";\n\nconst HeldBlock = () => {\n   const gameState = useSelector((state) => state.gameState);\n   if (!gameState.heldPiece) {\n      return (\n         <div className={styles.heldBlock}>\n            <table>\n               <tbody>\n                  <tr>\n                     <Block />\n                     <Block />\n                     <Block />\n                     <Block />\n                  </tr>\n                  <tr>\n                     <Block />\n                     <Block />\n                     <Block />\n                     <Block />\n                  </tr>\n                  <tr>\n                     <Block />\n                     <Block />\n                     <Block />\n                     <Block />\n                  </tr>\n               </tbody>\n            </table>\n         </div>\n      );\n   }\n\n   const convertToPiece = (row, yPos) => {\n      return (\n         <tr key={yPos}>\n            {row.map((color, xPos) => {\n               if (color === 0) {\n                  return <Block key={xPos} color={null} />;\n               } else {\n                  return <Block color={gameState.heldPiece} key={xPos} />;\n               }\n            })}\n         </tr>\n      );\n   };\n\n   let grid = TETRIMINOS[gameState.heldPiece][0].map(convertToPiece);\n   return (\n      <div className={styles.heldBlock}>\n         <table>\n            <div className={styles.title}>Held Piece</div>\n            <tbody>{grid}</tbody>\n         </table>\n      </div>\n   );\n};\n\nexport default HeldBlock;\n","export let keyIsPressed = {};\nexport let keyIsShifted = {};\nexport let keyIsDisabled = {};\nexport let keyShiftCounter = {};\n\nconst KeyControls = () => {\n  window.addEventListener(\"keydown\", (event) => {\n    keyIsPressed[event.key] = true\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    if (event.key === \" \") {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    if (event.key === \"ArrowDown\") {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    if (event.key === \"ArrowUp\") {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  });\n  window.addEventListener(\"keyup\", (event) => {\n    keyShiftCounter[event.key] = 0\n    keyIsPressed[event.key] = false\n    keyIsDisabled[event.key] = false;\n  });\n};\n\nexport default KeyControls;\n","import  styles  from \"./HowToPlay.module.css\";\n\nconst HowToPlay = () => {\n  return (\n    <div className={styles.howToPlay}>\n      <ul>\n        <li>esc = start game</li>\n        <li>q = rotate counter clockwise</li>\n        <li>w = rotate clockwise</li>\n        <li>tab = hold</li>\n        <li>spacebar = hard drop</li>\n        <li>use arrows to move</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default HowToPlay;\n","import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport styles from './StopWatch.module.css'\n\nconst StopWatch = () => {\n   const gameRunning = useSelector((state) => state.gameState.gameRunning);\n   const [miliseconds, setMiliseconds] = useState(0);\n   const [seconds, setSeconds] = useState(0);\n   const [minutes, setMinutes] = useState(0);\n\n   useEffect(() => {\n      let incrementInterval = null;\n      if (gameRunning) {\n        setMiliseconds(() => 0)\n        setSeconds(() => 0)\n        setMinutes(() => 0)\n         incrementInterval = setInterval(() => {\n            setMiliseconds((miliseconds) => miliseconds + 1);\n         }, 100);\n      }\n      return () => {\n         clearInterval(incrementInterval);\n      };\n   }, [gameRunning]);\n\n   if (miliseconds === 10) {\n      setSeconds(seconds + 1);\n      setMiliseconds(0);\n   }\n   if (seconds === 60) {\n      setMinutes(minutes + 1);\n      setSeconds(0);\n   }\n\n   if (minutes) {\n      return <div className={styles.stopWatch}>{`Time ${minutes}:${seconds}:${miliseconds}`}</div>;\n   } else if (seconds) {\n      return <div className={styles.stopWatch}>{`Time ${seconds}:${miliseconds}`}</div>;\n   } else if (miliseconds) {\n      return <div className={styles.stopWatch}>{`Time 0:${miliseconds}`}</div>;\n   }\n};\n\nexport default StopWatch;\n","import { Fragment, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { gameStateActions } from \"../../store/GameState\";\nimport Grid from \"./Grid\";\nimport PieceQueue from \"./PieceQueue\";\nimport HeldBlock from \"./HeldBlock\";\n\nimport { keyShiftCounter, keyIsPressed, keyIsDisabled } from \"../../modules/KeyControls\";\nimport KeyControls from \"../../modules/KeyControls\";\nimport HowToPlay from \"./HowToPlay\";\nimport StopWatch from \"./StopWatch\";\n\nlet gameLocked = false;\n\nconst Game = () => {\n   const dispatch = useDispatch();\n   const gameRunning = useSelector((state) => state.gameState.gameRunning);\n   const currentPieceState = useSelector((state) => state.gameState.currentPieceState);\n   const displayMessage = useSelector((state) => state.gameState.displayMessage);\n   const controls = useSelector((state)=>state.controls)\n\n   const [startGame, setStartGame] = useState(false);\n\n   const gameLoop = () => {\n      if (gameRunning) {\n         if (currentPieceState === \"FROZEN\") {\n            dispatch(gameStateActions.clearLines());\n            dispatch(gameStateActions.checkIfGameWon());\n            dispatch(gameStateActions.getNewPiece());\n            dispatch(gameStateActions.getGhostCoords());\n            dispatch(gameStateActions.showGhostPiece());\n         } else {\n            dispatch(gameStateActions.dropPiece());\n            dispatch(gameStateActions.getGhostCoords());\n            dispatch(gameStateActions.showGhostPiece());\n         }\n      }\n   };\n   useEffect(() => {\n      const dropPieceInterval = window.setInterval(() => {\n         gameLoop();\n      }, 300);\n      const handleInputInterval = window.setInterval(() => {\n         keyHandler();\n      }, 1);\n      const shiftInputInterval = window.setInterval(() => {\n         keyShiftHandler();\n      }, 1);\n\n      return () => {\n         window.clearInterval(dropPieceInterval);\n         window.clearInterval(handleInputInterval);\n         window.clearInterval(shiftInputInterval);\n      };\n   });\n   useEffect(() => {\n      if (startGame) {\n         const interval = window.setInterval(() => {\n            dispatch(gameStateActions.gettingReady());\n         }, 500);\n         return () => {\n            window.clearInterval(interval);\n         };\n      }\n   }, [displayMessage, dispatch, startGame]);\n\n   const keyShiftHandler = () => {\n      if (!gameRunning || gameLocked) {\n         return;\n      }\n      for (let key in keyShiftCounter) {\n         if (keyShiftCounter[key]) {\n            keyShiftCounter[key] += 1;\n         }\n      }\n      if (\n         keyIsPressed[controls.softDrop] &&\n         keyIsDisabled[controls.softDrop] &&\n         keyShiftCounter[controls.softDrop] > 40\n      ) {\n         dispatch(gameStateActions.dropPiece());\n         keyIsDisabled[controls.softDrop] = true;\n         keyShiftCounter[controls.softDrop] = 30;\n      }\n      if (\n         keyIsPressed[controls.moveRight] &&\n         keyIsDisabled[controls.moveRight] &&\n         keyShiftCounter[controls.moveRight] > 40\n      ) {\n         dispatch(gameStateActions.shiftRight());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.moveRight] = true;\n         keyShiftCounter[controls.moveRight] = 30;\n      }\n      if (\n         keyIsPressed[controls.moveLeft] &&\n         keyIsDisabled[controls.moveLeft] &&\n         keyShiftCounter[controls.moveLeft] > 40\n      ) {\n         dispatch(gameStateActions.shiftLeft());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.moveLeft] = true;\n         keyShiftCounter[controls.moveLeft] = 30;\n      }\n   };\n   const keyHandler = () => {\n      if (!gameRunning || gameLocked) {\n         return;\n      }\n      if (keyIsPressed[controls.rotateLeft] && !keyIsDisabled[controls.rotateLeft]) {\n         dispatch(gameStateActions.rotatePiece(true));\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.rotateLeft] = true;\n      }\n      if (keyIsPressed[controls.rotateRight] && !keyIsDisabled[controls.rotateRight]) {\n         dispatch(gameStateActions.rotatePiece(false));\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.rotateRight] = true;\n      }\n      if (keyIsPressed[controls.hardDrop] && !keyIsDisabled[controls.hardDrop]) {\n         gameLocked = true;\n         dispatch(gameStateActions.hardDrop());\n         keyIsDisabled[controls.hardDrop] = true;\n         setTimeout(() => {\n            gameLocked = false;\n         }, 350);\n      }\n      if (keyIsPressed[controls.hold] && !keyIsDisabled[controls.hold]) {\n         dispatch(gameStateActions.holdPiece());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.hold] = true;\n      }\n      if (keyIsPressed[controls.softDrop] && !keyIsDisabled[controls.softDrop]) {\n         keyShiftCounter[controls.softDrop] = 1;\n         dispatch(gameStateActions.dropPiece());\n         keyIsDisabled[controls.softDrop] = true;\n      }\n      if (keyIsPressed[controls.moveRight] && !keyIsDisabled[controls.moveRight]) {\n         keyShiftCounter[controls.moveRight] = 1;\n         dispatch(gameStateActions.shiftRight());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.moveRight] = true;\n      }\n      if (keyIsPressed[controls.moveLeft] && !keyIsDisabled[controls.moveLeft]) {\n         keyShiftCounter[controls.moveLeft] = 1;\n         dispatch(gameStateActions.shiftLeft());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.moveLeft] = true;\n      }\n   };\n   document.onkeydown = (keycode) => {\n      if (keycode.key === controls.newGame) {\n         setStartGame(true);\n         dispatch(gameStateActions.newGame());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n      }\n   };\n   return (\n      <Fragment>\n         <KeyControls />\n         <div\n            style={{\n               display: \"flex\",\n               flexWrap:\"nowrap\"\n            }}\n         >\n            <HeldBlock />\n            <Grid></Grid>\n            <PieceQueue />\n         </div>\n         <StopWatch></StopWatch>\n         <HowToPlay></HowToPlay>\n      </Fragment>\n   );\n};\n\nexport default Game;\n","import { Fragment } from \"react\";\nimport Game from \"../Components/GameUI/Game\";\n\nconst SinglePlayer = () => {\n   return (\n      <Fragment>\n         <h1>Ditris</h1>\n         <Game></Game>\n      </Fragment>\n   );\n};\n\nexport default SinglePlayer;\n","import { signInAnonymously, signOut } from \"firebase/auth\";\nimport { child, remove, set } from \"firebase/database\";\nimport { memo, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { auth, onlineUsersRef } from \"../../modules/firebase-config\";\nimport { myRoomRef } from \"../../store/GameState\";\n\n\nconst Login = () => {\n   const isLoggedIn = useSelector((state) => state.userInfo.isLoggedIn);\n   const [usernameInput, setUsernameInput] = useState(\"\");\n   const loginHandler = async (event) => {\n      event.preventDefault();\n      await signInAnonymously(auth);\n      set(child(onlineUsersRef, auth.currentUser.uid), {username:usernameInput,inRoom:false});\n      setUsernameInput(\"\");\n\n   };\n\n   const logoutHandler = async () => {\n      remove(child(onlineUsersRef, auth.currentUser.uid));\n      if(myRoomRef){\n         remove(myRoomRef)\n      }\n      \n      signOut(auth);\n   };\n\n   if (!isLoggedIn) {\n      return (\n         <form onSubmit={loginHandler}>\n            <label id=\"name\">Username: </label>\n            <input\n               id=\"name\"\n               value={usernameInput}\n               onChange={(event) => {\n                  setUsernameInput(event.target.value);\n               }}\n            ></input>\n            <button>Login</button>\n         </form>\n      );\n   } else {\n      return <button onClick={logoutHandler}>Logout</button>;\n   }\n};\nexport default memo(Login);\n","import { child } from \"@firebase/database\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { onlineUsersRef } from \"../modules/firebase-config\";\n\nexport let opponentRef = null;\nconst userInfoInitialState = {\n   isLoggedIn: false,\n   roomStatus: null, //\"looking for room\" \"waiting\" \"in room\"\n\n   otherUsers: [], //other users that aren't you\n   roomKey: null, //key for the room you are in\n   opponentName: \"\", // name of your opponent, empty if not in room\n   opponentID: null, // id of your oppponent, null opponent hasn't been chosen\n   invitationKeys: [], // keys of rooms that you are invited to\n\n   grid: [], // grid of game from opponent\n\n   displayText:\"\"\n};\n\nconst userInfoSlice = createSlice({\n   name: \"UserInfo\",\n   initialState: userInfoInitialState,\n   reducers: {\n      reset(state) {\n         state.roomStatus = \"looking for room\";\n         state.otherUsers = [];\n         state.roomKey = null;\n         state.opponentName = \"\";\n         state.opponentID = null;\n         state.invitationKeys = [];\n         state.grid = [];\n         state.myName = \"\"\n         opponentRef = null;\n\n      },\n      login(state) {\n         state.isLoggedIn = true;\n      },\n      logout(state) {\n         state.isLoggedIn = false;\n      },\n      setOtherUsers(state, users) {\n         state.otherUsers = users.payload;\n      },\n      setRoomKey(state, key) {\n         state.roomKey = key.payload;\n      },\n      setRoomStatus(state, newStatus) {\n         state.roomStatus = newStatus.payload;\n      },\n      setOpponentName(state, opponentName) {\n\n         state.opponentName = opponentName.payload;\n      },\n      setOpponentid(state, id) {\n         if (id.payload) {\n            opponentRef = child(onlineUsersRef, id.payload);\n         }\n         state.opponentID = id.payload;\n      },\n      setInvitiationKeys(state, keysList) {\n         state.invitationKeys = keysList.payload;\n      },\n      setGrid(state, grid) {\n         state.grid = grid;\n      },\n      setDisplayText(state,text){\n         state.displayText = text.payload\n      }\n   },\n});\n\nexport const userInfoActions = userInfoSlice.actions;\n\nexport default userInfoSlice.reducer;\n","import { off, push, set } from \"firebase/database\";\nimport { useDispatch } from \"react-redux\";\nimport { auth,  roomsRef } from \"../../modules/firebase-config\";\nimport { userInfoActions } from \"../../store/UserInfo\";\n\nconst OtherUser = ({ username, uid }) => {\n   const dispatch = useDispatch();\n   const pushRoomsRef = push(roomsRef);\n   const createRoomHandler = async () => {\n      off(roomsRef)\n      await set(pushRoomsRef, { player1: auth.currentUser.uid, player2: uid, accepted: false });\n      dispatch(userInfoActions.setRoomStatus(\"waiting\"));\n      dispatch(userInfoActions.setRoomKey(pushRoomsRef.key));\n      dispatch(userInfoActions.setOpponentName(username));\n      dispatch(userInfoActions.setOpponentid(uid));\n   };\n   return (\n      <li>\n         <button onClick={createRoomHandler}>{username}</button>\n      </li>\n   );\n};\n\nexport default OtherUser;\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport OtherUser from \"./OtherUser\";\n\nconst OtherUsers = () => {\n   const otherUsersList = useSelector((state) => state.userInfo.otherUsers);\n   const otherUserListDisplay = otherUsersList\n      ? otherUsersList.map((pair, index) => (\n           <OtherUser key={index} username={pair[1].username} uid={pair[0]}></OtherUser>\n        ))\n      : null;\n   if (otherUserListDisplay) {\n      return <ul>{otherUserListDisplay}</ul>;\n   }\n};\nexport default memo(OtherUsers);\n","import {  memo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Modal from \"../UI/Modal\";\n\n\nconst WaitingMessage = ({ cancelRoomHandler }) => {\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n   const roomKey = useSelector((state) => state.userInfo.roomKey);\n\n   return (\n      <Modal>\n         Waiting for {opponentName} to join\n         <button onClick={cancelRoomHandler}>Cancel</button>\n      </Modal>\n   );\n};\n\nexport default memo(WaitingMessage);\n","import { child, off, set } from \"@firebase/database\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nimport { TETRIMINOS } from \"../Components/GameUI/Tetrimino\";\nimport { auth, getUsernameFromuid } from \"../modules/firebase-config\";\n\nimport Queue from \"../modules/piece-queue\";\n\nlet pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\nconst getRandomPiece = () => {\n   if (pieceArray.length === 0) {\n      pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n   }\n   const value = Math.floor(pieceArray.length * Math.random());\n   return pieceArray.splice(value, 1);\n};\n\nconst getCoords = (type, rotatePos, xPos, yPos) =>\n   TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n      row.map((col, colPos) => {\n         if (col) {\n            return { x: xPos + colPos, y: yPos + rowPos };\n         }\n         return null;\n      })\n   );\nconst rotatePiece = (isCounterClockwise, state) => {\n   let { rotatePos } = state;\n   if (isCounterClockwise) {\n      if (rotatePos === 0) {\n         return 3;\n      } else {\n         return rotatePos - 1;\n      }\n   } else {\n      if (rotatePos === 3) {\n         return 0;\n      } else {\n         return rotatePos + 1;\n      }\n   }\n};\n\nconst convertMappingToCoords = (state, mapping, forGhost = false) => {\n   let coordArray = [];\n   for (const array of mapping) {\n      for (const coord of array) {\n         if (coord) {\n            if (coordIsValid(state, coord, forGhost)) {\n               coordArray.push(coord);\n            }\n         }\n      }\n   }\n   return coordArray;\n};\n\nconst gameStateInitialState = {\n   playerNumber: null,\n\n   gameRunning: false,\n   myCurrentShape: null,\n   myCurrentCoords: [],\n   myGhostCoords: [],\n   myPieceQueue: null,\n   myHeldPiece: null,\n   myLinesCleared: 0,\n\n   opponentPieceQueue: [],\n   opponentHeldPiece: null,\n   opponentLinesCleared: 0,\n\n   currentGameStatus: \"NONE\",\n   rotatePos: 0,\n   xPos: 3,\n   yPos: 0,\n\n   grid: [\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n   ],\n\n   rotated: false,\n   displayMessage: \"\",\n\n   myTurn: null,\n   linesToClear:10,\n};\n\nexport let myRoomRef = null;\n\nexport let pieceQueue = new Queue();\n\nconst removeLastState = (state) => {\n   for (const coord of state.myCurrentCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst removeLastGhostPiece = (state) => {\n   for (const coord of state.myGhostCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst placeBlocks = (state, forGhost = false) => {\n   if (forGhost) {\n      const colorName = state.myCurrentShape + \"ghost\";\n      for (const coord of state.myGhostCoords) {\n         state.grid[coord.y][coord.x] = colorName;\n         for (const currentCoord of state.myCurrentCoords) {\n            if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n               state.grid[coord.y][coord.x] = state.myCurrentShape;\n            }\n         }\n      }\n   } else {\n      for (const coord of state.myCurrentCoords) {\n         state.grid[coord.y][coord.x] = state.myCurrentShape;\n      }\n   }\n};\n\nconst coordIsValid = (state, coord, forGhost = false) => {\n   if (coord) {\n      if (coord.y <= 20 && coord.x >= 0 && coord.x <= 9) {\n         for (let currentCoord of state.myCurrentCoords) {\n            if (forGhost) {\n               if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n                  return true;\n               }\n            }\n         }\n         if (state.grid[coord.y][coord.x].length > 1) {\n            return true;\n         }\n      }\n   }\n   return false;\n};\n\nconst gameStateSlice2 = createSlice({\n   name: \"gameState2\",\n   initialState: gameStateInitialState,\n   reducers: {\n      reset(state) {\n         state.playerNumber = null;\n\n         state.gameRunning = false;\n         state.myCurrentShape = null;\n         state.myCurrentCoords = [];\n         state.myGhostCoords = [];\n         state.myPieceQueue = null;\n         state.myHeldPiece = null;\n         state.myLinesCleared = 0;\n\n         state.opponentPieceQueue = [];\n         state.opponentHeldPiece = null;\n         state.opponentLinesCleared = 0;\n\n         state.currentGameStatus = \"NONE\";\n         state.rotatePos = 0;\n         state.xPos = 3;\n         state.yPos = 0;\n\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n\n         state.rotated = false;\n         state.displayMessage = \"\";\n\n         state.myTurn = null;\n         state.linesToClear =10;\n         myRoomRef = null;\n      },\n      setGrid(state, grid) {\n         state.grid = grid.payload;\n      },\n      sendGrid(state) {\n         set(child(myRoomRef, \"grid\"), state.grid);\n      },\n      gettingReady(state) {\n         state.myCurrentShape = null;\n         state.myCurrentCoords = [];\n         state.myGhostCoords = [];\n         state.myPieceQueue = null;\n         state.myHeldPiece = null;\n         state.myLinesCleared = 0;\n         state.currentGameStatus = \"NONE\";\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n         pieceQueue = new Queue();\n\n         set(child(myRoomRef, `player${state.playerNumber}GameInfo`), {\n            gameQueue: pieceQueue.elements,\n            linesCleared: state.myLinesCleared,\n         });\n      },\n      newGame(state) {\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n\n         pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n         for (let i = 0; i < 5; i++) {\n            pieceQueue.enqueue(...getRandomPiece());\n         }\n         set(child(myRoomRef, `player${state.playerNumber}GameInfo`), {\n            gameQueue: pieceQueue.elements,\n            linesCleared: state.myLinesCleared,\n         });\n      },\n      setOpponentInfo(state, action) {\n         state.opponentPieceQueue = action.payload.opponentPieceQueue;\n         state.opponentLinesCleared = action.payload.opponentLinesCleared;\n      },\n      clearLines(state) {\n         let newGrid = [];\n         let linesCleared = 0;\n         for (const row of state.grid) {\n            if (row.every((blockType) => blockType !== \"None\")) {\n               state.myLinesCleared += 1;\n               linesCleared += 1;\n            } else {\n               newGrid.push(row);\n            }\n         }\n         for (let i = 0; i < linesCleared; i++) {\n            newGrid.unshift([\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n            ]);\n         }\n         state.grid = newGrid;\n         set(child(myRoomRef, \"grid\"), state.grid);\n         off(child(myRoomRef, `player${state.playerNumber}GameInfo/linesCleared`))\n         set(\n            child(myRoomRef, `player${state.playerNumber}GameInfo/linesCleared`),\n            state.myLinesCleared\n         );\n      },\n      placeCurrentPiece(state) {\n         placeBlocks(state);\n         set(child(myRoomRef, \"grid\"), state.grid);\n      },\n      unfreeze(state) {\n         state.currentGameStatus = \"FALLING\";\n      },\n      getNewPiece(state, opponentName) {\n         state.myGhostCoords = [];\n         state.myCurrentShape = pieceQueue.dequeue();\n         pieceQueue.enqueue(...getRandomPiece());\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.grid = [\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            ];\n            state.myCurrentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n            off(child(myRoomRef, `player${state.playerNumber === 1 ? 2 : 1}GameInfo`));\n            set(\n               child(myRoomRef, `player${state.playerNumber === 1 ? 2 : 1}GameInfo/linesCleared`),\n               state.opponentLinesCleared - 1\n            );\n            off(child(myRoomRef, \"displayMessage\"));\n            state.displayMessage = `${opponentName.payload} CAUSED OVERFLOW`;\n            set(child(myRoomRef, \"displayMessage\"), `${opponentName.payload} CAUSED OVERFLOW`);\n            setTimeout(() => {\n               set(child(myRoomRef, \"displayMessage\"), \"in game\");\n            }, 1000);\n\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         }\n         placeBlocks(state);\n         set(\n            child(myRoomRef, `player${state.playerNumber}GameInfo/gameQueue`),\n            pieceQueue.elements\n         );\n\n         state.currentGameStatus = \"FALLING\";\n      },\n      rotatePiece(state, action) {\n         const originalRotatePos = state.rotatePos;\n         state.rotatePos = rotatePiece(action.payload, {\n            rotatePos: state.rotatePos,\n         });\n         removeLastState(state);\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.rotatePos = originalRotatePos;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      dropPiece(state) {\n         if (state.gameRunning) {\n            if (state.currentGameStatus === \"LANDING\") {\n               state.currentGameStatus = \"FROZEN\";\n               return;\n            }\n            removeLastState(state);\n            state.yPos += 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n            if (state.myCurrentCoords.length < 4) {\n               state.yPos -= 1;\n               state.myCurrentCoords = convertMappingToCoords(\n                  state,\n                  getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n               );\n               state.currentGameStatus = \"LANDING\";\n            } else {\n               state.currentGameStatus = \"FALLING\";\n            }\n            placeBlocks(state);\n         } else {\n         }\n      },\n      getGhostCoords(state) {\n         removeLastGhostPiece(state);\n         state.myGhostCoords = [];\n         for (let coord of state.myCurrentCoords) {\n            state.myGhostCoords.push({ x: coord.x, y: coord.y });\n         }\n         let ghostYPos = state.yPos;\n         while (state.myGhostCoords.length === 4) {\n            ghostYPos += 1;\n            state.myGhostCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, ghostYPos),\n               true\n            );\n         }\n         ghostYPos -= 1;\n         state.myGhostCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, ghostYPos),\n            true\n         );\n      },\n      hardDrop(state) {\n         removeLastState(state);\n         state.myCurrentCoords = state.myGhostCoords;\n         placeBlocks(state);\n         state.currentGameStatus = \"FROZEN\";\n      },\n      showGhostPiece(state) {\n         placeBlocks(state, true);\n         set(child(myRoomRef, \"grid\"), state.grid);\n      },\n      shiftLeft(state) {\n         removeLastState(state);\n         state.xPos -= 1;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.xPos += 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      shiftRight(state) {\n         removeLastState(state);\n         state.xPos += 1;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.xPos -= 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      checkIfGameWon(state) {\n         if (state.myLinesCleared >= state.linesToClear) {\n            state.gameRunning = false;\n            state.displayMessage = `PLAYER ${state.playerNumber} WON`;\n            getUsernameFromuid(auth.currentUser.uid).then((name) => {\n               set(child(myRoomRef, \"displayMessage\"), `${name} WON`);\n            });\n         } else {\n         }\n      },\n      holdPiece(state) {\n         if (state.rotated === true) {\n            return;\n         }\n         state.rotated = true;\n\n         removeLastState(state);\n         if (state.heldPiece === null) {\n            state.heldPiece = state.currentShape;\n            state.currentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n         } else {\n            const placeHolder = state.currentShape;\n            state.currentShape = state.heldPiece;\n            state.heldPiece = placeHolder;\n         }\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         placeBlocks(state);\n         state.currentPieceState = \"FALLING\";\n      },\n      setMultiplayer(state, action) {\n         state.playerNumber = action.payload.playerNumber;\n         myRoomRef = action.payload.roomRef;\n      },\n      setDisplayMessage(state, displayMessage) {\n         state.displayMessage = displayMessage.payload;\n         if (state.displayMessage === \"in game\") {\n            state.gameRunning = true;\n         }\n         if (state.displayMessage.includes(\"WON\")) {\n            state.gameRunning = false;\n            set(child(myRoomRef, \"turn\"), null);\n         }\n      },\n      setMyTurn(state, bool) {\n         state.myTurn = bool.payload;\n      },\n      setMyLinesCleared(state, lines) {\n         state.myLinesCleared = lines.payload;\n      },\n      setLinesToClear(state,lines){\n         state.linesToClear = lines.payload\n      }\n   },\n});\n\nexport const gameStateActions2 = gameStateSlice2.actions;\n\nexport default gameStateSlice2.reducer;\n","import { child, set } from \"@firebase/database\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { auth, getUsernameFromuid, myRoomRef, onlineUsersRef, roomsRef } from \"../../modules/firebase-config\";\nimport { gameStateActions2 } from \"../../store/GameState2\";\nimport { userInfoActions } from \"../../store/UserInfo\";\n\nconst InviteNotfication = ({ roomKey, opponentuid }) => {\n   const dispatch = useDispatch();\n   const [opponentName, setOpponentName] = useState(null);\n   const getOpponentName = async () => {\n      setOpponentName(await getUsernameFromuid(opponentuid));\n   };\n\n   const acceptInvite = async() => {\n      await set(child(roomsRef, roomKey + \"/accepted\"), true);\n      await set(child(roomsRef,roomKey + \"/displayMessage\"),\"\")\n      dispatch(userInfoActions.setOpponentid(opponentuid))\n      dispatch(userInfoActions.setRoomStatus(\"in room\"));\n      dispatch(userInfoActions.setRoomKey(roomKey))\n      dispatch(userInfoActions.setOpponentName(opponentName))\n      dispatch(\n         gameStateActions2.setMultiplayer({ playerNumber: 2, roomRef: child(roomsRef, roomKey) })\n      );\n      await set(child(onlineUsersRef,auth.currentUser.uid+\"/inRoom\"),true)\n   };\n\n   getOpponentName();\n   return <button onClick={acceptInvite}>{opponentName}</button>;\n};\n\nexport default InviteNotfication;\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport InviteNotfication from \"./InviteNotifcation\";\n\nconst InviteNotifications = () => {\n   let invitations = useSelector((state) => state.userInfo.invitationKeys);\n   if (invitations.length!==0) {\n      invitations = invitations.map(({ roomKey, opponentuid }, index) => (\n         <InviteNotfication\n            key={index}\n            roomKey={roomKey}\n            opponentuid={opponentuid}\n         ></InviteNotfication>\n      ));\n   }\n   return <div>{invitations}</div>;\n};\n\nexport default memo(InviteNotifications);\n","const LeaveRoom = ({leaveRoomHandler}) => {\n   return <button onClick={leaveRoomHandler}>Leave Room</button>;\n};\n\nexport default LeaveRoom;\n","import styles from \"./Block.module.css\";\n\nconst Block = (props) => {\n  const color = props.color;\n  return <td className={`${styles.block}  ${styles[color]}`}></td>;\n};\n\nexport default Block;\n","import { useSelector } from \"react-redux\";\n\nconst ReadyGo = () => {\n   const displayMessage = useSelector((state) => state.gameState2.displayMessage);\n   if (displayMessage === \"in game\") {\n      return;\n   } else {\n      return (\n         <div\n         style={{\n            position: \"absolute\",\n            color: \"yellow\",\n            marginTop: 200,\n            fontSize:\"100%\",\n            flexDirection:\"column\",\n         }}\n      >\n            {displayMessage}\n         </div>\n      );\n   }\n};\n\nexport default ReadyGo;\n","import { useSelector, useDispatch } from \"react-redux\";\n\nimport styles from \"./Grid.module.css\";\nimport Block from \"./Block\";\nimport ReadyGo from \"./ReadyGo\";\n\nconst Grid = () => {\n   const gameState = useSelector((state) => state.gameState2);\n\n   const grid = gameState.grid.slice(1).map((row, y_pos) => {\n      return (\n         <tr key={y_pos}>\n            {row.map((color, x_pos) => {\n               return <Block color={color} key={x_pos} />;\n            })}\n         </tr>\n      );\n   });\n\n   return (\n      <table className={styles.grid}>\n         <tbody>{grid}</tbody>\n         <ReadyGo></ReadyGo>\n      </table>\n   );\n};\n\nexport default Grid;\n","export const TETRIMINOS = {\n  I: [\n    //I\n    [\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  ],\n\n  T: [\n    //T\n    [\n      [0, 1, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  L: [\n    //L\n    [\n      [0, 0, 1],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  J: [\n    //J\n    [\n      [1, 0, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  ],\n  Z: [\n    //Z\n    [\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  ],\n  S: [\n    //S\n    [\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  O: [\n    //O\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n  ],\n};\n\nexport const getRandomPiece = () => {\n  const value = Math.round(6 * Math.random());\n  switch (value) {\n    case 0:\n      return \"I\";\n    case 1:\n      return \"T\";\n    case 2:\n      return \"L\";\n    case 3:\n      return \"J\";\n    case 4:\n      return \"Z\";\n    case 5:\n      return \"S\";\n    case 6:\n      return \"O\";\n  }\n};\n\nexport const getPiece = (type, rotatePos, xPos, yPos) =>\n  TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n    row.map((col, colPos) => {\n      if (col) {\n        return { x: xPos + colPos, y: yPos + rowPos };\n      }\n      return null;\n    })\n  );\n\nexport const rotatePiece = (isCounterClockwise, { type, rotatePos }) => {\n  return isCounterClockwise\n    ? rotatePos === 0\n      ? TETRIMINOS[type].length - 1\n      : rotatePos - 1\n    : rotatePos === TETRIMINOS[type].length - 1\n    ? 0\n    : rotatePos + 1;\n};\n\nexport const convertMappingToCoords = (mapping) => {\n  let coordArray = [];\n  for (const array of mapping) {\n    for (const coord of array) {\n      if (coord) {\n        coordArray.push(coord);\n      }\n    }\n  }\n  return coordArray;\n};\n","import Block from \"./Block\";\nimport { TETRIMINOS } from \"./Tetrimino\";\n\nconst PieceQueuePiece = (props) => {\n  const convertToPiece = (row, yPos) => {\n    return (\n      <tr key={yPos}>\n        {row.map((color, xPos) => {\n          if (color === 0) {\n            return <Block key = {xPos} color={null} />;\n          } else {\n            return <Block color={props.color} key={xPos} />;\n          }\n        })}\n      </tr>\n    );\n  };\n  let grid = TETRIMINOS[props.color][0].map(convertToPiece);\n\n  return (\n    <li>\n      <table>\n        <tbody>{grid}</tbody>\n      </table>\n    </li>\n  );\n};\n\nexport default PieceQueuePiece;\n","import PieceQueuePiece from \"./PieceQueuePiece\";\nimport styles from \"./PieceQueue.module.css\";\nimport { pieceQueue } from \"../../../store/GameState2\";\nimport { useSelector } from \"react-redux\";\nimport { Fragment, memo } from \"react\";\n\nconst PieceQueue = ({ player }) => {\n   const opponentPieces = useSelector((state) => state.gameState2.opponentPieceQueue);\n   const queueChanged = useSelector((state) => state.gameState2.myTurn);\n   let i = 0;\n   let pieces = [];\n   if (player === \"mine\") {\n      if (pieceQueue.isEmpty) {\n         return <ul className={styles.pieceQueueMine}></ul>;\n      }\n\n      for (let pieceColor in pieceQueue.elements) {\n         pieces.push(<PieceQueuePiece key={i++} color={pieceQueue.elements[pieceColor]} />);\n      }\n      return (\n         <Fragment>\n            <div className={styles.pieceQueueMine}>\n               <ul>{pieces}</ul>\n            </div>\n         </Fragment>\n      );\n   } else if (player === \"opponent\") {\n      if (!opponentPieces || opponentPieces.isEmpty) {\n         return <ul className={styles.pieceQueueOpponent}></ul>;\n      }\n      for (let pieceColor in opponentPieces) {\n         if (!pieceColor) {\n            continue;\n         }\n         pieces.push(<PieceQueuePiece key={i++} color={opponentPieces[pieceColor]} />);\n      }\n      return (\n         <Fragment>\n            <div className={styles.pieceQueueOpponent}>\n               <ul>{pieces}</ul>\n            </div>\n         </Fragment>\n      );\n   }\n};\n\nexport default memo(PieceQueue);\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst LineClearedCounter = ({ player }) => {\n   const opponentCounter = useSelector((state) => state.gameState2.opponentLinesCleared);\n   const myCounter = useSelector((state) => state.gameState2.myLinesCleared);\n   if (player === \"opponent\") {\n      return <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>{opponentCounter}</div>;\n   }\n   if (player === \"mine\") {\n      return <div>{myCounter}</div>;\n   }\n};\n\nexport default memo(LineClearedCounter);\n","import { memo } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst WhoseTurnText = () => {\n   const gameRunning = useSelector((state) => state.gameState2.gameRunning);\n   const myTurn = useSelector((state) => state.gameState2.myTurn);\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n   if (!gameRunning) {\n      return <div style={{ textAlign: \"center\" }}> </div>;;\n   } else if (myTurn) {\n      return <div style={{ textAlign: \"center\" }}>{`Your Turn`}</div>;\n   } else {\n      return <div style={{ textAlign: \"center\" }}>{`${opponentName}'s Turn`}</div>;\n   }\n};\nexport default memo(WhoseTurnText);\n","import { child, off, onValue, set } from \"@firebase/database\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { gameStateActions2, myRoomRef } from \"../../../store/GameState2\";\n\nconst InputForm = () => {\n   const dispatch = useDispatch();\n   const linesToClear = useSelector((state) => state.gameState2.linesToClear);\n   const [linesToClearInput, setLinesToClearInput] = useState(linesToClear);\n\n   const setLinesToClearInputChange = (event) => {\n      if (linesToClearInput <= 0) {\n         return;\n      } else {\n         setLinesToClearInput(+event.target.value);\n      }\n   };\n   const setLinesToClearHandler = () => {\n      off(child(myRoomRef, \"linesToClear\"));\n      dispatch(gameStateActions2.setLinesToClear(linesToClearInput));\n      set(child(myRoomRef, \"linesToClear\"), linesToClearInput);\n   };\n\n\n   onValue(child(myRoomRef, \"linesToClear\"),(snapshot)=>{\n    if(snapshot.exists()){\n        // setLinesToClearInput(snapshot.val())\n        dispatch(gameStateActions2.setLinesToClear(snapshot.val()))\n    }\n   });\n\n   return (\n      <div>\n         <label id=\"lines\">Lines to Clear </label>\n         <input\n            id=\"lines\"\n            type=\"number\"\n            value={linesToClearInput}\n            onChange={setLinesToClearInputChange}\n         ></input>\n         <button onClick={setLinesToClearHandler}>set</button>\n         <span> Current amount is {linesToClear}</span>\n      </div>\n   );\n};\n\nexport default InputForm;\n","import { Fragment, memo, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { gameStateActions2, myRoomRef } from \"../../store/GameState2\";\nimport { child, off, onDisconnect, onValue, set } from \"@firebase/database\";\nimport { auth, onlineUsersRef } from \"../../modules/firebase-config\";\n\nimport Grid from \"./Components/Grid\";\nimport PieceQueue from \"./Components/PieceQueue\";\nimport LineClearedCounter from \"./Components/LineClearedCounter\";\n\nimport { userInfoActions } from \"../../store/UserInfo\";\n\nimport KeyControls, {\n   keyIsDisabled,\n   keyIsPressed,\n   keyShiftCounter,\n} from \"../../modules/KeyControls\";\nimport WhoseTurnText from \"./Components/WhoseTurnText\";\nimport InputForm from \"./Components/InputForm\";\n\nlet startButtonLocked = false;\nlet controlsLocked = false;\n\nconst GameShared = () => {\n   const dispatch = useDispatch();\n\n   const controls = useSelector((state) => state.controls);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n\n   const myTurn = useSelector((state) => state.gameState2.myTurn);\n   const displayMessage = useSelector((state) => state.gameState2.displayMessage);\n   const gameRunning = useSelector((state) => state.gameState2.gameRunning);\n   const currentGameStatus = useSelector((state) => state.gameState2.currentGameStatus);\n\n   if (displayMessage.includes(\"WON\")) {\n      setTimeout(() => {\n         startButtonLocked = false;\n      }, 1000);\n   }\n   if (currentGameStatus === \"FROZEN\") {\n      console.log(\"this occured\");\n      dispatch(gameStateActions2.unfreeze());\n      dispatch(gameStateActions2.clearLines());\n      dispatch(gameStateActions2.checkIfGameWon());\n      set(child(myRoomRef, \"turn\"), playerNumber === 1 ? 2 : 1);\n   }\n\n   useEffect(() => {\n      if (gameRunning) {\n         off(child(myRoomRef, `player${playerNumber === 1 ? 2 : 1}GameInfo`));\n         dispatch(gameStateActions2.newGame());\n\n         return () => {};\n      }\n   }, [gameRunning]);\n\n   useEffect(() => {\n      if (gameRunning && myTurn) {\n         off(child(myRoomRef, \"grid\"));\n         dispatch(gameStateActions2.getNewPiece(opponentName));\n         dispatch(gameStateActions2.placeCurrentPiece(opponentName));\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         const dropPieceInterval = setInterval(() => {\n            gameLoop();\n         }, 300);\n         const handleInputInterval = setInterval(() => {\n            keyHandler();\n         }, 1);\n         const shiftInputInterval = setInterval(() => {\n            keyShiftHandler();\n         }, 1);\n         return () => {\n            clearInterval(dropPieceInterval);\n            clearInterval(handleInputInterval);\n            clearInterval(shiftInputInterval);\n         };\n      }\n   }, [myTurn, gameRunning]);\n\n   const keyShiftHandler = () => {\n      for (let key in keyShiftCounter) {\n         if (keyShiftCounter[key]) {\n            keyShiftCounter[key] += 1;\n         }\n      }\n      if (\n         keyIsPressed[controls[\"softDrop\"]] &&\n         keyIsDisabled[controls[\"softDrop\"]] &&\n         keyShiftCounter[controls[\"softDrop\"]] > 40\n      ) {\n         dispatch(gameStateActions2.dropPiece());\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n         keyShiftCounter[controls[\"softDrop\"]] = 30;\n      }\n      if (\n         keyIsPressed[controls[\"moveRight\"]] &&\n         keyIsDisabled[controls[\"moveRight\"]] &&\n         keyShiftCounter[controls[\"moveRight\"]] > 40\n      ) {\n         dispatch(gameStateActions2.shiftRight());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n         keyShiftCounter[controls[\"moveRight\"]] = 30;\n      }\n      if (\n         keyIsPressed[controls[\"moveLeft\"]] &&\n         keyIsDisabled[controls[\"moveLeft\"]] &&\n         keyShiftCounter[controls[\"moveLeft\"]] > 40\n      ) {\n         dispatch(gameStateActions2.shiftLeft());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n         keyShiftCounter[controls[\"moveLeft\"]] = 30;\n      }\n   };\n   const keyHandler = async () => {\n      if (!gameRunning || controlsLocked) {\n         return;\n      }\n      if (keyIsPressed[controls[\"rotateLeft\"]] && !keyIsDisabled[controls[\"rotateLeft\"]]) {\n         dispatch(gameStateActions2.rotatePiece(true));\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"rotateLeft\"]] = true;\n      }\n      if (keyIsPressed[controls[\"rotateRight\"]] && !keyIsDisabled[controls[\"rotateRight\"]]) {\n         dispatch(gameStateActions2.rotatePiece(false));\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"rotateRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"hardDrop\"]] && !keyIsDisabled[controls[\"hardDrop\"]]) {\n         controlsLocked = true;\n         dispatch(gameStateActions2.hardDrop());\n         dispatch(gameStateActions2.clearLines());\n         dispatch(gameStateActions2.checkIfGameWon());\n         await set(child(myRoomRef, \"turn\"), playerNumber === 1 ? 2 : 1);\n         keyIsDisabled[controls[\"hardDrop\"]] = true;\n         setTimeout(() => {\n            controlsLocked = false;\n         }, 400);\n      }\n      if (keyIsPressed[controls[\"softDrop\"]] && !keyIsDisabled[controls[\"softDrop\"]]) {\n         keyShiftCounter[controls[\"softDrop\"]] = 1;\n         dispatch(gameStateActions2.dropPiece());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveRight\"]] && !keyIsDisabled[controls[\"moveRight\"]]) {\n         keyShiftCounter[controls[\"moveRight\"]] = 1;\n         dispatch(gameStateActions2.shiftRight());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveLeft\"]] && !keyIsDisabled[controls[\"moveLeft\"]]) {\n         keyShiftCounter[controls[\"moveLeft\"]] = 1;\n         dispatch(gameStateActions2.shiftLeft());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n      }\n   };\n   const gameLoop = async () => {\n      dispatch(gameStateActions2.dropPiece());\n      dispatch(gameStateActions2.getGhostCoords());\n      dispatch(gameStateActions2.showGhostPiece());\n   };\n\n   const beginGame = async () => {\n      set(child(myRoomRef, \"displayMessage\"), \"READY\");\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      set(child(myRoomRef, \"displayMessage\"), \"GO\");\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      await set(child(myRoomRef, \"grid\"), [\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      ]);\n      await set(child(myRoomRef, \"displayMessage\"), \"in game\");\n      await set(child(myRoomRef, \"/turn\"), playerNumber === 1 ? 2 : 1);\n   };\n\n   onDisconnect(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\")).set(false);\n   if (!displayMessage.includes(\"WON\")) {\n      onValue(child(myRoomRef, \"displayMessage\"), (snapshot) => {\n         if (snapshot.exists()) {\n            dispatch(gameStateActions2.setDisplayMessage(snapshot.val()));\n            if (snapshot.val() === \"READY\") {\n               dispatch(gameStateActions2.gettingReady());\n\n               startButtonLocked = true;\n            }\n         }\n      });\n   }\n\n   //updating the game grid\n   if (gameRunning && !myTurn) {\n      onValue(child(myRoomRef, \"grid\"), (snapshot) => {\n         if (snapshot.exists()) {\n            dispatch(gameStateActions2.setGrid(snapshot.val()));\n         }\n      });\n   }\n   if (gameRunning && !myTurn) {\n      onValue(child(myRoomRef, `player${playerNumber}GameInfo/linesCleared`), (snapshot) => {\n         dispatch(gameStateActions2.setMyLinesCleared(snapshot.val()));\n      });\n   }\n   //updating the queuePieces\n   onValue(child(myRoomRef, `player${playerNumber === 1 ? 2 : 1}GameInfo`), (snapshot) => {\n      if (snapshot.exists()) {\n         dispatch(\n            gameStateActions2.setOpponentInfo({\n               opponentPieceQueue: snapshot.val().gameQueue,\n               opponentLinesCleared: snapshot.val().linesCleared,\n            })\n         );\n      }\n   });\n\n   onValue(child(myRoomRef, \"turn\"), (snapshot) => {\n      if (snapshot.exists()) {\n         dispatch(gameStateActions2.setMyTurn(snapshot.val() === playerNumber));\n      }\n   });\n\n   document.onkeydown = (keycode) => {\n      if (startButtonLocked) {\n         return;\n      }\n      if (keycode.key === controls[\"newGame\"]) {\n         startButtonLocked = true;\n         beginGame();\n         //    setStartGame(true);\n         //    dispatch(gameStateActions.newGame());\n         //    dispatch(gameStateActions.getNewPiece());\n         //    dispatch(gameStateActions.getGhostCoords());\n         //    dispatch(gameStateActions.showGhostPiece());\n      }\n   };\n   return (\n      <Fragment>\n         <KeyControls></KeyControls>\n         <WhoseTurnText />\n         <div\n            style={{\n               display: \"flex\",\n               flexWrap: \"nowrap\",\n            }}\n         >\n            <LineClearedCounter player=\"opponent\" />\n            <PieceQueue player=\"opponent\"></PieceQueue>\n            <Grid></Grid>\n            <PieceQueue player=\"mine\"></PieceQueue>\n            <LineClearedCounter player=\"mine\" />\n         </div>\n         {!gameRunning && <InputForm />}\n         <div style={{ color: \"yellow\" }}>\n            <p>How To Play:</p>\n            <p>Press esc to start.</p>\n            <p>Game starts with other person first.</p>\n            <p>After player drops piece, other player goes.</p>\n            <p>Person that causes the board to overflow loses a line point.</p>\n            <p>Play until a person clears an amount of lines.</p>\n         </div>\n      </Fragment>\n   );\n};\n\nexport default memo(GameShared);\n","import { Fragment } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"../modules/firebase-config\";\nimport Login from \"../Components/Multiplayer/Login\";\nimport OtherUsers from \"../Components/Multiplayer/OtherUsers\";\n\nimport WaitingMessage from \"../Components/Multiplayer/WaitingMessage\";\nimport InviteNotification from \"../Components/Multiplayer/InviteNotfications\";\nimport Game from \"../Components/GameUI/Game\";\nimport {\n   child,\n   get,\n   off,\n   onChildAdded,\n   onChildRemoved,\n   onDisconnect,\n   onValue,\n   remove,\n   set,\n} from \"@firebase/database\";\nimport { userInfoActions } from \"../store/UserInfo\";\nimport { auth, onlineUsersRef, roomsRef } from \"../modules/firebase-config\";\nimport LeaveRoom from \"../Components/GameUI/LeaveRoom\";\nimport GameShared from \"../Components/Multiplayer/GameShared\";\nimport { gameStateActions2, myRoomRef } from \"../store/GameState2\";\n\nconst TwoPlayer = () => {\n   const dispatch = useDispatch();\n   const userStatus = useSelector((state) => state.userInfo.roomStatus);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const roomKey = useSelector((state) => state.userInfo.roomKey);\n   if (roomKey) {\n      onDisconnect(child(roomsRef, roomKey)).remove();\n   }\n\n   //when list of other users changes\n   onValue(onlineUsersRef, () => {\n      if (auth.currentUser) {\n         get(onlineUsersRef).then((snapshot) => {\n            if (snapshot.val()) {\n               dispatch(\n                  userInfoActions.setOtherUsers(\n                     Object.entries(snapshot.val()).filter(\n                        (pair) => pair[0] !== auth.currentUser.uid && !pair[1].inRoom\n                     )\n                  )\n               );\n            }\n         });\n      }\n   });\n\n   //when someone accepts your invite\n   if (roomKey) {\n      onValue(child(roomsRef, roomKey + \"/accepted\"), (snapshot) => {\n         if (!snapshot.exists()) {\n         } else if (snapshot.val()) {\n            if (playerNumber !== 2) {\n               dispatch(\n                  gameStateActions2.setMultiplayer({\n                     playerNumber: 1,\n                     roomRef: child(roomsRef, roomKey),\n                  })\n               );\n               dispatch(userInfoActions.setRoomStatus(\"in room\"));\n               set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), true);\n            }\n            // off(child(onlineUsersRef, opponentID))\n         } else {\n            dispatch(userInfoActions.setRoomStatus(\"waiting\"));\n         }\n      });\n   }\n   //someone sends you an invite\n   onChildAdded(roomsRef, () => {\n      if (auth.currentUser)\n         get(roomsRef).then((snapshot) => {\n            if (snapshot.exists())\n               dispatch(\n                  userInfoActions.setInvitiationKeys(\n                     Object.entries(snapshot.val())\n                        .filter(\n                           (room) => !room[1].accepted && room[1].player2 === auth.currentUser.uid\n                        )\n                        .map((room) => {\n                           return { opponentuid: room[1].player1, roomKey: room[0] };\n                        })\n                  )\n               );\n         });\n   });\n\n   onChildRemoved(roomsRef, () => {\n      if (auth.currentUser)\n         get(roomsRef).then((snapshot) => {\n            if (snapshot.exists()) {\n               dispatch(\n                  userInfoActions.setInvitiationKeys(\n                     Object.entries(snapshot.val())\n                        .filter(\n                           (room) => !room[1].accepted && room[1].player2 === auth.currentUser.uid\n                        )\n                        .map((room) => {\n                           return { opponentuid: room[1].player1, roomKey: room[0] };\n                        })\n                  )\n               );\n            } else {\n               dispatch(userInfoActions.setInvitiationKeys([]));\n            }\n         });\n   });\n\n   const opponentID = useSelector((state) => state.userInfo.opponentID);\n   const cancelRoomHandler = async () => {\n      off(child(onlineUsersRef, opponentID));\n      dispatch(gameStateActions2.reset());\n      await remove(child(roomsRef, roomKey));\n      dispatch(userInfoActions.reset());\n      if (auth.currentUser) {\n         set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), false);\n      }\n   };\n\n   //check if opponent log out or is in another room or leaves\n   if (opponentID) {\n      onValue(child(onlineUsersRef, opponentID), async (snapshot) => {\n         if (!snapshot.exists()) {\n            cancelRoomHandler();\n         } else if (snapshot.val().inRoom) {\n            // if (myRoomRef){\n            let skip = false;\n            await get(child(myRoomRef, \"accepted\")).then((snapshot) => {\n               skip = snapshot.val();\n            });\n            if (!skip) {\n               cancelRoomHandler();\n            }\n            // }\n         }\n      });\n   }\n   if (userStatus === \"in room\") {\n      onValue(myRoomRef, (snapshot) => {\n         //room is removed\n         if (!snapshot.exists()) {\n            off(child(roomsRef, roomKey));\n            off(child(onlineUsersRef, opponentID));\n            dispatch(userInfoActions.reset());\n\n            if (auth.currentUser) {\n               set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), false);\n            }\n            dispatch(gameStateActions2.reset());\n         }\n      });\n   }\n\n   return (\n      <Fragment>\n         <h1>Ditris Two-Player</h1>\n         {userStatus === \"looking for room\" && <InviteNotification />}\n         {userStatus === \"looking for room\" && <OtherUsers />}\n         {userStatus === \"waiting\" && <WaitingMessage cancelRoomHandler={cancelRoomHandler} />}\n         <Login></Login>\n         {userStatus === \"in room\" && <LeaveRoom leaveRoomHandler={cancelRoomHandler}></LeaveRoom>}\n         {/* {userStatus === \"in room\" && playerNumber === 1 && <Game></Game>}\n         {userStatus === \"in room\" && playerNumber === 2 && <GetGame></GetGame>} */}\n         {userStatus === \"in room\" && <GameShared></GameShared>}\n      </Fragment>\n   );\n};\n\nexport default TwoPlayer;\n","import styles from \"./NavigationBar.module.css\";\n\nconst NavigationBar = ({ setPage,setShowKeyBindings }) => {\n   return (\n      <ul className={styles[\"nav-bar\"]}>\n         <li\n            onClick={() => {\n               setPage(\"singleplayer\");\n            }}\n         >\n            SinglePlayer\n         </li>\n         <li\n            onClick={() => {\n               setPage(\"two-player\");\n            }}\n         >\n            Two-Player\n         </li>\n         <li\n            onClick={() => {\n               setShowKeyBindings(true);\n            }}\n            style={{ float: \"right\" }}\n         >\n            Set Controls\n         </li>\n      </ul>\n   );\n};\n\nexport default NavigationBar;\n","import { onAuthStateChanged } from \"@firebase/auth\";\nimport { off, remove} from \"@firebase/database\";\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport KeyBindings from \"./Components/KeyBindings/KeyBindings\";\nimport { auth } from \"./modules/firebase-config\";\nimport SinglePlayer from \"./Pages/SinglePlayer\";\nimport TwoPlayer from \"./Pages/TwoPlayer\";\nimport { gameStateActions } from \"./store/GameState\";\nimport { gameStateActions2, myRoomRef } from \"./store/GameState2\";\nimport { opponentRef, userInfoActions } from \"./store/UserInfo\";\nimport NavigationBar from \"./Components/UI/NavigationBar\";\n\nconst App = () => {\n   const dispatch = useDispatch();\n   const [page, setPage] = useState(<SinglePlayer></SinglePlayer>);\n   const [showKeyBindings,setShowKeyBindings] = useState(false)\n   const changePageHandler = (pageName) => {\n      if (pageName === \"singleplayer\") {\n         dispatch(gameStateActions.reset());\n         setPage(<SinglePlayer></SinglePlayer>);\n      } else if (pageName === \"two-player\") {\n         if(myRoomRef){\n            remove(myRoomRef)\n         }\n         dispatch(gameStateActions2.reset())\n         setPage(<TwoPlayer></TwoPlayer>);\n      }\n   };\n\n   onAuthStateChanged(auth, (user) => {\n      if (user) {\n         dispatch(userInfoActions.login());\n         dispatch(userInfoActions.reset())\n         dispatch(userInfoActions.setRoomStatus(\"looking for room\"))\n\n      } else {\n         dispatch(userInfoActions.logout());\n         if(opponentRef){\n            off(opponentRef)\n         }\n         dispatch(userInfoActions.reset())\n      }\n   });\n\n\n\n\n   return (\n      <React.Fragment>\n         <NavigationBar setPage={changePageHandler} setShowKeyBindings={setShowKeyBindings}></NavigationBar>\n         {page}\n         {showKeyBindings&&<KeyBindings setShowKeyBindings={setShowKeyBindings}></KeyBindings>}\n      </React.Fragment>\n   );\n};\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport gameStateReducer from \"./GameState\";\nimport userInfoReducer from \"./UserInfo\";\nimport gameStateReducer2 from \"./GameState2\";\nimport controlsSliceReducer from \"./Controls\"\n\nconst store = configureStore({\n   reducer: {\n      gameState: gameStateReducer,\n      userInfo: userInfoReducer,\n      gameState2: gameStateReducer2,\n      controls: controlsSliceReducer,\n   },\n});\n\nexport default store;\n","import ReactDOM from \"react-dom/client\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n"],"sourceRoot":""}