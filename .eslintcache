[{"/Users/albert/Desktop/-/src/index.js":"1","/Users/albert/Desktop/-/src/App.js":"2","/Users/albert/Desktop/-/src/store/index.js":"3","/Users/albert/Desktop/-/src/store/GameState.js":"4","/Users/albert/Desktop/-/src/modules/piece-queue.js":"5","/Users/albert/Desktop/-/src/modules/KeyControls.js":"6","/Users/albert/Desktop/-/src/Pages/SinglePlayer.js":"7","/Users/albert/Desktop/-/src/Pages/TwoPlayer.js":"8","/Users/albert/Desktop/-/src/modules/firebase-config.js":"9","/Users/albert/Desktop/-/src/store/UserInfo.js":"10","/Users/albert/Desktop/-/src/Components/GameUI/PieceQueue.js":"11","/Users/albert/Desktop/-/src/Components/Multiplayer/OtherUsers.js":"12","/Users/albert/Desktop/-/src/Components/GameUI/Grid.js":"13","/Users/albert/Desktop/-/src/Components/GameUI/ReadyGo.js":"14","/Users/albert/Desktop/-/src/Components/Multiplayer/OtherUser.js":"15","/Users/albert/Desktop/-/src/Components/Multiplayer/WaitingMessage.js":"16","/Users/albert/Desktop/-/src/Components/Multiplayer/Login.js":"17","/Users/albert/Desktop/-/src/Components/GameUI/Tetrimino.js":"18","/Users/albert/Desktop/-/src/Components/GameUI/HeldBlock.js":"19","/Users/albert/Desktop/-/src/Components/GameUI/HowToPlay.js":"20","/Users/albert/Desktop/-/src/Components/GameUI/Block.js":"21","/Users/albert/Desktop/-/src/Components/GameUI/PieceQueuePiece.js":"22","/Users/albert/Desktop/-/src/Components/Multiplayer/InviteNotfications.js":"23","/Users/albert/Desktop/-/src/Components/Multiplayer/InviteNotifcation.js":"24","/Users/albert/Desktop/-/src/Components/GameUI/Game.js":"25","/Users/albert/Desktop/-/src/Components/GameUI/LeaveRoom.js":"26","/Users/albert/Desktop/-/src/Components/Multiplayer/GameShared.js":"27","/Users/albert/Desktop/-/src/store/GameState2.js":"28","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/ReadyGo.js":"29","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Grid.js":"30","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Block.js":"31","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/PieceQueue.js":"32","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/PieceQueuePiece.js":"33","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Tetrimino.js":"34","/Users/albert/Desktop/-/src/Components/GameUI/StopWatch.js":"35","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/WhoseTurnText.js":"36","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/LineClearedCounter.js":"37","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/InputForm.js":"38","/Users/albert/Desktop/-/src/Components/UI/Modal.js":"39","/Users/albert/Desktop/-/src/Components/UI/NavigationBar.js":"40","/Users/albert/Desktop/-/src/store/Controls.js":"41","/Users/albert/Desktop/-/src/Components/KeyBindings/KeyBindings.js":"42","/Users/albert/Desktop/-/src/Components/KeyBindings/KeyBinding.js":"43"},{"size":294,"mtime":1657940800584,"results":"44","hashOfConfig":"45"},{"size":1931,"mtime":1658969802977,"results":"46","hashOfConfig":"45"},{"size":452,"mtime":1658906599168,"results":"47","hashOfConfig":"45"},{"size":17762,"mtime":1658718508360,"results":"48","hashOfConfig":"45"},{"size":623,"mtime":1658635542952,"results":"49","hashOfConfig":"45"},{"size":839,"mtime":1658095606677,"results":"50","hashOfConfig":"45"},{"size":244,"mtime":1658175896168,"results":"51","hashOfConfig":"45"},{"size":6158,"mtime":1658561782379,"results":"52","hashOfConfig":"45"},{"size":1179,"mtime":1658197195502,"results":"53","hashOfConfig":"45"},{"size":2152,"mtime":1658815119496,"results":"54","hashOfConfig":"45"},{"size":653,"mtime":1658635519907,"results":"55","hashOfConfig":"45"},{"size":540,"mtime":1658905552671,"results":"56","hashOfConfig":"45"},{"size":638,"mtime":1658803041078,"results":"57","hashOfConfig":"45"},{"size":430,"mtime":1658896059387,"results":"58","hashOfConfig":"45"},{"size":868,"mtime":1658716952724,"results":"59","hashOfConfig":"45"},{"size":512,"mtime":1658905783774,"results":"60","hashOfConfig":"45"},{"size":1417,"mtime":1658815413046,"results":"61","hashOfConfig":"45"},{"size":2959,"mtime":1657940668249,"results":"62","hashOfConfig":"45"},{"size":1651,"mtime":1658859670076,"results":"63","hashOfConfig":"45"},{"size":413,"mtime":1657940657240,"results":"64","hashOfConfig":"45"},{"size":192,"mtime":1658387767553,"results":"65","hashOfConfig":"45"},{"size":627,"mtime":1658635528098,"results":"66","hashOfConfig":"45"},{"size":595,"mtime":1658361437548,"results":"67","hashOfConfig":"45"},{"size":1342,"mtime":1658716929691,"results":"68","hashOfConfig":"45"},{"size":6651,"mtime":1658974510692,"results":"69","hashOfConfig":"45"},{"size":140,"mtime":1658368308962,"results":"70","hashOfConfig":"45"},{"size":11795,"mtime":1658975354696,"results":"71","hashOfConfig":"45"},{"size":22750,"mtime":1658898285008,"results":"72","hashOfConfig":"45"},{"size":526,"mtime":1658896260486,"results":"73","hashOfConfig":"45"},{"size":652,"mtime":1658470926891,"results":"74","hashOfConfig":"45"},{"size":192,"mtime":1657940643720,"results":"75","hashOfConfig":"45"},{"size":1504,"mtime":1658820756224,"results":"76","hashOfConfig":"45"},{"size":627,"mtime":1657940664021,"results":"77","hashOfConfig":"45"},{"size":2959,"mtime":1657940668249,"results":"78","hashOfConfig":"45"},{"size":1335,"mtime":1658860265541,"results":"79","hashOfConfig":"45"},{"size":643,"mtime":1658859845784,"results":"80","hashOfConfig":"45"},{"size":538,"mtime":1658818887674,"results":"81","hashOfConfig":"45"},{"size":1501,"mtime":1658898753686,"results":"82","hashOfConfig":"45"},{"size":726,"mtime":1658968141177,"results":"83","hashOfConfig":"45"},{"size":695,"mtime":1658905272992,"results":"84","hashOfConfig":"45"},{"size":1561,"mtime":1658974520971,"results":"85","hashOfConfig":"45"},{"size":3887,"mtime":1658974242359,"results":"86","hashOfConfig":"45"},{"size":1291,"mtime":1658975038325,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1d6moc6",{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"90"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"90"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"90"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"90"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"90"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/albert/Desktop/-/src/index.js",[],["185","186"],"/Users/albert/Desktop/-/src/App.js",[],"/Users/albert/Desktop/-/src/store/index.js",[],"/Users/albert/Desktop/-/src/store/GameState.js",["187","188"],"import { child, set } from \"@firebase/database\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nimport { TETRIMINOS } from \"../Components/GameUI/Tetrimino\";\n\nimport Queue from \"../modules/piece-queue\";\n\nlet pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\nconst getRandomPiece = () => {\n   if (pieceArray.length === 0) {\n      pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n   }\n   const value = Math.floor(pieceArray.length * Math.random());\n   return pieceArray.splice(value, 1);\n};\n\nexport let myRoomRef = null;\n\nconst getCoords = (type, rotatePos, xPos, yPos) =>\n   TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n      row.map((col, colPos) => {\n         if (col) {\n            return { x: xPos + colPos, y: yPos + rowPos };\n         }\n         return null;\n      })\n   );\n\nconst rotatePiece = (isCounterClockwise, state) => {\n   let { rotatePos } = state;\n   if (isCounterClockwise) {\n      if (rotatePos === 0) {\n         return 3;\n      } else {\n         return rotatePos - 1;\n      }\n   } else {\n      if (rotatePos === 3) {\n         return 0;\n      } else {\n         return rotatePos + 1;\n      }\n   }\n};\n\nconst convertMappingToCoords = (state, mapping, forGhost = false) => {\n   let coordArray = [];\n   for (const array of mapping) {\n      for (const coord of array) {\n         if (coord) {\n            if (coordIsValid(state, coord, forGhost)) {\n               coordArray.push(coord);\n            }\n         }\n      }\n   }\n   return coordArray;\n};\n\nconst gameStateInitialState = {\n   gameRunning: false,\n   currentShape: null,\n   currentCoords: [],\n   ghostCoords: [],\n   currentPieceState: \"NONE\",\n   rotatePos: 0,\n   xPos: 3,\n   yPos: 0,\n   totalLinesCleared: 0,\n   grid: [\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n   ],\n   // winCondition:(state) =>{return state.totalLinesCleared >= 5},\n   pieceQueue: null,\n   isGameWon: false,\n   heldPiece: null,\n   rotated: false,\n   displayMessage: null,\n\n};\n\nconst removeLastState = (state) => {\n   for (const coord of state.currentCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst removeLastGhostPiece = (state) => {\n   for (const coord of state.ghostCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst placeBlocks = (state, forGhost = false) => {\n   if (forGhost) {\n      const colorName = state.currentShape + \"ghost\";\n      for (const coord of state.ghostCoords) {\n         state.grid[coord.y][coord.x] = colorName;\n         for (const currentCoord of state.currentCoords) {\n            if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n               state.grid[coord.y][coord.x] = state.currentShape;\n            }\n         }\n      }\n   } else {\n      for (const coord of state.currentCoords) {\n         state.grid[coord.y][coord.x] = state.currentShape;\n      }\n   }\n   \n};\n\nconst coordIsValid = (state, coord, forGhost = false) => {\n   if (coord) {\n      if (coord.y <= 20 && coord.x >= 0 && coord.x <= 9) {\n         for (let currentCoord of state.currentCoords) {\n            if (forGhost) {\n               if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n                  return true;\n               }\n            }\n         }\n         if (state.grid[coord.y][coord.x].length > 1) {\n            return true;\n         }\n      }\n   }\n   return false;\n};\n\n\nexport let pieceQueue = new Queue();\n\nconst gameStateSlice = createSlice({\n   name: \"gameState\",\n   initialState: gameStateInitialState,\n   reducers: {\n      reset(state) {\n         pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.totalLinesCleared = 0;\n         state.displayMessage = null;\n         state.rotated = false\n         state.heldPiece = null\n         state.currentPieceState = \"GETTING READY\";\n         pieceQueue.empty();\n         state.gameRunning = false;\n      },\n      newGame(state) {\n         pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.totalLinesCleared = 0;\n         state.rotated = false\n         state.heldPiece = null\n         state.displayMessage = \"READY\";\n         state.currentPieceState = \"GETTING READY\";\n         pieceQueue.empty();\n         state.gameRunning = false;\n      },\n      gettingReady(state) {\n         if (state.currentPieceState === \"GETTING READY\") {\n            state.currentPieceState = \"BEFORE START\";\n            state.displayMessage = \"GO!\";\n         } else if (state.currentPieceState === \"BEFORE START\") {\n            state.displayMessage = null;\n            state.gameRunning = true;\n            state.currentShape = getRandomPiece()[0];\n            for (let i = 0; i < 5; i++) {\n               pieceQueue.enqueue(...getRandomPiece());\n            }\n         }\n      },\n      clearLines(state) {\n         let newGrid = [];\n         let linesCleared = 0;\n         for (const row of state.grid) {\n            if (row.every((blockType) => blockType !== \"None\")) {\n               state.totalLinesCleared += 1;\n               linesCleared += 1;\n            } else {\n               newGrid.push(row);\n            }\n         }\n         for (let i = 0; i < linesCleared; i++) {\n            newGrid.unshift([\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n            ]);\n         }\n         state.grid = newGrid;\n      },\n      getNewPiece(state) {\n         if (!state.gameRunning) {\n            return;\n         }\n         state.ghostCoords = [];\n         state.rotated = false;\n         state.currentShape = pieceQueue.dequeue();\n         pieceQueue.enqueue(...getRandomPiece());\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.gameRunning = false;\n            state.displayMessage = \"YOU LOST\";\n            console.log(\"lost\");\n            return;\n         }\n         placeBlocks(state);\n         state.currentPieceState = \"FALLING\";\n      },\n      rotatePiece(state, action) {\n         const originalRotatePos = state.rotatePos;\n         state.rotatePos = rotatePiece(action.payload, {\n            rotatePos: state.rotatePos,\n         });\n         removeLastState(state);\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.rotatePos = originalRotatePos;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentPieceState = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      dropPiece(state) {\n         if (state.gameRunning) {\n            if (state.currentPieceState === \"LANDING\") {\n               state.currentPieceState = \"FROZEN\";\n               return;\n            }\n            removeLastState(state);\n            state.yPos += 1;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n            if (state.currentCoords.length < 4) {\n               state.yPos -= 1;\n               state.currentCoords = convertMappingToCoords(\n                  state,\n                  getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n               );\n               state.currentPieceState = \"LANDING\";\n            } else {\n               state.currentPieceState = \"FALLING\";\n            }\n            placeBlocks(state);\n         } else {\n         }\n      },\n      getGhostCoords(state) {\n         if (!state.gameRunning) {\n            return;\n         }\n         removeLastGhostPiece(state);\n         state.ghostCoords = [];\n         for (let coord of state.currentCoords) {\n            state.ghostCoords.push({ x: coord.x, y: coord.y });\n         }\n         let ghostYPos = state.yPos;\n         while (state.ghostCoords.length === 4) {\n            ghostYPos += 1;\n            state.ghostCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, ghostYPos),\n               true\n            );\n         }\n         ghostYPos -= 1;\n         state.ghostCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, ghostYPos),\n            true\n         );\n      },\n      hardDrop(state) {\n         removeLastState(state);\n         state.currentCoords = state.ghostCoords;\n         placeBlocks(state);\n         state.currentPieceState = \"FROZEN\";\n      },\n      showGhostPiece(state) {\n         if (!state.gameRunning) {\n            return;\n         }\n         placeBlocks(state, true);\n      },\n      shiftLeft(state) {\n         removeLastState(state);\n         state.xPos -= 1;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.xPos += 1;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentPieceState = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      shiftRight(state) {\n         removeLastState(state);\n         state.xPos += 1;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.currentCoords.length < 4) {\n            state.xPos -= 1;\n            state.currentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentPieceState = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      checkIfGameWon(state) {\n         if (state.totalLinesCleared >= 4) {\n            console.log(\"won\");\n            state.isGameWon = true;\n            state.gameRunning = false;\n            state.displayMessage = \"YOU WON\";\n         }\n      },\n      holdPiece(state) {\n         if (state.rotated === true) {\n            return;\n         }\n         state.rotated = true;\n\n         removeLastState(state);\n         if (state.heldPiece === null) {\n            state.heldPiece = state.currentShape;\n            state.currentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n         } else {\n            const placeHolder = state.currentShape;\n            state.currentShape = state.heldPiece;\n            state.heldPiece = placeHolder;\n         }\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         placeBlocks(state);\n         state.currentPieceState = \"FALLING\"\n      },\n\n      // setWinCondition(state,condition){\n      //   state.winCondition = condition;\n      // }\n   },\n});\n\nexport const gameStateActions = gameStateSlice.actions;\n\nexport default gameStateSlice.reducer;\n","/Users/albert/Desktop/-/src/modules/piece-queue.js",[],"/Users/albert/Desktop/-/src/modules/KeyControls.js",[],"/Users/albert/Desktop/-/src/Pages/SinglePlayer.js",[],"/Users/albert/Desktop/-/src/Pages/TwoPlayer.js",["189"],"import { Fragment } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"../modules/firebase-config\";\nimport Login from \"../Components/Multiplayer/Login\";\nimport OtherUsers from \"../Components/Multiplayer/OtherUsers\";\n\nimport WaitingMessage from \"../Components/Multiplayer/WaitingMessage\";\nimport InviteNotification from \"../Components/Multiplayer/InviteNotfications\";\nimport Game from \"../Components/GameUI/Game\";\nimport {\n   child,\n   get,\n   off,\n   onChildAdded,\n   onChildRemoved,\n   onDisconnect,\n   onValue,\n   remove,\n   set,\n} from \"@firebase/database\";\nimport { userInfoActions } from \"../store/UserInfo\";\nimport { auth, onlineUsersRef, roomsRef } from \"../modules/firebase-config\";\nimport LeaveRoom from \"../Components/GameUI/LeaveRoom\";\nimport GameShared from \"../Components/Multiplayer/GameShared\";\nimport { gameStateActions2, myRoomRef } from \"../store/GameState2\";\n\nconst TwoPlayer = () => {\n   const dispatch = useDispatch();\n   const userStatus = useSelector((state) => state.userInfo.roomStatus);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const roomKey = useSelector((state) => state.userInfo.roomKey);\n   if (roomKey) {\n      onDisconnect(child(roomsRef, roomKey)).remove();\n   }\n\n   //when list of other users changes\n   onValue(onlineUsersRef, () => {\n      if (auth.currentUser) {\n         get(onlineUsersRef).then((snapshot) => {\n            if (snapshot.val()) {\n               dispatch(\n                  userInfoActions.setOtherUsers(\n                     Object.entries(snapshot.val()).filter(\n                        (pair) => pair[0] !== auth.currentUser.uid && !pair[1].inRoom\n                     )\n                  )\n               );\n            }\n         });\n      }\n   });\n\n   //when someone accepts your invite\n   if (roomKey) {\n      onValue(child(roomsRef, roomKey + \"/accepted\"), (snapshot) => {\n         if (!snapshot.exists()) {\n         } else if (snapshot.val()) {\n            if (playerNumber !== 2) {\n               dispatch(\n                  gameStateActions2.setMultiplayer({\n                     playerNumber: 1,\n                     roomRef: child(roomsRef, roomKey),\n                  })\n               );\n               dispatch(userInfoActions.setRoomStatus(\"in room\"));\n               set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), true);\n            }\n            // off(child(onlineUsersRef, opponentID))\n         } else {\n            dispatch(userInfoActions.setRoomStatus(\"waiting\"));\n         }\n      });\n   }\n   //someone sends you an invite\n   onChildAdded(roomsRef, () => {\n      if (auth.currentUser)\n         get(roomsRef).then((snapshot) => {\n            if (snapshot.exists())\n               dispatch(\n                  userInfoActions.setInvitiationKeys(\n                     Object.entries(snapshot.val())\n                        .filter(\n                           (room) => !room[1].accepted && room[1].player2 === auth.currentUser.uid\n                        )\n                        .map((room) => {\n                           return { opponentuid: room[1].player1, roomKey: room[0] };\n                        })\n                  )\n               );\n         });\n   });\n\n   onChildRemoved(roomsRef, () => {\n      if (auth.currentUser)\n         get(roomsRef).then((snapshot) => {\n            if (snapshot.exists()) {\n               dispatch(\n                  userInfoActions.setInvitiationKeys(\n                     Object.entries(snapshot.val())\n                        .filter(\n                           (room) => !room[1].accepted && room[1].player2 === auth.currentUser.uid\n                        )\n                        .map((room) => {\n                           return { opponentuid: room[1].player1, roomKey: room[0] };\n                        })\n                  )\n               );\n            } else {\n               dispatch(userInfoActions.setInvitiationKeys([]));\n            }\n         });\n   });\n\n   const opponentID = useSelector((state) => state.userInfo.opponentID);\n   const cancelRoomHandler = async () => {\n      off(child(onlineUsersRef, opponentID));\n      dispatch(gameStateActions2.reset());\n      await remove(child(roomsRef, roomKey));\n      dispatch(userInfoActions.reset());\n      if (auth.currentUser) {\n         set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), false);\n      }\n   };\n\n   //check if opponent log out or is in another room or leaves\n   if (opponentID) {\n      onValue(child(onlineUsersRef, opponentID), async (snapshot) => {\n         if (!snapshot.exists()) {\n            cancelRoomHandler();\n         } else if (snapshot.val().inRoom) {\n            // if (myRoomRef){\n            let skip = false;\n            await get(child(myRoomRef, \"accepted\")).then((snapshot) => {\n               skip = snapshot.val();\n            });\n            if (!skip) {\n               cancelRoomHandler();\n            }\n            // }\n         }\n      });\n   }\n   if (userStatus === \"in room\") {\n      onValue(myRoomRef, (snapshot) => {\n         //room is removed\n         if (!snapshot.exists()) {\n            off(child(roomsRef, roomKey));\n            off(child(onlineUsersRef, opponentID));\n            dispatch(userInfoActions.reset());\n\n            if (auth.currentUser) {\n               set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), false);\n            }\n            dispatch(gameStateActions2.reset());\n         }\n      });\n   }\n\n   return (\n      <Fragment>\n         <h1>Ditris Two-Player</h1>\n         {userStatus === \"looking for room\" && <InviteNotification />}\n         {userStatus === \"looking for room\" && <OtherUsers />}\n         {userStatus === \"waiting\" && <WaitingMessage cancelRoomHandler={cancelRoomHandler} />}\n         <Login></Login>\n         {userStatus === \"in room\" && <LeaveRoom leaveRoomHandler={cancelRoomHandler}></LeaveRoom>}\n         {/* {userStatus === \"in room\" && playerNumber === 1 && <Game></Game>}\n         {userStatus === \"in room\" && playerNumber === 2 && <GetGame></GetGame>} */}\n         {userStatus === \"in room\" && <GameShared></GameShared>}\n      </Fragment>\n   );\n};\n\nexport default TwoPlayer;\n","/Users/albert/Desktop/-/src/modules/firebase-config.js",["190"],"// Import the functions you need from the SDKs you need\nimport { getAuth } from \"@firebase/auth\";\nimport { child, get, getDatabase, ref } from \"@firebase/database\";\nimport { initializeApp } from \"firebase/app\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA9ipNK6_boqbwThQlJgolni-O5iIgIl40\",\n  authDomain: \"ditris-2244c.firebaseapp.com\",\n  databaseURL: \"https://ditris-2244c-default-rtdb.firebaseio.com\",\n  projectId: \"ditris-2244c\",\n  storageBucket: \"ditris-2244c.appspot.com\",\n  messagingSenderId: \"743373731037\",\n  appId: \"1:743373731037:web:9552a80db8b0df8d875734\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth()\nexport const db = getDatabase()\nexport const rootRef = ref(db);\nexport const onlineUsersRef = child(rootRef,'users')\nexport const roomsRef= child(rootRef,'rooms')\nexport const getUsernameFromuid = async (uid) =>{\n  let username;\n  await get(child(onlineUsersRef,uid)).then(snapshot=>{username = snapshot.val().username})\n  return username\n}\n\n\n","/Users/albert/Desktop/-/src/store/UserInfo.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/PieceQueue.js",["191"],"import PieceQueuePiece from \"./PieceQueuePiece\";\nimport styles from './PieceQueue.module.css'\nimport {pieceQueue} from '../../store/GameState'\nimport { useSelector } from \"react-redux\";\n\nconst PieceQueue= (props) =>{\n    const queueChanged= useSelector(state=>state.gameState.heldPiece)\n    let i = 0\n    let pieces = []\n    if (pieceQueue.isEmpty){\n        return <ul className = {styles.pieceQueue}></ul>\n    }\n\n    for (let pieceColor in pieceQueue.elements){\n        pieces.push(<PieceQueuePiece key = {i++} color = {pieceQueue.elements[pieceColor]}/>)\n    }\n    return <ul className = {styles.pieceQueue}>{pieces}</ul>\n}\n\nexport default PieceQueue;","/Users/albert/Desktop/-/src/Components/Multiplayer/OtherUsers.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/Grid.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/ReadyGo.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/OtherUser.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/WaitingMessage.js",["192","193"],"import {  memo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Modal from \"../UI/Modal\";\n\n\nconst WaitingMessage = ({ cancelRoomHandler }) => {\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n   const roomKey = useSelector((state) => state.userInfo.roomKey);\n\n   return (\n      <Modal>\n         Waiting for {opponentName} to join\n         <button onClick={cancelRoomHandler}>Cancel</button>\n      </Modal>\n   );\n};\n\nexport default memo(WaitingMessage);\n","/Users/albert/Desktop/-/src/Components/Multiplayer/Login.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/Tetrimino.js",["194"],"export const TETRIMINOS = {\n  I: [\n    //I\n    [\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  ],\n\n  T: [\n    //T\n    [\n      [0, 1, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  L: [\n    //L\n    [\n      [0, 0, 1],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  J: [\n    //J\n    [\n      [1, 0, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  ],\n  Z: [\n    //Z\n    [\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  ],\n  S: [\n    //S\n    [\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  O: [\n    //O\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n  ],\n};\n\nexport const getRandomPiece = () => {\n  const value = Math.round(6 * Math.random());\n  switch (value) {\n    case 0:\n      return \"I\";\n    case 1:\n      return \"T\";\n    case 2:\n      return \"L\";\n    case 3:\n      return \"J\";\n    case 4:\n      return \"Z\";\n    case 5:\n      return \"S\";\n    case 6:\n      return \"O\";\n  }\n};\n\nexport const getPiece = (type, rotatePos, xPos, yPos) =>\n  TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n    row.map((col, colPos) => {\n      if (col) {\n        return { x: xPos + colPos, y: yPos + rowPos };\n      }\n      return null;\n    })\n  );\n\nexport const rotatePiece = (isCounterClockwise, { type, rotatePos }) => {\n  return isCounterClockwise\n    ? rotatePos === 0\n      ? TETRIMINOS[type].length - 1\n      : rotatePos - 1\n    : rotatePos === TETRIMINOS[type].length - 1\n    ? 0\n    : rotatePos + 1;\n};\n\nexport const convertMappingToCoords = (mapping) => {\n  let coordArray = [];\n  for (const array of mapping) {\n    for (const coord of array) {\n      if (coord) {\n        coordArray.push(coord);\n      }\n    }\n  }\n  return coordArray;\n};\n","/Users/albert/Desktop/-/src/Components/GameUI/HeldBlock.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/HowToPlay.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/Block.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/PieceQueuePiece.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/InviteNotfications.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/InviteNotifcation.js",["195"],"import { child, set } from \"@firebase/database\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { auth, getUsernameFromuid, myRoomRef, onlineUsersRef, roomsRef } from \"../../modules/firebase-config\";\nimport { gameStateActions2 } from \"../../store/GameState2\";\nimport { userInfoActions } from \"../../store/UserInfo\";\n\nconst InviteNotfication = ({ roomKey, opponentuid }) => {\n   const dispatch = useDispatch();\n   const [opponentName, setOpponentName] = useState(null);\n   const getOpponentName = async () => {\n      setOpponentName(await getUsernameFromuid(opponentuid));\n   };\n\n   const acceptInvite = async() => {\n      await set(child(roomsRef, roomKey + \"/accepted\"), true);\n      await set(child(roomsRef,roomKey + \"/displayMessage\"),\"\")\n      dispatch(userInfoActions.setOpponentid(opponentuid))\n      dispatch(userInfoActions.setRoomStatus(\"in room\"));\n      dispatch(userInfoActions.setRoomKey(roomKey))\n      dispatch(userInfoActions.setOpponentName(opponentName))\n      dispatch(\n         gameStateActions2.setMultiplayer({ playerNumber: 2, roomRef: child(roomsRef, roomKey) })\n      );\n      await set(child(onlineUsersRef,auth.currentUser.uid+\"/inRoom\"),true)\n   };\n\n   getOpponentName();\n   return <button onClick={acceptInvite}>{opponentName}</button>;\n};\n\nexport default InviteNotfication;\n","/Users/albert/Desktop/-/src/Components/GameUI/Game.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/LeaveRoom.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/GameShared.js",["196","197","198","199"],"/Users/albert/Desktop/-/src/store/GameState2.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/ReadyGo.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Grid.js",["200"],"import { useSelector, useDispatch } from \"react-redux\";\n\nimport styles from \"./Grid.module.css\";\nimport Block from \"./Block\";\nimport ReadyGo from \"./ReadyGo\";\n\nconst Grid = () => {\n   const gameState = useSelector((state) => state.gameState2);\n\n   const grid = gameState.grid.slice(1).map((row, y_pos) => {\n      return (\n         <tr key={y_pos}>\n            {row.map((color, x_pos) => {\n               return <Block color={color} key={x_pos} />;\n            })}\n         </tr>\n      );\n   });\n\n   return (\n      <table className={styles.grid}>\n         <tbody>{grid}</tbody>\n         <ReadyGo></ReadyGo>\n      </table>\n   );\n};\n\nexport default Grid;\n","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Block.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/PieceQueue.js",["201"],"import PieceQueuePiece from \"./PieceQueuePiece\";\nimport styles from \"./PieceQueue.module.css\";\nimport { pieceQueue } from \"../../../store/GameState2\";\nimport { useSelector } from \"react-redux\";\nimport { Fragment, memo } from \"react\";\n\nconst PieceQueue = ({ player }) => {\n   const opponentPieces = useSelector((state) => state.gameState2.opponentPieceQueue);\n   const queueChanged = useSelector((state) => state.gameState2.myTurn);\n   let i = 0;\n   let pieces = [];\n   if (player === \"mine\") {\n      if (pieceQueue.isEmpty) {\n         return <ul className={styles.pieceQueueMine}></ul>;\n      }\n\n      for (let pieceColor in pieceQueue.elements) {\n         pieces.push(<PieceQueuePiece key={i++} color={pieceQueue.elements[pieceColor]} />);\n      }\n      return (\n         <Fragment>\n            <div className={styles.pieceQueueMine}>\n               <ul>{pieces}</ul>\n            </div>\n         </Fragment>\n      );\n   } else if (player === \"opponent\") {\n      if (!opponentPieces || opponentPieces.isEmpty) {\n         return <ul className={styles.pieceQueueOpponent}></ul>;\n      }\n      for (let pieceColor in opponentPieces) {\n         if (!pieceColor) {\n            continue;\n         }\n         pieces.push(<PieceQueuePiece key={i++} color={opponentPieces[pieceColor]} />);\n      }\n      return (\n         <Fragment>\n            <div className={styles.pieceQueueOpponent}>\n               <ul>{pieces}</ul>\n            </div>\n         </Fragment>\n      );\n   }\n};\n\nexport default memo(PieceQueue);\n","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/PieceQueuePiece.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Tetrimino.js",["202"],"/Users/albert/Desktop/-/src/Components/GameUI/StopWatch.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/WhoseTurnText.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/LineClearedCounter.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/InputForm.js",["203"],"import { child, off, onValue, set } from \"@firebase/database\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { gameStateActions2, myRoomRef } from \"../../../store/GameState2\";\n\nconst InputForm = () => {\n   const dispatch = useDispatch();\n   const linesToClear = useSelector((state) => state.gameState2.linesToClear);\n   const [linesToClearInput, setLinesToClearInput] = useState(linesToClear);\n\n   const setLinesToClearInputChange = (event) => {\n      if (linesToClearInput <= 0) {\n         return;\n      } else {\n         setLinesToClearInput(+event.target.value);\n      }\n   };\n   const setLinesToClearHandler = () => {\n      off(child(myRoomRef, \"linesToClear\"));\n      dispatch(gameStateActions2.setLinesToClear(linesToClearInput));\n      set(child(myRoomRef, \"linesToClear\"), linesToClearInput);\n   };\n\n\n   onValue(child(myRoomRef, \"linesToClear\"),(snapshot)=>{\n    if(snapshot.exists()){\n        // setLinesToClearInput(snapshot.val())\n        dispatch(gameStateActions2.setLinesToClear(snapshot.val()))\n    }\n   });\n\n   return (\n      <div>\n         <label id=\"lines\">Lines to Clear </label>\n         <input\n            id=\"lines\"\n            type=\"number\"\n            value={linesToClearInput}\n            onChange={setLinesToClearInputChange}\n         ></input>\n         <button onClick={setLinesToClearHandler}>set</button>\n         <span> Current amount is {linesToClear}</span>\n      </div>\n   );\n};\n\nexport default InputForm;\n","/Users/albert/Desktop/-/src/Components/UI/Modal.js",[],"/Users/albert/Desktop/-/src/Components/UI/NavigationBar.js",[],"/Users/albert/Desktop/-/src/store/Controls.js",[],"/Users/albert/Desktop/-/src/Components/KeyBindings/KeyBindings.js",[],"/Users/albert/Desktop/-/src/Components/KeyBindings/KeyBinding.js",["204","205","206"],{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":1,"column":10,"nodeType":"213","messageId":"214","endLine":1,"endColumn":15},{"ruleId":"211","severity":1,"message":"215","line":1,"column":17,"nodeType":"213","messageId":"214","endLine":1,"endColumn":20},{"ruleId":"211","severity":1,"message":"216","line":10,"column":8,"nodeType":"213","messageId":"214","endLine":10,"endColumn":12},{"ruleId":"211","severity":1,"message":"217","line":21,"column":7,"nodeType":"213","messageId":"214","endLine":21,"endColumn":10},{"ruleId":"211","severity":1,"message":"218","line":7,"column":11,"nodeType":"213","messageId":"214","endLine":7,"endColumn":23},{"ruleId":"211","severity":1,"message":"219","line":2,"column":10,"nodeType":"213","messageId":"214","endLine":2,"endColumn":21},{"ruleId":"211","severity":1,"message":"220","line":8,"column":10,"nodeType":"213","messageId":"214","endLine":8,"endColumn":17},{"ruleId":"221","severity":1,"message":"222","line":161,"column":3,"nodeType":"223","messageId":"224","endLine":176,"endColumn":4},{"ruleId":"211","severity":1,"message":"225","line":4,"column":36,"nodeType":"213","messageId":"214","endLine":4,"endColumn":45},{"ruleId":"211","severity":1,"message":"226","line":1,"column":37,"nodeType":"213","messageId":"214","endLine":1,"endColumn":45},{"ruleId":"211","severity":1,"message":"227","line":12,"column":10,"nodeType":"213","messageId":"214","endLine":12,"endColumn":25},{"ruleId":"228","severity":1,"message":"229","line":58,"column":7,"nodeType":"230","endLine":58,"endColumn":20,"suggestions":"231"},{"ruleId":"228","severity":1,"message":"232","line":82,"column":7,"nodeType":"230","endLine":82,"endColumn":28,"suggestions":"233"},{"ruleId":"211","severity":1,"message":"219","line":1,"column":23,"nodeType":"213","messageId":"214","endLine":1,"endColumn":34},{"ruleId":"211","severity":1,"message":"218","line":9,"column":10,"nodeType":"213","messageId":"214","endLine":9,"endColumn":22},{"ruleId":"221","severity":1,"message":"222","line":161,"column":3,"nodeType":"223","messageId":"224","endLine":176,"endColumn":4},{"ruleId":"211","severity":1,"message":"234","line":2,"column":10,"nodeType":"213","messageId":"214","endLine":2,"endColumn":19},{"ruleId":"211","severity":1,"message":"235","line":2,"column":10,"nodeType":"213","messageId":"214","endLine":2,"endColumn":21},{"ruleId":"228","severity":1,"message":"236","line":12,"column":7,"nodeType":"230","endLine":12,"endColumn":28,"suggestions":"237"},{"ruleId":"228","severity":1,"message":"236","line":19,"column":6,"nodeType":"230","endLine":19,"endColumn":18,"suggestions":"238"},"no-native-reassign",["239"],"no-negated-in-lhs",["240"],"no-unused-vars","'child' is defined but never used.","Identifier","unusedVar","'set' is defined but never used.","'Game' is defined but never used.","'app' is assigned a value but never used.","'queueChanged' is assigned a value but never used.","'useDispatch' is defined but never used.","'roomKey' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'myRoomRef' is defined but never used.","'useState' is defined but never used.","'userInfoActions' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'playerNumber'. Either include them or remove the dependency array.","ArrayExpression",["241"],"React Hook useEffect has missing dependencies: 'dispatch', 'gameLoop', 'keyHandler', 'keyShiftHandler', and 'opponentName'. Either include them or remove the dependency array.",["242"],"'useEffect' is defined but never used.","'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'setInput'. Either include it or remove the dependency array. If 'setInput' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["243"],["244"],"no-global-assign","no-unsafe-negation",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},"Update the dependencies array to be: [dispatch, gameRunning, playerNumber]",{"range":"253","text":"254"},"Update the dependencies array to be: [myTurn, gameRunning, dispatch, opponentName, gameLoop, keyHandler, keyShiftHandler]",{"range":"255","text":"256"},"Update the dependencies array to be: [bindingBeingChanged, setInput]",{"range":"257","text":"258"},"Update the dependencies array to be: [currentKey, setInput]",{"range":"259","text":"260"},[2048,2061],"[dispatch, gameRunning, playerNumber]",[2895,2916],"[myTurn, gameRunning, dispatch, opponentName, gameLoop, keyHandler, keyShiftHandler]",[394,415],"[bindingBeingChanged, setInput]",[564,576],"[currentKey, setInput]"]