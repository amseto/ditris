[{"/Users/albert/Desktop/-/src/index.js":"1","/Users/albert/Desktop/-/src/App.js":"2","/Users/albert/Desktop/-/src/store/index.js":"3","/Users/albert/Desktop/-/src/store/GameState.js":"4","/Users/albert/Desktop/-/src/modules/piece-queue.js":"5","/Users/albert/Desktop/-/src/modules/KeyControls.js":"6","/Users/albert/Desktop/-/src/Pages/SinglePlayer.js":"7","/Users/albert/Desktop/-/src/Pages/TwoPlayer.js":"8","/Users/albert/Desktop/-/src/modules/firebase-config.js":"9","/Users/albert/Desktop/-/src/store/UserInfo.js":"10","/Users/albert/Desktop/-/src/Components/GameUI/PieceQueue.js":"11","/Users/albert/Desktop/-/src/Components/Multiplayer/OtherUsers.js":"12","/Users/albert/Desktop/-/src/Components/GameUI/Grid.js":"13","/Users/albert/Desktop/-/src/Components/GameUI/ReadyGo.js":"14","/Users/albert/Desktop/-/src/Components/Multiplayer/OtherUser.js":"15","/Users/albert/Desktop/-/src/Components/Multiplayer/WaitingMessage.js":"16","/Users/albert/Desktop/-/src/Components/GameUI/Tetrimino.js":"17","/Users/albert/Desktop/-/src/Components/GameUI/HeldBlock.js":"18","/Users/albert/Desktop/-/src/Components/GameUI/HowToPlay.js":"19","/Users/albert/Desktop/-/src/Components/GameUI/Block.js":"20","/Users/albert/Desktop/-/src/Components/GameUI/PieceQueuePiece.js":"21","/Users/albert/Desktop/-/src/Components/Multiplayer/InviteNotfications.js":"22","/Users/albert/Desktop/-/src/Components/GameUI/Game.js":"23","/Users/albert/Desktop/-/src/Components/Multiplayer/GameShared.js":"24","/Users/albert/Desktop/-/src/store/GameState2.js":"25","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/ReadyGo.js":"26","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Grid.js":"27","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Block.js":"28","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/PieceQueue.js":"29","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/PieceQueuePiece.js":"30","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Tetrimino.js":"31","/Users/albert/Desktop/-/src/Components/GameUI/StopWatch.js":"32","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/WhoseTurnText.js":"33","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/LineClearedCounter.js":"34","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/InputForm.js":"35","/Users/albert/Desktop/-/src/Components/UI/Modal.js":"36","/Users/albert/Desktop/-/src/Components/UI/NavigationBar.js":"37","/Users/albert/Desktop/-/src/store/Controls.js":"38","/Users/albert/Desktop/-/src/Components/KeyBindings/KeyBindings.js":"39","/Users/albert/Desktop/-/src/Components/KeyBindings/KeyBinding.js":"40","/Users/albert/Desktop/-/src/Components/Multiplayer/InnerGame.js":"41","/Users/albert/Desktop/-/src/Components/UI/Login.js":"42","/Users/albert/Desktop/-/src/Components/UI/Card.js":"43","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/LeaveRoom.js":"44","/Users/albert/Desktop/-/src/Components/Multiplayer/InviteNotification.js":"45","/Users/albert/Desktop/-/src/Components/GameUI/LinesCleared.js":"46","/Users/albert/Desktop/-/src/Components/GameUI/GameSettings.js":"47","/Users/albert/Desktop/-/src/Hooks/use-input.js":"48","/Users/albert/Desktop/-/src/Components/GameUI/GameSettingsButton.js":"49"},{"size":294,"mtime":1659768828784,"results":"50","hashOfConfig":"51"},{"size":2062,"mtime":1660614294599,"results":"52","hashOfConfig":"51"},{"size":452,"mtime":1661044272715,"results":"53","hashOfConfig":"51"},{"size":18188,"mtime":1661130975791,"results":"54","hashOfConfig":"51"},{"size":623,"mtime":1658635542952,"results":"55","hashOfConfig":"51"},{"size":747,"mtime":1660360820540,"results":"56","hashOfConfig":"51"},{"size":250,"mtime":1660716332856,"results":"57","hashOfConfig":"51"},{"size":6097,"mtime":1660449897252,"results":"58","hashOfConfig":"51"},{"size":1204,"mtime":1660371770274,"results":"59","hashOfConfig":"51"},{"size":2152,"mtime":1659934468552,"results":"60","hashOfConfig":"51"},{"size":657,"mtime":1659382221682,"results":"61","hashOfConfig":"51"},{"size":656,"mtime":1660363456868,"results":"62","hashOfConfig":"51"},{"size":648,"mtime":1659750030696,"results":"63","hashOfConfig":"51"},{"size":385,"mtime":1659738310656,"results":"64","hashOfConfig":"51"},{"size":977,"mtime":1660363741621,"results":"65","hashOfConfig":"51"},{"size":634,"mtime":1660450280801,"results":"66","hashOfConfig":"51"},{"size":2959,"mtime":1657940668249,"results":"67","hashOfConfig":"51"},{"size":1687,"mtime":1659749603254,"results":"68","hashOfConfig":"51"},{"size":170,"mtime":1658977008459,"results":"69","hashOfConfig":"51"},{"size":437,"mtime":1660716064220,"results":"70","hashOfConfig":"51"},{"size":709,"mtime":1659382844713,"results":"71","hashOfConfig":"51"},{"size":683,"mtime":1660368305942,"results":"72","hashOfConfig":"51"},{"size":7800,"mtime":1661131508285,"results":"73","hashOfConfig":"51"},{"size":9127,"mtime":1661132568749,"results":"74","hashOfConfig":"51"},{"size":22476,"mtime":1660613923312,"results":"75","hashOfConfig":"51"},{"size":437,"mtime":1659415952192,"results":"76","hashOfConfig":"51"},{"size":649,"mtime":1659769126279,"results":"77","hashOfConfig":"51"},{"size":194,"mtime":1659406942284,"results":"78","hashOfConfig":"51"},{"size":1425,"mtime":1659769140728,"results":"79","hashOfConfig":"51"},{"size":710,"mtime":1659385680045,"results":"80","hashOfConfig":"51"},{"size":2959,"mtime":1657940668249,"results":"81","hashOfConfig":"51"},{"size":1256,"mtime":1661131393025,"results":"82","hashOfConfig":"51"},{"size":656,"mtime":1659416222362,"results":"83","hashOfConfig":"51"},{"size":608,"mtime":1659505638782,"results":"84","hashOfConfig":"51"},{"size":1539,"mtime":1661132859178,"results":"85","hashOfConfig":"51"},{"size":726,"mtime":1658968141177,"results":"86","hashOfConfig":"51"},{"size":777,"mtime":1661067077449,"results":"87","hashOfConfig":"51"},{"size":1561,"mtime":1658974520971,"results":"88","hashOfConfig":"51"},{"size":3900,"mtime":1661042550772,"results":"89","hashOfConfig":"51"},{"size":1271,"mtime":1660716738630,"results":"90","hashOfConfig":"51"},{"size":5781,"mtime":1660360800798,"results":"91","hashOfConfig":"51"},{"size":2626,"mtime":1661131900758,"results":"92","hashOfConfig":"51"},{"size":188,"mtime":1659489707161,"results":"93","hashOfConfig":"51"},{"size":222,"mtime":1661132803106,"results":"94","hashOfConfig":"51"},{"size":1777,"mtime":1660368893666,"results":"95","hashOfConfig":"51"},{"size":231,"mtime":1661131439398,"results":"96","hashOfConfig":"51"},{"size":3301,"mtime":1661131077540,"results":"97","hashOfConfig":"51"},{"size":663,"mtime":1660806674080,"results":"98","hashOfConfig":"51"},{"size":591,"mtime":1661132098742,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1d6moc6",{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"102"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"102"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"102"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"102"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"102"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"102"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"102"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/albert/Desktop/-/src/index.js",[],["210","211"],"/Users/albert/Desktop/-/src/App.js",[],"/Users/albert/Desktop/-/src/store/index.js",[],"/Users/albert/Desktop/-/src/store/GameState.js",[],"/Users/albert/Desktop/-/src/modules/piece-queue.js",[],"/Users/albert/Desktop/-/src/modules/KeyControls.js",[],"/Users/albert/Desktop/-/src/Pages/SinglePlayer.js",[],"/Users/albert/Desktop/-/src/Pages/TwoPlayer.js",[],"/Users/albert/Desktop/-/src/modules/firebase-config.js",[],"/Users/albert/Desktop/-/src/store/UserInfo.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/PieceQueue.js",["212"],"import PieceQueuePiece from \"./PieceQueuePiece\";\nimport styles from './PieceQueue.module.css'\nimport {pieceQueue} from '../../store/GameState'\nimport { useSelector } from \"react-redux\";\n\nconst PieceQueue= (props) =>{\n    const queueChanged= useSelector(state=>state.gameState.heldPiece)\n    let i = 0\n    let pieces = []\n    if (pieceQueue.isEmpty){\n        return <div className = {styles.pieceQueue}></div>\n    }\n\n    for (let pieceColor in pieceQueue.elements){\n        pieces.push(<PieceQueuePiece key = {i++} color = {pieceQueue.elements[pieceColor]}/>)\n    }\n    return <div className = {styles.pieceQueue}>{pieces}</div>\n}\n\nexport default PieceQueue;","/Users/albert/Desktop/-/src/Components/Multiplayer/OtherUsers.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/Grid.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/ReadyGo.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/OtherUser.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/WaitingMessage.js",["213","214"],"import {  memo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Modal from \"../UI/Modal\";\n\nimport styles from './WaitingMessage.module.css'\n\n\nconst WaitingMessage = ({ cancelRoomHandler }) => {\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n   const roomKey = useSelector((state) => state.userInfo.roomKey);\n\n   return (\n      <Modal>\n         <span className={styles[\"span\"]}>Waiting for {opponentName} to join...</span>\n         <button className={styles[\"cancel\"]} onClick={cancelRoomHandler}>CANCEL</button>\n      </Modal>\n   );\n};\n\nexport default memo(WaitingMessage);\n","/Users/albert/Desktop/-/src/Components/GameUI/Tetrimino.js",["215"],"export const TETRIMINOS = {\n  I: [\n    //I\n    [\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  ],\n\n  T: [\n    //T\n    [\n      [0, 1, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  L: [\n    //L\n    [\n      [0, 0, 1],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  J: [\n    //J\n    [\n      [1, 0, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  ],\n  Z: [\n    //Z\n    [\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  ],\n  S: [\n    //S\n    [\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  O: [\n    //O\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n  ],\n};\n\nexport const getRandomPiece = () => {\n  const value = Math.round(6 * Math.random());\n  switch (value) {\n    case 0:\n      return \"I\";\n    case 1:\n      return \"T\";\n    case 2:\n      return \"L\";\n    case 3:\n      return \"J\";\n    case 4:\n      return \"Z\";\n    case 5:\n      return \"S\";\n    case 6:\n      return \"O\";\n  }\n};\n\nexport const getPiece = (type, rotatePos, xPos, yPos) =>\n  TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n    row.map((col, colPos) => {\n      if (col) {\n        return { x: xPos + colPos, y: yPos + rowPos };\n      }\n      return null;\n    })\n  );\n\nexport const rotatePiece = (isCounterClockwise, { type, rotatePos }) => {\n  return isCounterClockwise\n    ? rotatePos === 0\n      ? TETRIMINOS[type].length - 1\n      : rotatePos - 1\n    : rotatePos === TETRIMINOS[type].length - 1\n    ? 0\n    : rotatePos + 1;\n};\n\nexport const convertMappingToCoords = (mapping) => {\n  let coordArray = [];\n  for (const array of mapping) {\n    for (const coord of array) {\n      if (coord) {\n        coordArray.push(coord);\n      }\n    }\n  }\n  return coordArray;\n};\n","/Users/albert/Desktop/-/src/Components/GameUI/HeldBlock.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/HowToPlay.js",[],["216","217"],"/Users/albert/Desktop/-/src/Components/GameUI/Block.js",["218"],"import { Fragment, useState } from \"react\";\nimport Modal from \"../UI/Modal\";\nimport styles from \"./Block.module.css\";\n\nconst Block = (props) => {\n   const color = props.color;\n   const [showSettings, setShowSettings] = useState(false);\n   \n   return (\n      <Fragment>\n         <div className={`${styles.block}  ${styles[color]}`}></div>\n         {showSettings && <Modal>Hellos</Modal>}\n      </Fragment>\n   );\n};\n\nexport default Block;\n","/Users/albert/Desktop/-/src/Components/GameUI/PieceQueuePiece.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/InviteNotfications.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/Game.js",["219","220"],"import { Fragment, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport KeyControls, {\n   keyIsDisabled,\n   keyIsPressed,\n   keyShiftCounter,\n} from \"../../modules/KeyControls\";\nimport { gameStateActions } from \"../../store/GameState\";\nimport GameSettingsButton from \"./GameSettingsButton\";\nimport Grid from \"./Grid\";\nimport HeldBlock from \"./HeldBlock\";\nimport LinesCleared from \"./LinesCleared\";\nimport PieceQueue from \"./PieceQueue\";\nimport StopWatch from \"./StopWatch\";\n\nlet startButtonLocked = false;\nlet controlsLocked = false;\nconst Game = () => {\n   const dispatch = useDispatch();\n\n   const controls = useSelector((state) => state.controls);\n\n   const displayMessage = useSelector((state) => state.gameState.displayMessage);\n   const gameRunning = useSelector((state) => state.gameState.gameRunning);\n   const currentGameStatus = useSelector((state) => state.gameState.currentGameStatus);\n   const gettingPiece = useSelector((state) => state.gameState.gettingPiece);\n   const linesCleared = useSelector((state) => state.gameState.linesCleared);\n   const linesToClear = useSelector((state) => state.gameState.linesToClear);\n   const endTurn = useSelector((state) => state.gameState.endTurn);\n\n   const gameSpeed = useSelector((state) => state.gameState.gameSpeed);\n\n   useEffect(() => {\n      if (displayMessage === \"READY\") {\n         dispatch(gameStateActions.gettingReadySP());\n      }\n   }, [displayMessage, dispatch]);\n\n   const beginGame = async () => {\n      dispatch(gameStateActions.setDisplayMessageSP(\"READY\"));\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      dispatch(gameStateActions.setDisplayMessageSP(\"GO\"));\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      startButtonLocked = false;\n      dispatch(gameStateActions.setDisplayMessageSP(\"in game\"));\n      dispatch(gameStateActions.newGameSP());\n   };\n\n   document.onkeydown = (keycode) => {\n      if (startButtonLocked) {\n         return;\n      }\n      if (keycode.key === controls[\"newGame\"]) {\n         startButtonLocked = true;\n         beginGame();\n      }\n   };\n   useEffect(() => {\n      if (currentGameStatus === \"FROZEN\") {\n         dispatch(gameStateActions.clearLinesSP());\n      }\n   }, [currentGameStatus, dispatch]);\n\n   useEffect(() => {\n      if (endTurn) {\n         dispatch(gameStateActions.resetRotationSP());\n         if (linesCleared >= linesToClear) {\n            dispatch(gameStateActions.setGettingNewPieceSP(false));\n            dispatch(gameStateActions.gameWonSP());\n         } else {\n            dispatch(gameStateActions.setGettingNewPieceSP(true));\n         }\n      }\n   }, [linesCleared, linesToClear, dispatch, endTurn]);\n\n   useEffect(() => {\n      if (gettingPiece) {\n         dispatch(gameStateActions.getNewPieceSP());\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n      }\n   }, [gettingPiece, dispatch]);\n\n   const gameLoop = () => {\n      dispatch(gameStateActions.dropPieceSP());\n   };\n\n   const keyHandler = async () => {\n      if (keyIsPressed[controls[\"rotateLeft\"]] && !keyIsDisabled[controls[\"rotateLeft\"]]) {\n         dispatch(gameStateActions.rotatePieceSP(true));\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"rotateLeft\"]] = true;\n      }\n      if (keyIsPressed[controls[\"rotateRight\"]] && !keyIsDisabled[controls[\"rotateRight\"]]) {\n         dispatch(gameStateActions.rotatePieceSP(false));\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"rotateRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"hold\"]] && !keyIsDisabled[controls[\"hold\"]]) {\n         dispatch(gameStateActions.holdPieceSP());\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"hold\"]] = true;\n      }\n      if (keyIsPressed[controls[\"hardDrop\"]] && !keyIsDisabled[controls[\"hardDrop\"]]) {\n         controlsLocked = true;\n         dispatch(gameStateActions.hardDropSP());\n         keyIsDisabled[controls[\"hardDrop\"]] = true;\n      }\n      if (keyIsPressed[controls[\"softDrop\"]] && !keyIsDisabled[controls[\"softDrop\"]]) {\n         keyShiftCounter[controls[\"softDrop\"]] = 1;\n         dispatch(gameStateActions.dropPieceSP());\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveRight\"]] && !keyIsDisabled[controls[\"moveRight\"]]) {\n         keyShiftCounter[controls[\"moveRight\"]] = 1;\n         dispatch(gameStateActions.shiftRightSP());\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveLeft\"]] && !keyIsDisabled[controls[\"moveLeft\"]]) {\n         keyShiftCounter[controls[\"moveLeft\"]] = 1;\n         dispatch(gameStateActions.shiftLeftSP());\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n      }\n   };\n\n   const keyShiftHandler = () => {\n      for (let key in keyShiftCounter) {\n         if (keyShiftCounter[key]) {\n            keyShiftCounter[key] += 1;\n         }\n      }\n      if (\n         keyIsPressed[controls[\"softDrop\"]] &&\n         keyIsDisabled[controls[\"softDrop\"]] &&\n         keyShiftCounter[controls[\"softDrop\"]] > 32\n      ) {\n         dispatch(gameStateActions.dropPieceSP());\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n         keyShiftCounter[controls[\"softDrop\"]] = 28;\n      }\n      if (\n         keyIsPressed[controls[\"moveRight\"]] &&\n         keyIsDisabled[controls[\"moveRight\"]] &&\n         keyShiftCounter[controls[\"moveRight\"]] > 32\n      ) {\n         dispatch(gameStateActions.shiftRightSP());\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n         keyShiftCounter[controls[\"moveRight\"]] = 28;\n      }\n      if (\n         keyIsPressed[controls[\"moveLeft\"]] &&\n         keyIsDisabled[controls[\"moveLeft\"]] &&\n         keyShiftCounter[controls[\"moveLeft\"]] > 32\n      ) {\n         dispatch(gameStateActions.shiftLeftSP());\n         dispatch(gameStateActions.getGhostCoordsSP());\n         dispatch(gameStateActions.showGhostPieceSP());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n         keyShiftCounter[controls[\"moveLeft\"]] = 28;\n      }\n   };\n\n   useEffect(() => {\n      if (gameRunning) {\n         const dropPieceInterval = setInterval(() => {\n            gameLoop();\n         }, gameSpeed);\n         const handleInputInterval = setInterval(() => {\n            keyHandler();\n         }, 1);\n         const shiftInputInterval = setInterval(() => {\n            keyShiftHandler();\n         }, 1);\n         return () => {\n            clearInterval(dropPieceInterval);\n            clearInterval(handleInputInterval);\n            clearInterval(shiftInputInterval);\n         };\n      }\n   }, [gameRunning, dispatch, controls]);\n\n   return (\n      <Fragment>\n         <KeyControls />\n         <div\n            style={{\n               display: \"flex\",\n               flexWrap: \"nowrap\",\n               justifyContent: \"center\",\n            }}\n         >\n            <HeldBlock />\n            <Grid></Grid>\n            <PieceQueue />\n         </div>\n         <div style={{display:\"flex\",flexDirection:\"column\", textAlign: \"center\" }}>\n            <StopWatch />\n            <LinesCleared />\n            <GameSettingsButton />\n         </div>\n      </Fragment>\n   );\n};\n\nexport default Game;\n","/Users/albert/Desktop/-/src/Components/Multiplayer/GameShared.js",["221","222","223","224"],"import { Fragment, memo, useEffect} from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { gameStateActions2, myRoomRef, pieceQueue } from \"../../store/GameState2\";\nimport { child, off, onDisconnect, onValue, set } from \"@firebase/database\";\nimport { auth, getUsernameFromuid, onlineUsersRef } from \"../../modules/firebase-config\";\n\nimport Grid from \"./Components/Grid\";\nimport PieceQueue from \"./Components/PieceQueue\";\nimport LineClearedCounter from \"./Components/LineClearedCounter\";\nimport WhoseTurnText from \"./Components/WhoseTurnText\";\nimport InputForm from \"./Components/InputForm\";\nimport InnerGame from \"./InnerGame\";\nimport Card from \"../UI/Card\";\n\nimport KeyControls, {\n} from \"../../modules/KeyControls\";\n\nlet startButtonLocked = false;\n\nconst GameShared = () => {\n   const dispatch = useDispatch();\n\n   const controls = useSelector((state) => state.controls);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n\n   const myTurn = useSelector((state) => state.gameState2.myTurn);\n   const displayMessage = useSelector((state) => state.gameState2.displayMessage);\n   const gameRunning = useSelector((state) => state.gameState2.gameRunning);\n   const currentGameStatus = useSelector((state) => state.gameState2.currentGameStatus);\n   const myLinesCleared = useSelector((state) => state.gameState2.myLinesCleared);\n   const linesToClear = useSelector((state) => state.gameState2.linesToClear);\n   const turnTaken = useSelector((state) => state.gameState2.turnTaken);\n   const keepTurn2 = useSelector((state) => state.gameState2.keepTurn2);\n\n   if (!displayMessage) {\n      startButtonLocked = false;\n   }\n\n   if (displayMessage.includes(\"WON\")) {\n      setTimeout(() => {\n         startButtonLocked = false;\n      }, 1000);\n   }\n\n   if (currentGameStatus === \"FROZEN\") {\n      dispatch(gameStateActions2.unfreeze());\n      dispatch(gameStateActions2.clearLines());\n      dispatch(gameStateActions2.setTurnTaken(true));\n   }\n\n   useEffect(() => {\n      if (turnTaken) {\n         if (myLinesCleared >= linesToClear) {\n            set(child(myRoomRef, \"turn\"), null);\n            getUsernameFromuid(auth.currentUser.uid).then((name) => {\n               set(child(myRoomRef, \"displayMessage\"), `${name} WON`);\n            });\n            dispatch(gameStateActions2.gameWon());\n         } else if (keepTurn2) {\n            // console.log('keep turn')\n         } else {\n            // console.log('other turn')\n            set(child(myRoomRef, \"turn\"), playerNumber === 1 ? 2 : 1);\n         }\n      }\n      dispatch(gameStateActions2.setTurnTaken(false));\n   }, [myLinesCleared, linesToClear, dispatch, turnTaken, keepTurn2]);\n\n   useEffect(() => {\n      if (gameRunning) {\n         off(child(myRoomRef, `player${playerNumber === 1 ? 2 : 1}GameInfo`));\n         dispatch(gameStateActions2.newGame());\n         set(child(myRoomRef, `player${playerNumber}GameInfo`), {\n            gameQueue: pieceQueue.elements,\n            linesCleared: myLinesCleared,\n         });\n\n         return () => {};\n      }\n   }, [gameRunning]);\n\n   useEffect(() => {\n      set(child(myRoomRef, `player${playerNumber}GameInfo`), {\n         gameQueue: pieceQueue.elements,\n         linesCleared: myLinesCleared,\n      });\n   }, [myLinesCleared, pieceQueue.elements]);\n\n\n   const beginGame = async () => {\n      set(child(myRoomRef, \"displayMessage\"), \"READY\");\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      set(child(myRoomRef, \"displayMessage\"), \"GO\");\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      await set(child(myRoomRef, \"displayMessage\"), \"in game\");\n      await set(child(myRoomRef, \"grid\"), [\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      ]);\n      await set(child(myRoomRef, \"/turn\"), playerNumber === 1 ? 2 : 1);\n   };\n\n   onDisconnect(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\")).set(false);\n   useEffect(() => {\n      onValue(child(myRoomRef, \"displayMessage\"), (snapshot) => {\n         if (snapshot.exists()) {\n            dispatch(gameStateActions2.setDisplayMessage(snapshot.val()));\n            if (snapshot.val() === \"READY\") {\n               dispatch(gameStateActions2.gettingReady());\n               set(child(myRoomRef, `player${playerNumber}GameInfo`), {\n                  gameQueue: pieceQueue.elements,\n                  linesCleared: myLinesCleared,\n               });\n\n               startButtonLocked = true;\n            }\n         }\n      });\n   });\n\n   //updating the game grid\n   if (gameRunning && !myTurn) {\n      onValue(child(myRoomRef, \"grid\"), (snapshot) => {\n         if (snapshot.exists()) {\n            dispatch(gameStateActions2.setGrid(snapshot.val()));\n         }\n      });\n   }\n   if (gameRunning && !myTurn) {\n      onValue(child(myRoomRef, `player${playerNumber}GameInfo/linesCleared`), (snapshot) => {\n         dispatch(gameStateActions2.setMyLinesCleared(snapshot.val()));\n      });\n   }\n\n   //updating the queuePieces and linesClearedNumber\n   onValue(child(myRoomRef, `player${playerNumber === 1 ? 2 : 1}GameInfo`), (snapshot) => {\n      if (snapshot.exists()) {\n         dispatch(\n            gameStateActions2.setOpponentInfo({\n               opponentPieceQueue: snapshot.val().gameQueue,\n               opponentLinesCleared: snapshot.val().linesCleared,\n            })\n         );\n      }\n   });\n\n   onValue(child(myRoomRef, \"turn\"), (snapshot) => {\n      if (snapshot.exists()) {\n         dispatch(gameStateActions2.setMyTurn(snapshot.val() === playerNumber));\n      }\n   });\n\n   document.onkeydown = (keycode) => {\n      if (keycode.key ===\" \"){\n         keycode.preventDefault()\n      }\n      if (startButtonLocked) {\n         return;\n      }\n      if (keycode.key === controls[\"newGame\"]) {\n         startButtonLocked = true;\n         beginGame();\n         //    setStartGame(true);\n         //    dispatch(gameStateActions.newGame());\n         //    dispatch(gameStateActions.getNewPiece());\n         //    dispatch(gameStateActions.getGhostCoords());\n         //    dispatch(gameStateActions.showGhostPiece());\n      }\n   };\n   return (\n      <Fragment>\n         <KeyControls></KeyControls>\n         <InnerGame></InnerGame>\n         <WhoseTurnText />\n         <div\n            style={{\n               display: \"flex\",\n               flexWrap: \"nowrap\",\n               justifyContent: \"center\",\n            }}\n         >\n            <LineClearedCounter player=\"opponent\" />\n            <PieceQueue player=\"opponent\"></PieceQueue>\n            <Grid></Grid>\n            <PieceQueue player=\"mine\"></PieceQueue>\n            <LineClearedCounter player=\"mine\" />\n         </div>\n         {!gameRunning && <InputForm />}\n         <Card>\n            <div style={{ color: \"yellow\" }}>\n               <p>How To Play:</p>\n               <p>Press esc to start.</p>\n               <p>Game starts with other person first.</p>\n               <p>After player drops piece, other player goes.</p>\n               <p>Person that causes the board to overflow loses a line point.</p>\n               <p>Play until a person clears an amount of lines.</p>\n            </div>\n         </Card>\n      </Fragment>\n   );\n};\n\nexport default memo(GameShared);\n","/Users/albert/Desktop/-/src/store/GameState2.js",["225","226"],"import { child, off, set } from \"@firebase/database\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nimport { TETRIMINOS } from \"../Components/GameUI/Tetrimino\";\nimport { auth, getUsernameFromuid } from \"../modules/firebase-config\";\n\nimport Queue from \"../modules/piece-queue\";\n\nconst LINESTOCLEAR = 15\n\nlet pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\nconst getRandomPiece = () => {\n   if (pieceArray.length === 0) {\n      pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n   }\n   const value = Math.floor(pieceArray.length * Math.random());\n   return pieceArray.splice(value, 1);\n};\n\nconst getCoords = (type, rotatePos, xPos, yPos) =>\n   TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n      row.map((col, colPos) => {\n         if (col) {\n            return { x: xPos + colPos, y: yPos + rowPos };\n         }\n         return null;\n      })\n   );\nconst rotatePiece = (isCounterClockwise, state) => {\n   let { rotatePos } = state;\n   if (isCounterClockwise) {\n      if (rotatePos === 0) {\n         return 3;\n      } else {\n         return rotatePos - 1;\n      }\n   } else {\n      if (rotatePos === 3) {\n         return 0;\n      } else {\n         return rotatePos + 1;\n      }\n   }\n};\n\nconst convertMappingToCoords = (state, mapping, forGhost = false) => {\n   let coordArray = [];\n   for (const array of mapping) {\n      for (const coord of array) {\n         if (coord) {\n            if (coordIsValid(state, coord, forGhost)) {\n               coordArray.push(coord);\n            }\n         }\n      }\n   }\n   return coordArray;\n};\n\n\nconst gameStateInitialState = {\n   playerNumber: null,\n\n   gameRunning: false,\n   myCurrentShape: null,\n   myCurrentCoords: [],\n   myGhostCoords: [],\n   myPieceQueue: null,\n   myHeldPiece: null,\n   myLinesCleared: 0,\n\n   opponentPieceQueue: [],\n   opponentHeldPiece: null,\n   opponentLinesCleared: 0,\n\n   currentGameStatus: \"NONE\",\n   rotatePos: 0,\n   xPos: 3,\n   yPos: 0,\n\n   grid: [\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n   ],\n\n   rotated: false,\n   displayMessage: \"\",\n\n   myTurn: null,\n   linesToClear:LINESTOCLEAR,\n   lineDeduction:2,\n   keepTurn: 0,\n   keepTurn2:false,\n\n   turnTaken : false\n};\n\nexport let myRoomRef = null;\n\nexport let pieceQueue = new Queue();\n\nconst removeLastState = (state) => {\n   for (const coord of state.myCurrentCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst removeLastGhostPiece = (state) => {\n   for (const coord of state.myGhostCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst placeBlocks = (state, forGhost = false) => {\n   let copiedGrid = state.grid.map(nested=>nested.slice())\n   if (forGhost) {\n      const colorName = state.myCurrentShape + \"ghost\";\n      for (const coord of state.myGhostCoords) {\n         copiedGrid[coord.y][coord.x] = colorName;\n         for (const currentCoord of state.myCurrentCoords) {\n            if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n               copiedGrid[coord.y][coord.x] = state.myCurrentShape;\n            }\n         }\n      }\n   } else {\n      for (const coord of state.myCurrentCoords) {\n         copiedGrid[coord.y][coord.x] = state.myCurrentShape;\n      }\n   }\n   state.grid = copiedGrid\n};\n\nconst coordIsValid = (state, coord, forGhost = false) => {\n   if (coord) {\n      if (coord.y <= 20 && coord.x >= 0 && coord.x <= 9) {\n         for (let currentCoord of state.myCurrentCoords) {\n            if (forGhost) {\n               if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n                  return true;\n               }\n            }\n         }\n         if (state.grid[coord.y][coord.x].length > 1) {\n            return true;\n         }\n      }\n   }\n   return false;\n};\n\nconst gameStateSlice2 = createSlice({\n   name: \"gameState2\",\n   initialState: gameStateInitialState,\n   reducers: {\n      reset(state) {\n         state.playerNumber = null;\n\n         state.gameRunning = false;\n         state.myCurrentShape = null;\n         state.myCurrentCoords = [];\n         state.myGhostCoords = [];\n         state.myPieceQueue = null;\n         state.myHeldPiece = null;\n         state.myLinesCleared = 0;\n\n         state.opponentPieceQueue = [];\n         state.opponentHeldPiece = null;\n         state.opponentLinesCleared = 0;\n\n         state.currentGameStatus = \"NONE\";\n         state.rotatePos = 0;\n         state.xPos = 3;\n         state.yPos = 0;\n\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n\n         state.rotated = false;\n         state.displayMessage = \"\";\n\n         state.keepTurn = 0\n         state.keepTurn2=false;\n         state.myTurn = null;\n         state.linesToClear =LINESTOCLEAR;\n         state.lineDeduction = Math.floor(LINESTOCLEAR/5)\n         myRoomRef = null;\n         pieceQueue = new Queue()\n\n         state.turnTaken = false\n      },\n      setGrid(state, grid) {\n         state.grid = grid.payload;\n      },\n      gettingReady(state) {\n         state.myCurrentShape = null;\n         state.myCurrentCoords = [];\n         state.myGhostCoords = [];\n         state.myPieceQueue = null;\n         state.myHeldPiece = null;\n         state.myLinesCleared = 0;\n         state.currentGameStatus = \"NONE\";\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n\n      },\n      newGame(state) {\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n\n         pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n         pieceQueue = new Queue();\n         for (let i = 0; i < 5; i++) {\n            pieceQueue.enqueue(...getRandomPiece());\n         }\n\n      },\n      setOpponentInfo(state, action) {\n         state.opponentPieceQueue = action.payload.opponentPieceQueue;\n         state.opponentLinesCleared = action.payload.opponentLinesCleared;\n      },\n      clearLines(state) {\n         let newGrid = [];\n         let linesCleared = 0;\n         for (const row of state.grid) {\n            if (row.every((blockType) => blockType !== \"None\")) {\n               state.myLinesCleared += 1;\n               linesCleared += 1;\n            } else {\n               newGrid.push(row);\n            }\n         }\n         for (let i = 0; i < linesCleared; i++) {\n            newGrid.unshift([\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n            ]);\n         }\n         state.grid = newGrid;\n         set(child(myRoomRef, \"grid\"), state.grid);\n         if (linesCleared>0){\n            state.keepTurn = state.keepTurn+1\n            state.keepTurn2 = true\n         }\n         else{\n            state.keepTurn2 = false\n         }\n         // off(child(myRoomRef, `player${state.playerNumber}GameInfo/linesCleared`))\n      },\n      unfreeze(state) {\n         state.currentGameStatus = \"FALLING\";\n      },\n      getNewPiece(state, opponentName) {\n         state.myGhostCoords = [];\n         state.myCurrentShape = pieceQueue.dequeue();\n         pieceQueue.enqueue(...getRandomPiece());\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.grid = [\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            ];\n            state.myCurrentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n            off(child(myRoomRef, `player${state.playerNumber === 1 ? 2 : 1}GameInfo`));\n            set(\n               child(myRoomRef, `player${state.playerNumber === 1 ? 2 : 1}GameInfo/linesCleared`),\n               state.opponentLinesCleared - state.lineDeduction\n            );\n            off(child(myRoomRef, \"displayMessage\"));\n            state.displayMessage = `${opponentName.payload} CAUSED OVERFLOW`;\n            set(child(myRoomRef, \"displayMessage\"), `${opponentName.payload} CAUSED OVERFLOW`);\n            setTimeout(() => {\n               set(child(myRoomRef, \"displayMessage\"), \"in game\");\n            }, 1000);\n\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         }\n         placeBlocks(state);\n         // set(\n         //    child(myRoomRef, `player${state.playerNumber}GameInfo/gameQueue`),\n         //    pieceQueue.elements\n         // );\n\n         state.currentGameStatus = \"FALLING\";\n      },\n      rotatePiece(state, action) {\n         const originalRotatePos = state.rotatePos;\n         state.rotatePos = rotatePiece(action.payload, {\n            rotatePos: state.rotatePos,\n         });\n         removeLastState(state);\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.rotatePos = originalRotatePos;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      dropPiece(state) {\n         if (state.gameRunning) {\n            if (state.currentGameStatus === \"LANDING\") {\n               state.currentGameStatus = \"FROZEN\";\n               return;\n            }\n            removeLastState(state);\n            state.yPos += 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n            if (state.myCurrentCoords.length < 4) {\n               state.yPos -= 1;\n               state.myCurrentCoords = convertMappingToCoords(\n                  state,\n                  getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n               );\n               state.currentGameStatus = \"LANDING\";\n            } else {\n               state.currentGameStatus = \"FALLING\";\n            }\n            placeBlocks(state);\n         } else {\n         }\n      },\n      getGhostCoords(state) {\n         removeLastGhostPiece(state);\n         state.myGhostCoords = [];\n         for (let coord of state.myCurrentCoords) {\n            state.myGhostCoords.push({ x: coord.x, y: coord.y });\n         }\n         let ghostYPos = state.yPos;\n         while (state.myGhostCoords.length === 4) {\n            ghostYPos += 1;\n            state.myGhostCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, ghostYPos),\n               true\n            );\n         }\n         ghostYPos -= 1;\n         state.myGhostCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, ghostYPos),\n            true\n         );\n      },\n      hardDrop(state) {\n         removeLastState(state);\n         state.myCurrentCoords = state.myGhostCoords;\n         placeBlocks(state);\n         state.currentGameStatus = \"FROZEN\";\n      },\n      showGhostPiece(state) {\n         placeBlocks(state, true);\n      },\n      shiftLeft(state) {\n         removeLastState(state);\n         state.xPos -= 1;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.xPos += 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      shiftRight(state) {\n         removeLastState(state);\n         state.xPos += 1;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.xPos -= 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      placeCurrentPiece(state){\n         placeBlocks(state)\n      },\n\n      gameWon(state){\n         state.gameRunning = false;\n      },\n      holdPiece(state) {\n         if (state.rotated === true) {\n            return;\n         }\n         state.rotated = true;\n\n         removeLastState(state);\n         if (state.heldPiece === null) {\n            state.heldPiece = state.currentShape;\n            state.currentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n         } else {\n            const placeHolder = state.currentShape;\n            state.currentShape = state.heldPiece;\n            state.heldPiece = placeHolder;\n         }\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         placeBlocks(state);\n         state.currentPieceState = \"FALLING\";\n      },\n      setMultiplayer(state, action) {\n         state.playerNumber = action.payload.playerNumber;\n         myRoomRef = action.payload.roomRef;\n      },\n      setDisplayMessage(state, displayMessage) {\n         state.displayMessage = displayMessage.payload;\n         if (state.displayMessage === \"in game\") {\n            state.gameRunning = true;\n         }\n         if (state.displayMessage.includes(\"WON\")) {\n            state.gameRunning = false;\n         }\n      },\n      setMyTurn(state, bool) {\n         // state.keepTurn = 0\n         state.myTurn = bool.payload;\n      },\n      setMyLinesCleared(state, lines) {\n         state.myLinesCleared = lines.payload;\n      },\n      setLinesToClear(state,lines){\n         state.linesToClear = lines.payload\n         state.lineDeduction = Math.floor(lines.payload/5)\n      },\n      setTurnTaken(state,bool){\n         state.turnTaken = bool.payload\n      },\n   },\n});\n\n\nexport const gameStateActions2 = gameStateSlice2.actions;\n\nexport default gameStateSlice2.reducer;\n","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/ReadyGo.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Grid.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Block.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/PieceQueue.js",["227"],"import PieceQueuePiece from \"./PieceQueuePiece\";\nimport styles from \"./PieceQueue.module.css\";\nimport { pieceQueue } from \"../../../store/GameState2\";\nimport { useSelector } from \"react-redux\";\nimport { Fragment } from \"react\";\n\nconst PieceQueue = ({ player }) => {\n   const opponentPieces = useSelector((state) => state.gameState2.opponentPieceQueue);\n   const queueChanged = useSelector((state) => state.gameState2.myTurn);\n   let i = 0;\n   let pieces = [];\n   if (player === \"mine\") {\n      if (pieceQueue.isEmpty) {\n         return <div className={styles.pieceQueue}></div>;\n      }\n\n      for (let pieceColor in pieceQueue.elements) {\n         pieces.push(<PieceQueuePiece key={i++} color={pieceQueue.elements[pieceColor]} />);\n      }\n      return (\n         <Fragment>\n            <div className={styles.pieceQueue}>{pieces}</div>\n         </Fragment>\n      );\n   } else if (player === \"opponent\") {\n      if (!opponentPieces || opponentPieces.isEmpty) {\n         return <div className={styles.pieceQueue}></div>;\n      }\n      for (let pieceColor in opponentPieces) {\n         if (!pieceColor) {\n            continue;\n         }\n         pieces.push(<PieceQueuePiece key={i++} color={opponentPieces[pieceColor]} />);\n      }\n      return (\n         <Fragment>\n            <div className={styles.pieceQueue}>\n               {pieces}\n            </div>\n         </Fragment>\n      );\n   }\n};\n\nexport default PieceQueue;\n","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/PieceQueuePiece.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Tetrimino.js",["228"],"/Users/albert/Desktop/-/src/Components/GameUI/StopWatch.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/WhoseTurnText.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/LineClearedCounter.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/InputForm.js",[],"/Users/albert/Desktop/-/src/Components/UI/Modal.js",[],"/Users/albert/Desktop/-/src/Components/UI/NavigationBar.js",[],"/Users/albert/Desktop/-/src/store/Controls.js",[],"/Users/albert/Desktop/-/src/Components/KeyBindings/KeyBindings.js",[],"/Users/albert/Desktop/-/src/Components/KeyBindings/KeyBinding.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/InnerGame.js",["229"],"import { child, off, set } from \"@firebase/database\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { keyIsDisabled, keyIsPressed, keyShiftCounter } from \"../../modules/KeyControls\";\nimport { gameStateActions2, myRoomRef, pieceQueue } from \"../../store/GameState2\";\n\nlet controlsLocked = false;\n\nconst InnerGame = () => {\n   const dispatch = useDispatch();\n\n   const controls = useSelector((state) => state.controls);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n\n   const myTurn = useSelector((state) => state.gameState2.myTurn);\n   const gameRunning = useSelector((state) => state.gameState2.gameRunning);\n   const keepTurn = useSelector((state) => state.gameState2.keepTurn);\n   const grid = useSelector((state) => state.gameState2.grid);\n   useEffect(() => {\n      if ((gameRunning && myTurn)) {\n\n         \n         off(child(myRoomRef, \"grid\"));\n         dispatch(gameStateActions2.getNewPiece(opponentName));\n         set(child(myRoomRef, `player${playerNumber}GameInfo/gameQueue`), pieceQueue.elements);\n         dispatch(gameStateActions2.placeCurrentPiece());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         const dropPieceInterval = setInterval(() => {\n            gameLoop();\n         }, 300);\n         const handleInputInterval = setInterval(() => {\n            keyHandler();\n         }, 1);\n         const shiftInputInterval = setInterval(() => {\n            keyShiftHandler();\n         }, 1);\n         return () => {\n            clearInterval(dropPieceInterval);\n            clearInterval(handleInputInterval);\n            clearInterval(shiftInputInterval);\n         };\n      }\n   }, [myTurn, gameRunning, dispatch,keepTurn]);\n\n   const keyShiftHandler = async () => {\n      for (let key in keyShiftCounter) {\n         if (keyShiftCounter[key]) {\n            keyShiftCounter[key] += 1;\n         }\n      }\n      if (\n         keyIsPressed[controls[\"softDrop\"]] &&\n         keyIsDisabled[controls[\"softDrop\"]] &&\n         keyShiftCounter[controls[\"softDrop\"]] > 40\n      ) {\n         dispatch(gameStateActions2.dropPiece());\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n         keyShiftCounter[controls[\"softDrop\"]] = 30;\n      }\n      if (\n         keyIsPressed[controls[\"moveRight\"]] &&\n         keyIsDisabled[controls[\"moveRight\"]] &&\n         keyShiftCounter[controls[\"moveRight\"]] > 40\n      ) {\n         dispatch(gameStateActions2.shiftRight());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n         keyShiftCounter[controls[\"moveRight\"]] = 30;\n      }\n      if (\n         keyIsPressed[controls[\"moveLeft\"]] &&\n         keyIsDisabled[controls[\"moveLeft\"]] &&\n         keyShiftCounter[controls[\"moveLeft\"]] > 40\n      ) {\n         dispatch(gameStateActions2.shiftLeft());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n         keyShiftCounter[controls[\"moveLeft\"]] = 30;\n      }\n   };\n   const keyHandler = async () => {\n      if (!gameRunning || controlsLocked) {\n         return;\n      }\n      if (keyIsPressed[controls[\"rotateLeft\"]] && !keyIsDisabled[controls[\"rotateLeft\"]]) {\n         dispatch(gameStateActions2.rotatePiece(true));\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"rotateLeft\"]] = true;\n      }\n      if (keyIsPressed[controls[\"rotateRight\"]] && !keyIsDisabled[controls[\"rotateRight\"]]) {\n         dispatch(gameStateActions2.rotatePiece(false));\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"rotateRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"hardDrop\"]] && !keyIsDisabled[controls[\"hardDrop\"]]) {\n         controlsLocked = true;\n         dispatch(gameStateActions2.hardDrop());\n         keyIsDisabled[controls[\"hardDrop\"]] = true;\n         // dispatch(gameStateActions2.setTurnTaken(true));\n         setTimeout(() => {\n            controlsLocked = false;\n         }, 400);\n      }\n      if (keyIsPressed[controls[\"softDrop\"]] && !keyIsDisabled[controls[\"softDrop\"]]) {\n         keyShiftCounter[controls[\"softDrop\"]] = 1;\n         dispatch(gameStateActions2.dropPiece());\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveRight\"]] && !keyIsDisabled[controls[\"moveRight\"]]) {\n         keyShiftCounter[controls[\"moveRight\"]] = 1;\n         dispatch(gameStateActions2.shiftRight());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveLeft\"]] && !keyIsDisabled[controls[\"moveLeft\"]]) {\n         keyShiftCounter[controls[\"moveLeft\"]] = 1;\n         dispatch(gameStateActions2.shiftLeft());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n      }\n   };\n   const gameLoop = async () => {\n      dispatch(gameStateActions2.dropPiece());\n      dispatch(gameStateActions2.getGhostCoords());\n      dispatch(gameStateActions2.showGhostPiece());\n   };\n   useEffect(() => {\n      if (myTurn) {\n         // off(child(myRoomRef, \"grid\"))\n         set(child(myRoomRef, \"grid\"), grid);\n      }\n   }, [grid, myTurn]);\n\n   return;\n};\nexport default InnerGame;\n","/Users/albert/Desktop/-/src/Components/UI/Login.js",["230","231"],"import { onAuthStateChanged, signInAnonymously, signOut } from \"firebase/auth\";\nimport { child, remove, set } from \"firebase/database\";\nimport { Fragment, memo, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { auth, onlineUsersRef } from \"../../modules/firebase-config\";\nimport { myRoomRef } from \"../../store/GameState2\";\nimport Modal from \"./Modal\";\n\nimport styles from \"./Login.module.css\";\n\nconst Login = () => {\n   const isLoggedIn = useSelector((state) => state.userInfo.isLoggedIn);\n   const [loggingIn, setLoggingIn] = useState(false);\n   const [usernameInput, setUsernameInput] = useState(\"\");\n   const [showError, setShowError] = useState(false);\n\n   const loginHandler = async (event) => {\n      event.preventDefault();\n      if (usernameInput.trim().length === 0) {\n         setShowError(true);\n      } else {\n         await signInAnonymously(auth);\n         await set(child(onlineUsersRef, auth.currentUser.uid), {\n            username: usernameInput,\n            inRoom: false,\n         });\n         setUsernameInput(\"\");\n         setShowError(false);\n      }\n   };\n\n   const logoutHandler = async () => {\n      setLoggingIn(false);\n      remove(child(onlineUsersRef, auth.currentUser.uid));\n      if (myRoomRef) {\n         remove(myRoomRef);\n      }\n\n      signOut(auth);\n   };\n\n   const errorMessage = <p>Invalid Username</p>;\n\n   if (!isLoggedIn) {\n      return (\n         <Fragment>\n            <li\n               className={styles[\"login\"]}\n               onClick={() => {\n                  setLoggingIn(true);\n               }}\n            >\n               Login\n            </li>\n            {loggingIn && (\n               <Modal\n                  onClick={() => {\n                     setLoggingIn(false);\n                  }}\n               >\n                  <form className={styles[\"login\"]} onSubmit={loginHandler}>\n                     <label htmlFor=\"name\">Username: </label>\n                     <input\n                        id=\"name\"\n                        value={usernameInput}\n                        onChange={(event) => {\n                           setUsernameInput(event.target.value);\n                        }}\n                     ></input>\n\n                     <button>Login</button>\n                  </form>\n                  {showError && <div className={styles[\"error-text\"]}>{errorMessage}</div>}\n               </Modal>\n            )}\n         </Fragment>\n      );\n   } else {\n      return (\n         <li className={styles[\"login\"]} onClick={logoutHandler}>\n            Logout\n         </li>\n      );\n   }\n};\nexport default memo(Login);\n","/Users/albert/Desktop/-/src/Components/UI/Card.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/LeaveRoom.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/InviteNotification.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/LinesCleared.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/GameSettings.js",[],"/Users/albert/Desktop/-/src/Hooks/use-input.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/GameSettingsButton.js",[],{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","severity":1,"message":"237","line":7,"column":11,"nodeType":"238","messageId":"239","endLine":7,"endColumn":23},{"ruleId":"236","severity":1,"message":"240","line":2,"column":10,"nodeType":"238","messageId":"239","endLine":2,"endColumn":21},{"ruleId":"236","severity":1,"message":"241","line":10,"column":10,"nodeType":"238","messageId":"239","endLine":10,"endColumn":17},{"ruleId":"242","severity":1,"message":"243","line":161,"column":3,"nodeType":"244","messageId":"245","endLine":176,"endColumn":4},{"ruleId":"232","replacedBy":"246"},{"ruleId":"234","replacedBy":"247"},{"ruleId":"236","severity":1,"message":"248","line":7,"column":25,"nodeType":"238","messageId":"239","endLine":7,"endColumn":40},{"ruleId":"236","severity":1,"message":"249","line":17,"column":5,"nodeType":"238","messageId":"239","endLine":17,"endColumn":19},{"ruleId":"250","severity":1,"message":"251","line":189,"column":7,"nodeType":"252","endLine":189,"endColumn":40,"suggestions":"253"},{"ruleId":"236","severity":1,"message":"254","line":27,"column":10,"nodeType":"238","messageId":"239","endLine":27,"endColumn":22},{"ruleId":"250","severity":1,"message":"255","line":70,"column":7,"nodeType":"252","endLine":70,"endColumn":69,"suggestions":"256"},{"ruleId":"250","severity":1,"message":"257","line":83,"column":7,"nodeType":"252","endLine":83,"endColumn":20,"suggestions":"258"},{"ruleId":"250","severity":1,"message":"259","line":90,"column":7,"nodeType":"252","endLine":90,"endColumn":44,"suggestions":"260"},{"ruleId":"236","severity":1,"message":"261","line":5,"column":10,"nodeType":"238","messageId":"239","endLine":5,"endColumn":14},{"ruleId":"236","severity":1,"message":"262","line":5,"column":16,"nodeType":"238","messageId":"239","endLine":5,"endColumn":34},{"ruleId":"236","severity":1,"message":"237","line":9,"column":10,"nodeType":"238","messageId":"239","endLine":9,"endColumn":22},{"ruleId":"242","severity":1,"message":"243","line":161,"column":3,"nodeType":"244","messageId":"245","endLine":176,"endColumn":4},{"ruleId":"250","severity":1,"message":"263","line":46,"column":7,"nodeType":"252","endLine":46,"endColumn":47,"suggestions":"264"},{"ruleId":"236","severity":1,"message":"265","line":1,"column":10,"nodeType":"238","messageId":"239","endLine":1,"endColumn":28},{"ruleId":"236","severity":1,"message":"266","line":3,"column":26,"nodeType":"238","messageId":"239","endLine":3,"endColumn":35},"no-native-reassign",["267"],"no-negated-in-lhs",["268"],"no-unused-vars","'queueChanged' is assigned a value but never used.","Identifier","unusedVar","'useDispatch' is defined but never used.","'roomKey' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["267"],["268"],"'setShowSettings' is assigned a value but never used.","'controlsLocked' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'gameLoop', 'gameSpeed', 'keyHandler', and 'keyShiftHandler'. Either include them or remove the dependency array.","ArrayExpression",["269"],"'opponentName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'playerNumber'. Either include it or remove the dependency array.",["270"],"React Hook useEffect has missing dependencies: 'dispatch', 'myLinesCleared', and 'playerNumber'. Either include them or remove the dependency array.",["271"],"React Hook useEffect has a missing dependency: 'playerNumber'. Either include it or remove the dependency array. Outer scope values like 'pieceQueue.elements' aren't valid dependencies because mutating them doesn't re-render the component.",["272"],"'auth' is defined but never used.","'getUsernameFromuid' is defined but never used.","React Hook useEffect has missing dependencies: 'gameLoop', 'keyHandler', 'keyShiftHandler', 'opponentName', and 'playerNumber'. Either include them or remove the dependency array.",["273"],"'onAuthStateChanged' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},"Update the dependencies array to be: [gameRunning, dispatch, controls, gameSpeed, gameLoop, keyHandler, keyShiftHandler]",{"range":"284","text":"285"},"Update the dependencies array to be: [myLinesCleared, linesToClear, dispatch, turnTaken, keepTurn2, playerNumber]",{"range":"286","text":"287"},"Update the dependencies array to be: [dispatch, gameRunning, myLinesCleared, playerNumber]",{"range":"288","text":"289"},"Update the dependencies array to be: [myLinesCleared, playerNumber]",{"range":"290","text":"291"},"Update the dependencies array to be: [myTurn, gameRunning, dispatch, keepTurn, opponentName, playerNumber, gameLoop, keyHandler, keyShiftHandler]",{"range":"292","text":"293"},[7205,7238],"[gameRunning, dispatch, controls, gameSpeed, gameLoop, keyHandler, keyShiftHandler]",[2697,2759],"[myLinesCleared, linesToClear, dispatch, turnTaken, keepTurn2, playerNumber]",[3142,3155],"[dispatch, gameRunning, myLinesCleared, playerNumber]",[3339,3376],"[myLinesCleared, playerNumber]",[1833,1873],"[myTurn, gameRunning, dispatch, keepTurn, opponentName, playerNumber, gameLoop, keyHandler, keyShiftHandler]"]