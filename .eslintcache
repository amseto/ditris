[{"/Users/albert/Desktop/-/src/index.js":"1","/Users/albert/Desktop/-/src/App.js":"2","/Users/albert/Desktop/-/src/store/index.js":"3","/Users/albert/Desktop/-/src/store/GameState.js":"4","/Users/albert/Desktop/-/src/modules/piece-queue.js":"5","/Users/albert/Desktop/-/src/modules/KeyControls.js":"6","/Users/albert/Desktop/-/src/Pages/SinglePlayer.js":"7","/Users/albert/Desktop/-/src/Pages/TwoPlayer.js":"8","/Users/albert/Desktop/-/src/modules/firebase-config.js":"9","/Users/albert/Desktop/-/src/store/UserInfo.js":"10","/Users/albert/Desktop/-/src/Components/GameUI/PieceQueue.js":"11","/Users/albert/Desktop/-/src/Components/Multiplayer/OtherUsers.js":"12","/Users/albert/Desktop/-/src/Components/GameUI/Grid.js":"13","/Users/albert/Desktop/-/src/Components/GameUI/ReadyGo.js":"14","/Users/albert/Desktop/-/src/Components/Multiplayer/OtherUser.js":"15","/Users/albert/Desktop/-/src/Components/Multiplayer/WaitingMessage.js":"16","/Users/albert/Desktop/-/src/Components/GameUI/Tetrimino.js":"17","/Users/albert/Desktop/-/src/Components/GameUI/HeldBlock.js":"18","/Users/albert/Desktop/-/src/Components/GameUI/HowToPlay.js":"19","/Users/albert/Desktop/-/src/Components/GameUI/Block.js":"20","/Users/albert/Desktop/-/src/Components/GameUI/PieceQueuePiece.js":"21","/Users/albert/Desktop/-/src/Components/Multiplayer/InviteNotfications.js":"22","/Users/albert/Desktop/-/src/Components/Multiplayer/InviteNotifcation.js":"23","/Users/albert/Desktop/-/src/Components/GameUI/Game.js":"24","/Users/albert/Desktop/-/src/Components/GameUI/LeaveRoom.js":"25","/Users/albert/Desktop/-/src/Components/Multiplayer/GameShared.js":"26","/Users/albert/Desktop/-/src/store/GameState2.js":"27","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/ReadyGo.js":"28","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Grid.js":"29","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Block.js":"30","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/PieceQueue.js":"31","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/PieceQueuePiece.js":"32","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Tetrimino.js":"33","/Users/albert/Desktop/-/src/Components/GameUI/StopWatch.js":"34","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/WhoseTurnText.js":"35","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/LineClearedCounter.js":"36","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/InputForm.js":"37","/Users/albert/Desktop/-/src/Components/UI/Modal.js":"38","/Users/albert/Desktop/-/src/Components/UI/NavigationBar.js":"39","/Users/albert/Desktop/-/src/store/Controls.js":"40","/Users/albert/Desktop/-/src/Components/KeyBindings/KeyBindings.js":"41","/Users/albert/Desktop/-/src/Components/KeyBindings/KeyBinding.js":"42","/Users/albert/Desktop/-/src/Components/Multiplayer/InnerGame.js":"43","/Users/albert/Desktop/-/src/Components/UI/Login.js":"44","/Users/albert/Desktop/-/src/Components/UI/Card.js":"45"},{"size":294,"mtime":1657940800584,"results":"46","hashOfConfig":"47"},{"size":1931,"mtime":1659208584465,"results":"48","hashOfConfig":"47"},{"size":452,"mtime":1658906599168,"results":"49","hashOfConfig":"47"},{"size":17895,"mtime":1659331434419,"results":"50","hashOfConfig":"47"},{"size":623,"mtime":1658635542952,"results":"51","hashOfConfig":"47"},{"size":843,"mtime":1659207911608,"results":"52","hashOfConfig":"47"},{"size":323,"mtime":1659208385105,"results":"53","hashOfConfig":"47"},{"size":6280,"mtime":1659426816121,"results":"54","hashOfConfig":"47"},{"size":1179,"mtime":1658197195502,"results":"55","hashOfConfig":"47"},{"size":2152,"mtime":1658815119496,"results":"56","hashOfConfig":"47"},{"size":657,"mtime":1659382221682,"results":"57","hashOfConfig":"47"},{"size":656,"mtime":1659419841047,"results":"58","hashOfConfig":"47"},{"size":648,"mtime":1659381157966,"results":"59","hashOfConfig":"47"},{"size":325,"mtime":1659406518070,"results":"60","hashOfConfig":"47"},{"size":868,"mtime":1659080526180,"results":"61","hashOfConfig":"47"},{"size":512,"mtime":1658905783774,"results":"62","hashOfConfig":"47"},{"size":2959,"mtime":1657940668249,"results":"63","hashOfConfig":"47"},{"size":1707,"mtime":1659381916501,"results":"64","hashOfConfig":"47"},{"size":170,"mtime":1658977008459,"results":"65","hashOfConfig":"47"},{"size":194,"mtime":1659380924606,"results":"66","hashOfConfig":"47"},{"size":709,"mtime":1659382844713,"results":"67","hashOfConfig":"47"},{"size":679,"mtime":1659419792993,"results":"68","hashOfConfig":"47"},{"size":1470,"mtime":1659208529912,"results":"69","hashOfConfig":"47"},{"size":6766,"mtime":1659382548145,"results":"70","hashOfConfig":"47"},{"size":140,"mtime":1658368308962,"results":"71","hashOfConfig":"47"},{"size":14031,"mtime":1659384453993,"results":"72","hashOfConfig":"47"},{"size":22046,"mtime":1659337282245,"results":"73","hashOfConfig":"47"},{"size":437,"mtime":1659415952192,"results":"74","hashOfConfig":"47"},{"size":662,"mtime":1659415935471,"results":"75","hashOfConfig":"47"},{"size":194,"mtime":1659406942284,"results":"76","hashOfConfig":"47"},{"size":1431,"mtime":1659416155872,"results":"77","hashOfConfig":"47"},{"size":710,"mtime":1659385680045,"results":"78","hashOfConfig":"47"},{"size":2959,"mtime":1657940668249,"results":"79","hashOfConfig":"47"},{"size":1335,"mtime":1658860265541,"results":"80","hashOfConfig":"47"},{"size":656,"mtime":1659416222362,"results":"81","hashOfConfig":"47"},{"size":634,"mtime":1659384979140,"results":"82","hashOfConfig":"47"},{"size":1501,"mtime":1658898753686,"results":"83","hashOfConfig":"47"},{"size":726,"mtime":1658968141177,"results":"84","hashOfConfig":"47"},{"size":834,"mtime":1659417606225,"results":"85","hashOfConfig":"47"},{"size":1561,"mtime":1658974520971,"results":"86","hashOfConfig":"47"},{"size":3900,"mtime":1659063954801,"results":"87","hashOfConfig":"47"},{"size":1291,"mtime":1658975038325,"results":"88","hashOfConfig":"47"},{"size":6019,"mtime":1659337287230,"results":"89","hashOfConfig":"47"},{"size":2205,"mtime":1659419574863,"results":"90","hashOfConfig":"47"},{"size":188,"mtime":1659417914361,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1d6moc6",{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"94"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"94"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"94"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"94"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"94"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"94"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/albert/Desktop/-/src/index.js",[],["197","198"],"/Users/albert/Desktop/-/src/App.js",[],"/Users/albert/Desktop/-/src/store/index.js",[],"/Users/albert/Desktop/-/src/store/GameState.js",[],"/Users/albert/Desktop/-/src/modules/piece-queue.js",[],"/Users/albert/Desktop/-/src/modules/KeyControls.js",[],"/Users/albert/Desktop/-/src/Pages/SinglePlayer.js",["199","200"],"import { useEffect } from \"react\";\nimport { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Game from \"../Components/GameUI/Game\";\n\nconst SinglePlayer = () => {\n\n   return (\n      <Fragment>\n         <h1>Ditris</h1>\n         <Game></Game>\n      </Fragment>\n   );\n};\n\nexport default SinglePlayer;\n","/Users/albert/Desktop/-/src/Pages/TwoPlayer.js",["201","202","203"],"import { Fragment } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"../modules/firebase-config\";\nimport Login from \"../Components/UI/Login\"\nimport OtherUsers from \"../Components/Multiplayer/OtherUsers\";\n\nimport WaitingMessage from \"../Components/Multiplayer/WaitingMessage\";\nimport InviteNotification from \"../Components/Multiplayer/InviteNotfications\";\nimport Game from \"../Components/GameUI/Game\";\nimport {\n   child,\n   get,\n   off,\n   onChildAdded,\n   onChildRemoved,\n   onDisconnect,\n   onValue,\n   remove,\n   set,\n} from \"@firebase/database\";\nimport { userInfoActions } from \"../store/UserInfo\";\nimport { auth, onlineUsersRef, roomsRef } from \"../modules/firebase-config\";\nimport LeaveRoom from \"../Components/GameUI/LeaveRoom\";\nimport GameShared from \"../Components/Multiplayer/GameShared\";\nimport { gameStateActions2, myRoomRef } from \"../store/GameState2\";\nimport { useEffect } from \"react\";\n\nconst TwoPlayer = () => {\n   const dispatch = useDispatch();\n   const userStatus = useSelector((state) => state.userInfo.roomStatus);\n   const isLoggedIn = useSelector((state) => state.userInfo.isLoggedIn);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const roomKey = useSelector((state) => state.userInfo.roomKey);\n   if (roomKey) {\n      onDisconnect(child(roomsRef, roomKey)).remove();\n   }\n\n   //when list of other users changes\n   onValue(onlineUsersRef, () => {\n      if (auth.currentUser) {\n         get(onlineUsersRef).then((snapshot) => {\n            if (snapshot.val()) {\n               dispatch(\n                  userInfoActions.setOtherUsers(\n                     Object.entries(snapshot.val()).filter(\n                        (pair) => pair[0] !== auth.currentUser.uid && !pair[1].inRoom\n                     )\n                  )\n               );\n            }\n         });\n      }\n   });\n\n   //when someone accepts your invite\n   if (roomKey) {\n      onValue(child(roomsRef, roomKey + \"/accepted\"), (snapshot) => {\n         if (!snapshot.exists()) {\n         } else if (snapshot.val()) {\n            if (playerNumber !== 2) {\n               dispatch(\n                  gameStateActions2.setMultiplayer({\n                     playerNumber: 1,\n                     roomRef: child(roomsRef, roomKey),\n                  })\n               );\n               dispatch(userInfoActions.setRoomStatus(\"in room\"));\n               set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), true);\n            }\n            // off(child(onlineUsersRef, opponentID))\n         } else {\n            dispatch(userInfoActions.setRoomStatus(\"waiting\"));\n         }\n      });\n   }\n   //someone sends you an invite\n   onChildAdded(roomsRef, () => {\n      if (auth.currentUser)\n         get(roomsRef).then((snapshot) => {\n            if (snapshot.exists())\n               dispatch(\n                  userInfoActions.setInvitiationKeys(\n                     Object.entries(snapshot.val())\n                        .filter(\n                           (room) => !room[1].accepted && room[1].player2 === auth.currentUser.uid\n                        )\n                        .map((room) => {\n                           return { opponentuid: room[1].player1, roomKey: room[0] };\n                        })\n                  )\n               );\n         });\n   });\n\n   onChildRemoved(roomsRef, () => {\n      if (auth.currentUser)\n         get(roomsRef).then((snapshot) => {\n            if (snapshot.exists()) {\n               dispatch(\n                  userInfoActions.setInvitiationKeys(\n                     Object.entries(snapshot.val())\n                        .filter(\n                           (room) => !room[1].accepted && room[1].player2 === auth.currentUser.uid\n                        )\n                        .map((room) => {\n                           return { opponentuid: room[1].player1, roomKey: room[0] };\n                        })\n                  )\n               );\n            } else {\n               dispatch(userInfoActions.setInvitiationKeys([]));\n            }\n         });\n   });\n\n   const opponentID = useSelector((state) => state.userInfo.opponentID);\n   const cancelRoomHandler = async () => {\n      off(child(onlineUsersRef, opponentID));\n      dispatch(gameStateActions2.reset());\n      await remove(child(roomsRef, roomKey));\n      dispatch(userInfoActions.reset());\n      if (auth.currentUser) {\n         set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), false);\n      }\n   };\n\n   //check if opponent log out or is in another room or leaves\n   if (opponentID) {\n      onValue(child(onlineUsersRef, opponentID), async (snapshot) => {\n         if (!snapshot.exists()) {\n            cancelRoomHandler();\n         } else if (snapshot.val().inRoom) {\n            // if (myRoomRef){\n            let skip = false;\n            await get(child(myRoomRef, \"accepted\")).then((snapshot) => {\n               skip = snapshot.val();\n            });\n            if (!skip) {\n               cancelRoomHandler();\n            }\n\n            // }\n         }\n      });\n   }\n   if (userStatus === \"in room\") {\n      onValue(myRoomRef, (snapshot) => {\n         //room is removed\n         if (!snapshot.exists()) {\n            off(child(roomsRef, roomKey));\n            off(child(onlineUsersRef, opponentID));\n            dispatch(userInfoActions.reset());\n\n            if (auth.currentUser) {\n               set(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\"), false);\n            }\n            dispatch(gameStateActions2.reset());\n         }\n      });\n   }\n\n   return (\n      <Fragment>\n         <h1>Ditris Two-Player</h1>\n         {!isLoggedIn && <p>Login to begin</p>}\n         {userStatus === \"looking for room\" && <InviteNotification />}\n         {userStatus === \"looking for room\" && <OtherUsers />}\n         {userStatus === \"waiting\" && <WaitingMessage cancelRoomHandler={cancelRoomHandler} />}\n         {userStatus === \"in room\" && <LeaveRoom leaveRoomHandler={cancelRoomHandler}></LeaveRoom>}\n         {/* {userStatus === \"in room\" && playerNumber === 1 && <Game></Game>}\n         {userStatus === \"in room\" && playerNumber === 2 && <GetGame></GetGame>} */}\n         {userStatus === \"in room\" && <GameShared></GameShared>}\n      </Fragment>\n   );\n};\n\nexport default TwoPlayer;\n","/Users/albert/Desktop/-/src/modules/firebase-config.js",["204"],"// Import the functions you need from the SDKs you need\nimport { getAuth } from \"@firebase/auth\";\nimport { child, get, getDatabase, ref } from \"@firebase/database\";\nimport { initializeApp } from \"firebase/app\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA9ipNK6_boqbwThQlJgolni-O5iIgIl40\",\n  authDomain: \"ditris-2244c.firebaseapp.com\",\n  databaseURL: \"https://ditris-2244c-default-rtdb.firebaseio.com\",\n  projectId: \"ditris-2244c\",\n  storageBucket: \"ditris-2244c.appspot.com\",\n  messagingSenderId: \"743373731037\",\n  appId: \"1:743373731037:web:9552a80db8b0df8d875734\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth()\nexport const db = getDatabase()\nexport const rootRef = ref(db);\nexport const onlineUsersRef = child(rootRef,'users')\nexport const roomsRef= child(rootRef,'rooms')\nexport const getUsernameFromuid = async (uid) =>{\n  let username;\n  await get(child(onlineUsersRef,uid)).then(snapshot=>{username = snapshot.val().username})\n  return username\n}\n\n\n","/Users/albert/Desktop/-/src/store/UserInfo.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/PieceQueue.js",["205"],"import PieceQueuePiece from \"./PieceQueuePiece\";\nimport styles from './PieceQueue.module.css'\nimport {pieceQueue} from '../../store/GameState'\nimport { useSelector } from \"react-redux\";\n\nconst PieceQueue= (props) =>{\n    const queueChanged= useSelector(state=>state.gameState.heldPiece)\n    let i = 0\n    let pieces = []\n    if (pieceQueue.isEmpty){\n        return <div className = {styles.pieceQueue}></div>\n    }\n\n    for (let pieceColor in pieceQueue.elements){\n        pieces.push(<PieceQueuePiece key = {i++} color = {pieceQueue.elements[pieceColor]}/>)\n    }\n    return <div className = {styles.pieceQueue}>{pieces}</div>\n}\n\nexport default PieceQueue;","/Users/albert/Desktop/-/src/Components/Multiplayer/OtherUsers.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/Grid.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/ReadyGo.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/OtherUser.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/WaitingMessage.js",["206","207"],"import {  memo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Modal from \"../UI/Modal\";\n\n\nconst WaitingMessage = ({ cancelRoomHandler }) => {\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n   const roomKey = useSelector((state) => state.userInfo.roomKey);\n\n   return (\n      <Modal>\n         Waiting for {opponentName} to join\n         <button onClick={cancelRoomHandler}>Cancel</button>\n      </Modal>\n   );\n};\n\nexport default memo(WaitingMessage);\n","/Users/albert/Desktop/-/src/Components/GameUI/Tetrimino.js",["208"],"export const TETRIMINOS = {\n  I: [\n    //I\n    [\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  ],\n\n  T: [\n    //T\n    [\n      [0, 1, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  L: [\n    //L\n    [\n      [0, 0, 1],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  J: [\n    //J\n    [\n      [1, 0, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  ],\n  Z: [\n    //Z\n    [\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  ],\n  S: [\n    //S\n    [\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  O: [\n    //O\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n  ],\n};\n\nexport const getRandomPiece = () => {\n  const value = Math.round(6 * Math.random());\n  switch (value) {\n    case 0:\n      return \"I\";\n    case 1:\n      return \"T\";\n    case 2:\n      return \"L\";\n    case 3:\n      return \"J\";\n    case 4:\n      return \"Z\";\n    case 5:\n      return \"S\";\n    case 6:\n      return \"O\";\n  }\n};\n\nexport const getPiece = (type, rotatePos, xPos, yPos) =>\n  TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n    row.map((col, colPos) => {\n      if (col) {\n        return { x: xPos + colPos, y: yPos + rowPos };\n      }\n      return null;\n    })\n  );\n\nexport const rotatePiece = (isCounterClockwise, { type, rotatePos }) => {\n  return isCounterClockwise\n    ? rotatePos === 0\n      ? TETRIMINOS[type].length - 1\n      : rotatePos - 1\n    : rotatePos === TETRIMINOS[type].length - 1\n    ? 0\n    : rotatePos + 1;\n};\n\nexport const convertMappingToCoords = (mapping) => {\n  let coordArray = [];\n  for (const array of mapping) {\n    for (const coord of array) {\n      if (coord) {\n        coordArray.push(coord);\n      }\n    }\n  }\n  return coordArray;\n};\n","/Users/albert/Desktop/-/src/Components/GameUI/HeldBlock.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/HowToPlay.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/Block.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/PieceQueuePiece.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/InviteNotfications.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/InviteNotifcation.js",[],"/Users/albert/Desktop/-/src/Components/GameUI/Game.js",["209"],"import { Fragment, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { gameStateActions } from \"../../store/GameState\";\nimport Grid from \"./Grid\";\nimport PieceQueue from \"./PieceQueue\";\nimport HeldBlock from \"./HeldBlock\";\n\nimport { keyShiftCounter, keyIsPressed, keyIsDisabled } from \"../../modules/KeyControls\";\nimport KeyControls from \"../../modules/KeyControls\";\nimport HowToPlay from \"./HowToPlay\";\nimport StopWatch from \"./StopWatch\";\n\nlet gameLocked = false;\n\nconst Game = () => {\n   const dispatch = useDispatch();\n   const gameRunning = useSelector((state) => state.gameState.gameRunning);\n   const currentPieceState = useSelector((state) => state.gameState.currentPieceState);\n   const displayMessage = useSelector((state) => state.gameState.displayMessage);\n   const controls = useSelector((state)=>state.controls)\n\n   const [startGame, setStartGame] = useState(false);\n\n   const gameLoop = () => {\n      if (gameRunning) {\n         if (currentPieceState === \"FROZEN\") {\n            dispatch(gameStateActions.clearLines());\n            dispatch(gameStateActions.checkIfGameWon());\n            dispatch(gameStateActions.getNewPiece());\n            dispatch(gameStateActions.getGhostCoords());\n            dispatch(gameStateActions.showGhostPiece());\n         } else {\n            dispatch(gameStateActions.dropPiece());\n            dispatch(gameStateActions.getGhostCoords());\n            dispatch(gameStateActions.showGhostPiece());\n         }\n      }\n   };\n   useEffect(() => {\n      const dropPieceInterval = window.setInterval(() => {\n         gameLoop();\n      }, 300);\n      const handleInputInterval = window.setInterval(() => {\n         keyHandler();\n      }, 1);\n      const shiftInputInterval = window.setInterval(() => {\n         keyShiftHandler();\n      }, 1);\n\n      return () => {\n         window.clearInterval(dropPieceInterval);\n         window.clearInterval(handleInputInterval);\n         window.clearInterval(shiftInputInterval);\n      };\n   });\n   useEffect(() => {\n      if (startGame) {\n         const interval = window.setInterval(() => {\n            dispatch(gameStateActions.gettingReady());\n         }, 500);\n         return () => {\n            window.clearInterval(interval);\n         };\n      }\n   }, [displayMessage, dispatch, startGame]);\n\n   const keyShiftHandler = () => {\n      if (!gameRunning || gameLocked) {\n         return;\n      }\n      for (let key in keyShiftCounter) {\n         if (keyShiftCounter[key]) {\n            keyShiftCounter[key] += 1;\n         }\n      }\n      if (\n         keyIsPressed[controls.softDrop] &&\n         keyIsDisabled[controls.softDrop] &&\n         keyShiftCounter[controls.softDrop] > 40\n      ) {\n         dispatch(gameStateActions.dropPiece());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.softDrop] = true;\n         keyShiftCounter[controls.softDrop] = 30;\n      }\n      if (\n         keyIsPressed[controls.moveRight] &&\n         keyIsDisabled[controls.moveRight] &&\n         keyShiftCounter[controls.moveRight] > 40\n      ) {\n         dispatch(gameStateActions.shiftRight());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.moveRight] = true;\n         keyShiftCounter[controls.moveRight] = 30;\n      }\n      if (\n         keyIsPressed[controls.moveLeft] &&\n         keyIsDisabled[controls.moveLeft] &&\n         keyShiftCounter[controls.moveLeft] > 40\n      ) {\n         dispatch(gameStateActions.shiftLeft());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.moveLeft] = true;\n         keyShiftCounter[controls.moveLeft] = 30;\n      }\n   };\n   const keyHandler = () => {\n      if (!gameRunning || gameLocked) {\n         return;\n      }\n      if (keyIsPressed[controls.rotateLeft] && !keyIsDisabled[controls.rotateLeft]) {\n         dispatch(gameStateActions.rotatePiece(true));\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.rotateLeft] = true;\n      }\n      if (keyIsPressed[controls.rotateRight] && !keyIsDisabled[controls.rotateRight]) {\n         dispatch(gameStateActions.rotatePiece(false));\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.rotateRight] = true;\n      }\n      if (keyIsPressed[controls.hardDrop] && !keyIsDisabled[controls.hardDrop]) {\n         gameLocked = true;\n         dispatch(gameStateActions.hardDrop());\n         keyIsDisabled[controls.hardDrop] = true;\n         setTimeout(() => {\n            gameLocked = false;\n         }, 350);\n      }\n      if (keyIsPressed[controls.hold] && !keyIsDisabled[controls.hold]) {\n         dispatch(gameStateActions.holdPiece());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.hold] = true;\n      }\n      if (keyIsPressed[controls.softDrop] && !keyIsDisabled[controls.softDrop]) {\n         keyShiftCounter[controls.softDrop] = 1;\n         dispatch(gameStateActions.dropPiece());\n         keyIsDisabled[controls.softDrop] = true;\n      }\n      if (keyIsPressed[controls.moveRight] && !keyIsDisabled[controls.moveRight]) {\n         keyShiftCounter[controls.moveRight] = 1;\n         dispatch(gameStateActions.shiftRight());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.moveRight] = true;\n      }\n      if (keyIsPressed[controls.moveLeft] && !keyIsDisabled[controls.moveLeft]) {\n         keyShiftCounter[controls.moveLeft] = 1;\n         dispatch(gameStateActions.shiftLeft());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n         keyIsDisabled[controls.moveLeft] = true;\n      }\n   };\n   document.onkeydown = (keycode) => {\n      if (keycode.key === controls.newGame) {\n         setStartGame(true);\n         dispatch(gameStateActions.newGame());\n         dispatch(gameStateActions.getGhostCoords());\n         dispatch(gameStateActions.showGhostPiece());\n      }\n   };\n   return (\n      <Fragment>\n         <KeyControls />\n         <div\n            style={{\n               display: \"flex\",\n               flexWrap:\"nowrap\",\n               justifyContent:\"center\"\n            }}\n         >\n            <HeldBlock />\n            <Grid></Grid>\n            <PieceQueue />\n         </div>\n         <StopWatch></StopWatch>\n      </Fragment>\n   );\n};\n\nexport default Game;\n","/Users/albert/Desktop/-/src/Components/GameUI/LeaveRoom.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/GameShared.js",["210","211","212","213","214","215","216","217","218"],"import { Fragment, memo, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { gameStateActions2, myRoomRef, grid, pieceQueue } from \"../../store/GameState2\";\nimport { child, off, onDisconnect, onValue, set } from \"@firebase/database\";\nimport { auth, getUsernameFromuid, onlineUsersRef } from \"../../modules/firebase-config\";\n\nimport Grid from \"./Components/Grid\";\nimport PieceQueue from \"./Components/PieceQueue\";\nimport LineClearedCounter from \"./Components/LineClearedCounter\";\n\nimport KeyControls, {\n   keyIsDisabled,\n   keyIsPressed,\n   keyShiftCounter,\n} from \"../../modules/KeyControls\";\nimport WhoseTurnText from \"./Components/WhoseTurnText\";\nimport InputForm from \"./Components/InputForm\";\nimport InnerGame from \"./InnerGame\";\n\nlet startButtonLocked = false;\n\nconst GameShared = () => {\n   const dispatch = useDispatch();\n\n   const controls = useSelector((state) => state.controls);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n\n   const myTurn = useSelector((state) => state.gameState2.myTurn);\n   const displayMessage = useSelector((state) => state.gameState2.displayMessage);\n   const gameRunning = useSelector((state) => state.gameState2.gameRunning);\n   const currentGameStatus = useSelector((state) => state.gameState2.currentGameStatus);\n   const myLinesCleared = useSelector((state) => state.gameState2.myLinesCleared);\n   const linesToClear = useSelector((state) => state.gameState2.linesToClear);\n   const turnTaken = useSelector((state) => state.gameState2.turnTaken);\n\n   if (!displayMessage) {\n      startButtonLocked = false;\n   }\n\n   if (displayMessage.includes(\"WON\")) {\n      setTimeout(() => {\n         startButtonLocked = false;\n      }, 1000);\n   }\n\n   if (currentGameStatus === \"FROZEN\") {\n      dispatch(gameStateActions2.unfreeze());\n      dispatch(gameStateActions2.clearLines());\n      dispatch(gameStateActions2.checkIfGameWon());\n      dispatch(gameStateActions2.setTurnTaken(true));\n   }\n\n   useEffect(() => {\n      if (turnTaken) {\n         if (myLinesCleared >= linesToClear) {\n            set(child(myRoomRef, \"turn\"), null);\n            getUsernameFromuid(auth.currentUser.uid).then((name) => {\n               set(child(myRoomRef, \"displayMessage\"), `${name} WON`);\n            });\n            dispatch(gameStateActions2.gameWon());\n         } else {\n            set(child(myRoomRef, \"turn\"), playerNumber === 1 ? 2 : 1);\n         }\n      }\n      dispatch(gameStateActions2.setTurnTaken(false));\n   }, [myLinesCleared, linesToClear, dispatch, turnTaken]);\n\n   useEffect(() => {\n      if (gameRunning) {\n         off(child(myRoomRef, `player${playerNumber === 1 ? 2 : 1}GameInfo`));\n         dispatch(gameStateActions2.newGame());\n         set(child(myRoomRef, `player${playerNumber}GameInfo`), {\n            gameQueue: pieceQueue.elements,\n            linesCleared: myLinesCleared,\n         });\n\n         return () => {};\n      }\n   }, [gameRunning]);\n\n   useEffect(() => {\n      set(child(myRoomRef, `player${playerNumber}GameInfo`), {\n         gameQueue: pieceQueue.elements,\n         linesCleared: myLinesCleared,\n      });\n   }, [myLinesCleared, pieceQueue.elements]);\n\n   // useEffect(() => {\n   //    if (gameRunning && myTurn) {\n   //       off(child(myRoomRef, \"grid\"));\n   //       dispatch(gameStateActions2.getNewPiece(opponentName));\n   //       dispatch(gameStateActions2.placeCurrentPiece(opponentName));\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       const dropPieceInterval = setInterval(() => {\n   //          gameLoop();\n   //       }, 300);\n   //       const handleInputInterval = setInterval(() => {\n   //          keyHandler();\n   //       }, 1);\n   //       const shiftInputInterval = setInterval(() => {\n   //          keyShiftHandler();\n   //       }, 1);\n   //       return () => {\n   //          clearInterval(dropPieceInterval);\n   //          clearInterval(handleInputInterval);\n   //          clearInterval(shiftInputInterval);\n   //       };\n   //    }\n   // }, [myTurn, gameRunning]);\n\n   // const keyShiftHandler = () => {\n   //    for (let key in keyShiftCounter) {\n   //       if (keyShiftCounter[key]) {\n   //          keyShiftCounter[key] += 1;\n   //       }\n   //    }\n   //    if (\n   //       keyIsPressed[controls[\"softDrop\"]] &&\n   //       keyIsDisabled[controls[\"softDrop\"]] &&\n   //       keyShiftCounter[controls[\"softDrop\"]] > 40\n   //    ) {\n   //       console.log(dispatch(gameStateActions2.dropPiece()));\n   //       keyIsDisabled[controls[\"softDrop\"]] = true;\n   //       keyShiftCounter[controls[\"softDrop\"]] = 30;\n   //    }\n   //    if (\n   //       keyIsPressed[controls[\"moveRight\"]] &&\n   //       keyIsDisabled[controls[\"moveRight\"]] &&\n   //       keyShiftCounter[controls[\"moveRight\"]] > 40\n   //    ) {\n   //       dispatch(gameStateActions2.shiftRight());\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"moveRight\"]] = true;\n   //       keyShiftCounter[controls[\"moveRight\"]] = 30;\n   //    }\n   //    if (\n   //       keyIsPressed[controls[\"moveLeft\"]] &&\n   //       keyIsDisabled[controls[\"moveLeft\"]] &&\n   //       keyShiftCounter[controls[\"moveLeft\"]] > 40\n   //    ) {\n   //       dispatch(gameStateActions2.shiftLeft());\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"moveLeft\"]] = true;\n   //       keyShiftCounter[controls[\"moveLeft\"]] = 30;\n   //    }\n   // };\n   // const keyHandler = async () => {\n   //    if (!gameRunning || controlsLocked) {\n   //       return;\n   //    }\n   //    if (keyIsPressed[controls[\"rotateLeft\"]] && !keyIsDisabled[controls[\"rotateLeft\"]]) {\n   //       dispatch(gameStateActions2.rotatePiece(true));\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"rotateLeft\"]] = true;\n   //    }\n   //    if (keyIsPressed[controls[\"rotateRight\"]] && !keyIsDisabled[controls[\"rotateRight\"]]) {\n   //       dispatch(gameStateActions2.rotatePiece(false));\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"rotateRight\"]] = true;\n   //    }\n   //    if (keyIsPressed[controls[\"hardDrop\"]] && !keyIsDisabled[controls[\"hardDrop\"]]) {\n   //       controlsLocked = true;\n   //       dispatch(gameStateActions2.hardDrop());\n   //       dispatch(gameStateActions2.clearLines());\n   //       dispatch(gameStateActions2.checkIfGameWon());\n   //       await set(child(myRoomRef, \"turn\"), playerNumber === 1 ? 2 : 1);\n   //       keyIsDisabled[controls[\"hardDrop\"]] = true;\n   //       setTimeout(() => {\n   //          controlsLocked = false;\n   //       }, 400);\n   //    }\n   //    if (keyIsPressed[controls[\"softDrop\"]] && !keyIsDisabled[controls[\"softDrop\"]]) {\n   //       keyShiftCounter[controls[\"softDrop\"]] = 1;\n   //       dispatch(gameStateActions2.dropPiece());\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"softDrop\"]] = true;\n   //    }\n   //    if (keyIsPressed[controls[\"moveRight\"]] && !keyIsDisabled[controls[\"moveRight\"]]) {\n   //       keyShiftCounter[controls[\"moveRight\"]] = 1;\n   //       dispatch(gameStateActions2.shiftRight());\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"moveRight\"]] = true;\n   //    }\n   //    if (keyIsPressed[controls[\"moveLeft\"]] && !keyIsDisabled[controls[\"moveLeft\"]]) {\n   //       keyShiftCounter[controls[\"moveLeft\"]] = 1;\n   //       dispatch(gameStateActions2.shiftLeft());\n   //       dispatch(gameStateActions2.getGhostCoords());\n   //       dispatch(gameStateActions2.showGhostPiece());\n   //       keyIsDisabled[controls[\"moveLeft\"]] = true;\n   //    }\n   // };\n   // const gameLoop = async () => {\n   //    dispatch(gameStateActions2.dropPiece());\n   //    dispatch(gameStateActions2.getGhostCoords());\n   //    dispatch(gameStateActions2.showGhostPiece());\n   // };\n\n   const beginGame = async () => {\n      set(child(myRoomRef, \"displayMessage\"), \"READY\");\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      set(child(myRoomRef, \"displayMessage\"), \"GO\");\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      await set(child(myRoomRef, \"displayMessage\"), \"in game\");\n      await set(child(myRoomRef, \"grid\"), [\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      ]);\n      await set(child(myRoomRef, \"/turn\"), playerNumber === 1 ? 2 : 1);\n   };\n\n   onDisconnect(child(onlineUsersRef, auth.currentUser.uid + \"/inRoom\")).set(false);\n   useEffect(() => {\n      onValue(child(myRoomRef, \"displayMessage\"), (snapshot) => {\n         if (snapshot.exists()) {\n            dispatch(gameStateActions2.setDisplayMessage(snapshot.val()));\n            if (snapshot.val() === \"READY\") {\n               dispatch(gameStateActions2.gettingReady());\n               set(child(myRoomRef, `player${playerNumber}GameInfo`), {\n                  gameQueue: pieceQueue.elements,\n                  linesCleared: myLinesCleared,\n               });\n\n               startButtonLocked = true;\n            }\n         }\n      });\n   });\n\n   //updating the game grid\n   if (gameRunning && !myTurn) {\n      onValue(child(myRoomRef, \"grid\"), (snapshot) => {\n         if (snapshot.exists()) {\n            dispatch(gameStateActions2.setGrid(snapshot.val()));\n         }\n      });\n   }\n   if (gameRunning && !myTurn) {\n      onValue(child(myRoomRef, `player${playerNumber}GameInfo/linesCleared`), (snapshot) => {\n         dispatch(gameStateActions2.setMyLinesCleared(snapshot.val()));\n      });\n   }\n\n   //updating the queuePieces and linesClearedNumber\n   onValue(child(myRoomRef, `player${playerNumber === 1 ? 2 : 1}GameInfo`), (snapshot) => {\n      if (snapshot.exists()) {\n         dispatch(\n            gameStateActions2.setOpponentInfo({\n               opponentPieceQueue: snapshot.val().gameQueue,\n               opponentLinesCleared: snapshot.val().linesCleared,\n            })\n         );\n      }\n   });\n\n   onValue(child(myRoomRef, \"turn\"), (snapshot) => {\n      if (snapshot.exists()) {\n         dispatch(gameStateActions2.setMyTurn(snapshot.val() === playerNumber));\n      }\n   });\n\n   document.onkeydown = (keycode) => {\n      if (startButtonLocked) {\n         return;\n      }\n      if (keycode.key === controls[\"newGame\"]) {\n         startButtonLocked = true;\n         beginGame();\n         //    setStartGame(true);\n         //    dispatch(gameStateActions.newGame());\n         //    dispatch(gameStateActions.getNewPiece());\n         //    dispatch(gameStateActions.getGhostCoords());\n         //    dispatch(gameStateActions.showGhostPiece());\n      }\n   };\n   return (\n      <Fragment>\n         <KeyControls></KeyControls>\n         <InnerGame></InnerGame>\n         <WhoseTurnText />\n         <div\n            style={{\n               display: \"flex\",\n               flexWrap: \"nowrap\",\n               justifyContent:\"center\",\n            }}\n         >\n            <LineClearedCounter player=\"opponent\" />\n            <PieceQueue player=\"opponent\"></PieceQueue>\n            <Grid></Grid>\n            <PieceQueue player=\"mine\"></PieceQueue>\n            <LineClearedCounter player=\"mine\" />\n         </div>\n         {!gameRunning && <InputForm />}\n         <div style={{ color: \"yellow\" }}>\n            <p>How To Play:</p>\n            <p>Press esc to start.</p>\n            <p>Game starts with other person first.</p>\n            <p>After player drops piece, other player goes.</p>\n            <p>Person that causes the board to overflow loses a line point.</p>\n            <p>Play until a person clears an amount of lines.</p>\n         </div>\n      </Fragment>\n   );\n};\n\nexport default memo(GameShared);\n","/Users/albert/Desktop/-/src/store/GameState2.js",["219","220"],"import { child, off, set } from \"@firebase/database\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nimport { TETRIMINOS } from \"../Components/GameUI/Tetrimino\";\nimport { auth, getUsernameFromuid } from \"../modules/firebase-config\";\n\nimport Queue from \"../modules/piece-queue\";\n\nconst LINESTOCLEAR = 1\n\nlet pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\nconst getRandomPiece = () => {\n   if (pieceArray.length === 0) {\n      pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n   }\n   const value = Math.floor(pieceArray.length * Math.random());\n   return pieceArray.splice(value, 1);\n};\n\nconst getCoords = (type, rotatePos, xPos, yPos) =>\n   TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n      row.map((col, colPos) => {\n         if (col) {\n            return { x: xPos + colPos, y: yPos + rowPos };\n         }\n         return null;\n      })\n   );\nconst rotatePiece = (isCounterClockwise, state) => {\n   let { rotatePos } = state;\n   if (isCounterClockwise) {\n      if (rotatePos === 0) {\n         return 3;\n      } else {\n         return rotatePos - 1;\n      }\n   } else {\n      if (rotatePos === 3) {\n         return 0;\n      } else {\n         return rotatePos + 1;\n      }\n   }\n};\n\nconst convertMappingToCoords = (state, mapping, forGhost = false) => {\n   let coordArray = [];\n   for (const array of mapping) {\n      for (const coord of array) {\n         if (coord) {\n            if (coordIsValid(state, coord, forGhost)) {\n               coordArray.push(coord);\n            }\n         }\n      }\n   }\n   return coordArray;\n};\n\n\nconst gameStateInitialState = {\n   playerNumber: null,\n\n   gameRunning: false,\n   myCurrentShape: null,\n   myCurrentCoords: [],\n   myGhostCoords: [],\n   myPieceQueue: null,\n   myHeldPiece: null,\n   myLinesCleared: 0,\n\n   opponentPieceQueue: [],\n   opponentHeldPiece: null,\n   opponentLinesCleared: 0,\n\n   currentGameStatus: \"NONE\",\n   rotatePos: 0,\n   xPos: 3,\n   yPos: 0,\n\n   grid: [\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n      [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n   ],\n\n   rotated: false,\n   displayMessage: \"\",\n\n   myTurn: null,\n   linesToClear:LINESTOCLEAR,\n\n   turnTaken : true\n};\n\nexport let myRoomRef = null;\n\nexport let pieceQueue = new Queue();\n\nconst removeLastState = (state) => {\n   for (const coord of state.myCurrentCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst removeLastGhostPiece = (state) => {\n   for (const coord of state.myGhostCoords) {\n      state.grid[coord.y][coord.x] = \"None\";\n   }\n};\n\nconst placeBlocks = (state, forGhost = false) => {\n   let copiedGrid = state.grid.map(nested=>nested.slice())\n   if (forGhost) {\n      const colorName = state.myCurrentShape + \"ghost\";\n      for (const coord of state.myGhostCoords) {\n         copiedGrid[coord.y][coord.x] = colorName;\n         for (const currentCoord of state.myCurrentCoords) {\n            if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n               copiedGrid[coord.y][coord.x] = state.myCurrentShape;\n            }\n         }\n      }\n   } else {\n      for (const coord of state.myCurrentCoords) {\n         copiedGrid[coord.y][coord.x] = state.myCurrentShape;\n      }\n   }\n   state.grid = copiedGrid\n};\n\nconst coordIsValid = (state, coord, forGhost = false) => {\n   if (coord) {\n      if (coord.y <= 20 && coord.x >= 0 && coord.x <= 9) {\n         for (let currentCoord of state.myCurrentCoords) {\n            if (forGhost) {\n               if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n                  return true;\n               }\n            }\n         }\n         if (state.grid[coord.y][coord.x].length > 1) {\n            return true;\n         }\n      }\n   }\n   return false;\n};\n\nconst gameStateSlice2 = createSlice({\n   name: \"gameState2\",\n   initialState: gameStateInitialState,\n   reducers: {\n      reset(state) {\n         state.playerNumber = null;\n\n         state.gameRunning = false;\n         state.myCurrentShape = null;\n         state.myCurrentCoords = [];\n         state.myGhostCoords = [];\n         state.myPieceQueue = null;\n         state.myHeldPiece = null;\n         state.myLinesCleared = 0;\n\n         state.opponentPieceQueue = [];\n         state.opponentHeldPiece = null;\n         state.opponentLinesCleared = 0;\n\n         state.currentGameStatus = \"NONE\";\n         state.rotatePos = 0;\n         state.xPos = 3;\n         state.yPos = 0;\n\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n\n         state.rotated = false;\n         state.displayMessage = \"\";\n\n         state.myTurn = null;\n         state.linesToClear =LINESTOCLEAR;\n         myRoomRef = null;\n         pieceQueue = new Queue()\n\n         state.turnTaken = false\n      },\n      setGrid(state, grid) {\n         state.grid = grid.payload;\n      },\n      gettingReady(state) {\n         state.myCurrentShape = null;\n         state.myCurrentCoords = [];\n         state.myGhostCoords = [];\n         state.myPieceQueue = null;\n         state.myHeldPiece = null;\n         state.myLinesCleared = 0;\n         state.currentGameStatus = \"NONE\";\n         state.grid = [\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n         ];\n\n      },\n      newGame(state) {\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n\n         pieceArray = [\"I\", \"I\", \"T\", \"T\", \"L\", \"L\", \"J\", \"J\", \"Z\", \"Z\", \"S\", \"S\", \"O\", \"O\"];\n         pieceQueue = new Queue();\n         for (let i = 0; i < 5; i++) {\n            pieceQueue.enqueue(...getRandomPiece());\n         }\n\n      },\n      setOpponentInfo(state, action) {\n         state.opponentPieceQueue = action.payload.opponentPieceQueue;\n         state.opponentLinesCleared = action.payload.opponentLinesCleared;\n      },\n      clearLines(state) {\n         let newGrid = [];\n         let linesCleared = 0;\n         for (const row of state.grid) {\n            if (row.every((blockType) => blockType !== \"None\")) {\n               state.myLinesCleared += 1;\n               linesCleared += 1;\n            } else {\n               newGrid.push(row);\n            }\n         }\n         for (let i = 0; i < linesCleared; i++) {\n            newGrid.unshift([\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n               \"None\",\n            ]);\n         }\n         state.grid = newGrid;\n         set(child(myRoomRef, \"grid\"), state.grid);\n         // off(child(myRoomRef, `player${state.playerNumber}GameInfo/linesCleared`))\n      },\n      unfreeze(state) {\n         state.currentGameStatus = \"FALLING\";\n      },\n      getNewPiece(state, opponentName) {\n         state.myGhostCoords = [];\n         state.myCurrentShape = pieceQueue.dequeue();\n         pieceQueue.enqueue(...getRandomPiece());\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.grid = [\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n               [\"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\"],\n            ];\n            state.myCurrentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n            off(child(myRoomRef, `player${state.playerNumber === 1 ? 2 : 1}GameInfo`));\n            set(\n               child(myRoomRef, `player${state.playerNumber === 1 ? 2 : 1}GameInfo/linesCleared`),\n               state.opponentLinesCleared - 1\n            );\n            off(child(myRoomRef, \"displayMessage\"));\n            state.displayMessage = `${opponentName.payload} CAUSED OVERFLOW`;\n            set(child(myRoomRef, \"displayMessage\"), `${opponentName.payload} CAUSED OVERFLOW`);\n            setTimeout(() => {\n               set(child(myRoomRef, \"displayMessage\"), \"in game\");\n            }, 1000);\n\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         }\n         placeBlocks(state);\n         // set(\n         //    child(myRoomRef, `player${state.playerNumber}GameInfo/gameQueue`),\n         //    pieceQueue.elements\n         // );\n\n         state.currentGameStatus = \"FALLING\";\n      },\n      rotatePiece(state, action) {\n         const originalRotatePos = state.rotatePos;\n         state.rotatePos = rotatePiece(action.payload, {\n            rotatePos: state.rotatePos,\n         });\n         removeLastState(state);\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.rotatePos = originalRotatePos;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      dropPiece(state) {\n         if (state.gameRunning) {\n            if (state.currentGameStatus === \"LANDING\") {\n               state.currentGameStatus = \"FROZEN\";\n               return;\n            }\n            removeLastState(state);\n            state.yPos += 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n            if (state.myCurrentCoords.length < 4) {\n               state.yPos -= 1;\n               state.myCurrentCoords = convertMappingToCoords(\n                  state,\n                  getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n               );\n               state.currentGameStatus = \"LANDING\";\n            } else {\n               state.currentGameStatus = \"FALLING\";\n            }\n            placeBlocks(state);\n         } else {\n         }\n      },\n      getGhostCoords(state) {\n         removeLastGhostPiece(state);\n         state.myGhostCoords = [];\n         for (let coord of state.myCurrentCoords) {\n            state.myGhostCoords.push({ x: coord.x, y: coord.y });\n         }\n         let ghostYPos = state.yPos;\n         while (state.myGhostCoords.length === 4) {\n            ghostYPos += 1;\n            state.myGhostCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, ghostYPos),\n               true\n            );\n         }\n         ghostYPos -= 1;\n         state.myGhostCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, ghostYPos),\n            true\n         );\n      },\n      hardDrop(state) {\n         removeLastState(state);\n         state.myCurrentCoords = state.myGhostCoords;\n         placeBlocks(state);\n         state.currentGameStatus = \"FROZEN\";\n      },\n      showGhostPiece(state) {\n         placeBlocks(state, true);\n      },\n      shiftLeft(state) {\n         removeLastState(state);\n         state.xPos -= 1;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.xPos += 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      shiftRight(state) {\n         removeLastState(state);\n         state.xPos += 1;\n         state.myCurrentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         if (state.myCurrentCoords.length < 4) {\n            state.xPos -= 1;\n            state.myCurrentCoords = convertMappingToCoords(\n               state,\n               getCoords(state.myCurrentShape, state.rotatePos, state.xPos, state.yPos)\n            );\n         } else {\n            state.currentGameStatus = \"FALLING\";\n         }\n         placeBlocks(state);\n      },\n      placeCurrentPiece(state){\n         placeBlocks(state)\n      },\n\n      gameWon(state){\n         state.gameRunning = false;\n      },\n      checkIfGameWon(state) {\n      },\n      holdPiece(state) {\n         if (state.rotated === true) {\n            return;\n         }\n         state.rotated = true;\n\n         removeLastState(state);\n         if (state.heldPiece === null) {\n            state.heldPiece = state.currentShape;\n            state.currentShape = pieceQueue.dequeue();\n            pieceQueue.enqueue(...getRandomPiece());\n         } else {\n            const placeHolder = state.currentShape;\n            state.currentShape = state.heldPiece;\n            state.heldPiece = placeHolder;\n         }\n         state.xPos = 3;\n         state.yPos = 0;\n         state.rotatePos = 0;\n         state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n         );\n         placeBlocks(state);\n         state.currentPieceState = \"FALLING\";\n      },\n      setMultiplayer(state, action) {\n         state.playerNumber = action.payload.playerNumber;\n         myRoomRef = action.payload.roomRef;\n      },\n      setDisplayMessage(state, displayMessage) {\n         state.displayMessage = displayMessage.payload;\n         if (state.displayMessage === \"in game\") {\n            state.gameRunning = true;\n         }\n         if (state.displayMessage.includes(\"WON\")) {\n            state.gameRunning = false;\n         }\n      },\n      setMyTurn(state, bool) {\n         state.myTurn = bool.payload;\n      },\n      setMyLinesCleared(state, lines) {\n         state.myLinesCleared = lines.payload;\n      },\n      setLinesToClear(state,lines){\n         state.linesToClear = lines.payload\n      },\n      setTurnTaken(state,bool){\n         state.turnTaken = bool.payload\n      }\n   },\n});\n\n\nexport const gameStateActions2 = gameStateSlice2.actions;\n\nexport default gameStateSlice2.reducer;\n","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/ReadyGo.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Grid.js",["221"],"import { useSelector, useDispatch } from \"react-redux\";\n\nimport styles from \"./Grid.module.css\";\nimport Block from \"./Block\";\nimport ReadyGo from \"./ReadyGo\";\n\nconst Grid = () => {\n   const gameState = useSelector((state) => state.gameState2);\n\n   const grid = gameState.grid.slice(1).map((row, y_pos) => {\n      return (\n         <div style = {{display:\"flex\"}} key={y_pos}>\n            {row.map((color, x_pos) => {\n               return <Block color={color} key={x_pos} />;\n            })}\n         </div>\n      );\n   });\n\n   return (\n      <div className={styles.grid}>\n         {grid}\n         <ReadyGo></ReadyGo>\n      </div>\n   );\n};\n\nexport default Grid;\n","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Block.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/PieceQueue.js",["222","223"],"import PieceQueuePiece from \"./PieceQueuePiece\";\nimport styles from \"./PieceQueue.module.css\";\nimport { pieceQueue } from \"../../../store/GameState2\";\nimport { useSelector } from \"react-redux\";\nimport { Fragment, memo } from \"react\";\n\nconst PieceQueue = ({ player }) => {\n   const opponentPieces = useSelector((state) => state.gameState2.opponentPieceQueue);\n   const queueChanged = useSelector((state) => state.gameState2.myTurn);\n   let i = 0;\n   let pieces = [];\n   if (player === \"mine\") {\n      if (pieceQueue.isEmpty) {\n         return <div className={styles.pieceQueue}></div>;\n      }\n\n      for (let pieceColor in pieceQueue.elements) {\n         pieces.push(<PieceQueuePiece key={i++} color={pieceQueue.elements[pieceColor]} />);\n      }\n      return (\n         <Fragment>\n            <div className={styles.pieceQueue}>{pieces}</div>\n         </Fragment>\n      );\n   } else if (player === \"opponent\") {\n      if (!opponentPieces || opponentPieces.isEmpty) {\n         return <div className={styles.pieceQueue}></div>;\n      }\n      for (let pieceColor in opponentPieces) {\n         if (!pieceColor) {\n            continue;\n         }\n         pieces.push(<PieceQueuePiece key={i++} color={opponentPieces[pieceColor]} />);\n      }\n      return (\n         <Fragment>\n            <div className={styles.pieceQueue}>\n               {pieces}\n            </div>\n         </Fragment>\n      );\n   }\n};\n\nexport default PieceQueue;\n","/Users/albert/Desktop/-/src/Components/Multiplayer/Components/PieceQueuePiece.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/Tetrimino.js",["224"],"/Users/albert/Desktop/-/src/Components/GameUI/StopWatch.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/WhoseTurnText.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/LineClearedCounter.js",[],"/Users/albert/Desktop/-/src/Components/Multiplayer/Components/InputForm.js",["225"],"import { child, off, onValue, set } from \"@firebase/database\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { gameStateActions2, myRoomRef } from \"../../../store/GameState2\";\n\nconst InputForm = () => {\n   const dispatch = useDispatch();\n   const linesToClear = useSelector((state) => state.gameState2.linesToClear);\n   const [linesToClearInput, setLinesToClearInput] = useState(linesToClear);\n\n   const setLinesToClearInputChange = (event) => {\n      if (linesToClearInput <= 0) {\n         return;\n      } else {\n         setLinesToClearInput(+event.target.value);\n      }\n   };\n   const setLinesToClearHandler = () => {\n      off(child(myRoomRef, \"linesToClear\"));\n      dispatch(gameStateActions2.setLinesToClear(linesToClearInput));\n      set(child(myRoomRef, \"linesToClear\"), linesToClearInput);\n   };\n\n\n   onValue(child(myRoomRef, \"linesToClear\"),(snapshot)=>{\n    if(snapshot.exists()){\n        // setLinesToClearInput(snapshot.val())\n        dispatch(gameStateActions2.setLinesToClear(snapshot.val()))\n    }\n   });\n\n   return (\n      <div>\n         <label id=\"lines\">Lines to Clear </label>\n         <input\n            id=\"lines\"\n            type=\"number\"\n            value={linesToClearInput}\n            onChange={setLinesToClearInputChange}\n         ></input>\n         <button onClick={setLinesToClearHandler}>set</button>\n         <span> Current amount is {linesToClear}</span>\n      </div>\n   );\n};\n\nexport default InputForm;\n","/Users/albert/Desktop/-/src/Components/UI/Modal.js",[],"/Users/albert/Desktop/-/src/Components/UI/NavigationBar.js",[],"/Users/albert/Desktop/-/src/store/Controls.js",[],"/Users/albert/Desktop/-/src/Components/KeyBindings/KeyBindings.js",[],"/Users/albert/Desktop/-/src/Components/KeyBindings/KeyBinding.js",["226","227","228"],"import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst KeyBinding = ({ controlName, input, setInput, currentKey }) => {\n   const [bindingBeingChanged, setBindingBeingChanged] = useState(false);\n   useEffect(() => {\n      document.onkeydown = (keycode) => {\n         if (bindingBeingChanged) {\n            setInput(keycode.key);\n         }\n      };\n   }, [bindingBeingChanged]);\n   let displayWord = input;\n   if (displayWord === \" \") {\n      displayWord = \"space\";\n   }\n   useEffect(() => {\n      setInput(currentKey);\n   },[currentKey]);\n   return (\n      <div>\n         <label id={controlName}>{`${controlName} `}</label>\n         <input\n            onChange={(event) => {\n               if (event.target.value.length === 1) {\n                  event.target.blur();\n               }\n            }}\n            onFocus={(event) => {\n               setInput(\"\");\n               setBindingBeingChanged(true);\n            }}\n            onBlur={(event) => {\n               if (event.target.value === \"\") {\n                  setInput(currentKey);\n               }\n               setBindingBeingChanged(false);\n            }}\n            id={controlName}\n            value={displayWord}\n         ></input>\n      </div>\n   );\n};\nexport default KeyBinding;\n","/Users/albert/Desktop/-/src/Components/Multiplayer/InnerGame.js",["229","230","231"],"import { child, off, set } from \"@firebase/database\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { keyIsDisabled, keyIsPressed, keyShiftCounter } from \"../../modules/KeyControls\";\nimport { gameStateActions2, myRoomRef, pieceQueue } from \"../../store/GameState2\";\n\nlet controlsLocked = false;\n\nconst InnerGame = () => {\n   const dispatch = useDispatch();\n\n   const controls = useSelector((state) => state.controls);\n\n   const playerNumber = useSelector((state) => state.gameState2.playerNumber);\n   const opponentName = useSelector((state) => state.userInfo.opponentName);\n\n   const myTurn = useSelector((state) => state.gameState2.myTurn);\n   const displayMessage = useSelector((state) => state.gameState2.displayMessage);\n   const gameRunning = useSelector((state) => state.gameState2.gameRunning);\n   const currentGameStatus = useSelector((state) => state.gameState2.currentGameStatus);\n   const grid = useSelector((state) => state.gameState2.grid);\n   useEffect(() => {\n      if (gameRunning && myTurn) {\n         off(child(myRoomRef, \"grid\"));\n         dispatch(gameStateActions2.getNewPiece(opponentName));\n         set(\n            child(myRoomRef, `player${playerNumber}GameInfo/gameQueue`),\n            pieceQueue.elements\n         );\n         dispatch(gameStateActions2.placeCurrentPiece());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         const dropPieceInterval = setInterval(() => {\n            gameLoop();\n         }, 300);\n         const handleInputInterval = setInterval(() => {\n            keyHandler();\n         }, 1);\n         const shiftInputInterval = setInterval(() => {\n            keyShiftHandler();\n         }, 1);\n         return () => {\n            clearInterval(dropPieceInterval);\n            clearInterval(handleInputInterval);\n            clearInterval(shiftInputInterval);\n         };\n      }\n   }, [myTurn, gameRunning,dispatch]);\n\n   const keyShiftHandler = async () => {\n      for (let key in keyShiftCounter) {\n         if (keyShiftCounter[key]) {\n            keyShiftCounter[key] += 1;\n         }\n      }\n      if (\n         keyIsPressed[controls[\"softDrop\"]] &&\n         keyIsDisabled[controls[\"softDrop\"]] &&\n         keyShiftCounter[controls[\"softDrop\"]] > 40\n      ) {\n         dispatch(gameStateActions2.dropPiece());\n\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n         keyShiftCounter[controls[\"softDrop\"]] = 30;\n      }\n      if (\n         keyIsPressed[controls[\"moveRight\"]] &&\n         keyIsDisabled[controls[\"moveRight\"]] &&\n         keyShiftCounter[controls[\"moveRight\"]] > 40\n      ) {\n         dispatch(gameStateActions2.shiftRight());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n         keyShiftCounter[controls[\"moveRight\"]] = 30;\n      }\n      if (\n         keyIsPressed[controls[\"moveLeft\"]] &&\n         keyIsDisabled[controls[\"moveLeft\"]] &&\n         keyShiftCounter[controls[\"moveLeft\"]] > 40\n      ) {\n         dispatch(gameStateActions2.shiftLeft());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n         keyShiftCounter[controls[\"moveLeft\"]] = 30;\n      }\n   };\n   const keyHandler = async () => {\n      if (!gameRunning || controlsLocked) {\n         return;\n      }\n      if (keyIsPressed[controls[\"rotateLeft\"]] && !keyIsDisabled[controls[\"rotateLeft\"]]) {\n         dispatch(gameStateActions2.rotatePiece(true));\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"rotateLeft\"]] = true;\n      }\n      if (keyIsPressed[controls[\"rotateRight\"]] && !keyIsDisabled[controls[\"rotateRight\"]]) {\n         dispatch(gameStateActions2.rotatePiece(false));\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"rotateRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"hardDrop\"]] && !keyIsDisabled[controls[\"hardDrop\"]]) {\n         controlsLocked = true;\n         dispatch(gameStateActions2.hardDrop());\n         dispatch(gameStateActions2.clearLines());\n         keyIsDisabled[controls[\"hardDrop\"]] = true;\n         dispatch(gameStateActions2.setTurnTaken(true));\n         setTimeout(() => {\n            controlsLocked = false;\n            \n         }, 400);\n      }\n      if (keyIsPressed[controls[\"softDrop\"]] && !keyIsDisabled[controls[\"softDrop\"]]) {\n         keyShiftCounter[controls[\"softDrop\"]] = 1;\n         dispatch(gameStateActions2.dropPiece());\n         dispatch(gameStateActions2.clearLines());\n         dispatch(gameStateActions2.checkIfGameWon());\n         keyIsDisabled[controls[\"softDrop\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveRight\"]] && !keyIsDisabled[controls[\"moveRight\"]]) {\n         keyShiftCounter[controls[\"moveRight\"]] = 1;\n         dispatch(gameStateActions2.shiftRight());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveRight\"]] = true;\n      }\n      if (keyIsPressed[controls[\"moveLeft\"]] && !keyIsDisabled[controls[\"moveLeft\"]]) {\n         keyShiftCounter[controls[\"moveLeft\"]] = 1;\n         dispatch(gameStateActions2.shiftLeft());\n         dispatch(gameStateActions2.getGhostCoords());\n         dispatch(gameStateActions2.showGhostPiece());\n         keyIsDisabled[controls[\"moveLeft\"]] = true;\n      }\n   };\n   const gameLoop = async () => {\n      dispatch(gameStateActions2.dropPiece());\n      dispatch(gameStateActions2.getGhostCoords());\n      dispatch(gameStateActions2.showGhostPiece());\n   };\n   useEffect(() => {\n      if (myTurn) {\n         set(child(myRoomRef, \"grid\"), grid);\n      }\n   }, [grid,myTurn]);\n\n   return;\n};\nexport default InnerGame;\n","/Users/albert/Desktop/-/src/Components/UI/Login.js",[],"/Users/albert/Desktop/-/src/Components/UI/Card.js",[],{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","severity":1,"message":"237","line":1,"column":10,"nodeType":"238","messageId":"239","endLine":1,"endColumn":19},{"ruleId":"236","severity":1,"message":"240","line":3,"column":10,"nodeType":"238","messageId":"239","endLine":3,"endColumn":21},{"ruleId":"236","severity":1,"message":"241","line":5,"column":8,"nodeType":"238","messageId":"239","endLine":5,"endColumn":13},{"ruleId":"236","severity":1,"message":"242","line":10,"column":8,"nodeType":"238","messageId":"239","endLine":10,"endColumn":12},{"ruleId":"236","severity":1,"message":"237","line":27,"column":10,"nodeType":"238","messageId":"239","endLine":27,"endColumn":19},{"ruleId":"236","severity":1,"message":"243","line":21,"column":7,"nodeType":"238","messageId":"239","endLine":21,"endColumn":10},{"ruleId":"236","severity":1,"message":"244","line":7,"column":11,"nodeType":"238","messageId":"239","endLine":7,"endColumn":23},{"ruleId":"236","severity":1,"message":"245","line":2,"column":10,"nodeType":"238","messageId":"239","endLine":2,"endColumn":21},{"ruleId":"236","severity":1,"message":"246","line":8,"column":10,"nodeType":"238","messageId":"239","endLine":8,"endColumn":17},{"ruleId":"247","severity":1,"message":"248","line":161,"column":3,"nodeType":"249","messageId":"250","endLine":176,"endColumn":4},{"ruleId":"236","severity":1,"message":"251","line":11,"column":8,"nodeType":"238","messageId":"239","endLine":11,"endColumn":17},{"ruleId":"236","severity":1,"message":"252","line":1,"column":37,"nodeType":"238","messageId":"239","endLine":1,"endColumn":45},{"ruleId":"236","severity":1,"message":"253","line":4,"column":40,"nodeType":"238","messageId":"239","endLine":4,"endColumn":44},{"ruleId":"236","severity":1,"message":"254","line":13,"column":4,"nodeType":"238","messageId":"239","endLine":13,"endColumn":17},{"ruleId":"236","severity":1,"message":"255","line":14,"column":4,"nodeType":"238","messageId":"239","endLine":14,"endColumn":16},{"ruleId":"236","severity":1,"message":"256","line":15,"column":4,"nodeType":"238","messageId":"239","endLine":15,"endColumn":19},{"ruleId":"236","severity":1,"message":"257","line":29,"column":10,"nodeType":"238","messageId":"239","endLine":29,"endColumn":22},{"ruleId":"258","severity":1,"message":"259","line":69,"column":7,"nodeType":"260","endLine":69,"endColumn":58,"suggestions":"261"},{"ruleId":"258","severity":1,"message":"262","line":82,"column":7,"nodeType":"260","endLine":82,"endColumn":20,"suggestions":"263"},{"ruleId":"258","severity":1,"message":"264","line":89,"column":7,"nodeType":"260","endLine":89,"endColumn":44,"suggestions":"265"},{"ruleId":"236","severity":1,"message":"266","line":5,"column":10,"nodeType":"238","messageId":"239","endLine":5,"endColumn":14},{"ruleId":"236","severity":1,"message":"267","line":5,"column":16,"nodeType":"238","messageId":"239","endLine":5,"endColumn":34},{"ruleId":"236","severity":1,"message":"245","line":1,"column":23,"nodeType":"238","messageId":"239","endLine":1,"endColumn":34},{"ruleId":"236","severity":1,"message":"268","line":5,"column":20,"nodeType":"238","messageId":"239","endLine":5,"endColumn":24},{"ruleId":"236","severity":1,"message":"244","line":9,"column":10,"nodeType":"238","messageId":"239","endLine":9,"endColumn":22},{"ruleId":"247","severity":1,"message":"248","line":161,"column":3,"nodeType":"249","messageId":"250","endLine":176,"endColumn":4},{"ruleId":"236","severity":1,"message":"237","line":2,"column":10,"nodeType":"238","messageId":"239","endLine":2,"endColumn":19},{"ruleId":"236","severity":1,"message":"240","line":2,"column":10,"nodeType":"238","messageId":"239","endLine":2,"endColumn":21},{"ruleId":"258","severity":1,"message":"269","line":12,"column":7,"nodeType":"260","endLine":12,"endColumn":28,"suggestions":"270"},{"ruleId":"258","severity":1,"message":"269","line":19,"column":6,"nodeType":"260","endLine":19,"endColumn":18,"suggestions":"271"},{"ruleId":"236","severity":1,"message":"272","line":18,"column":10,"nodeType":"238","messageId":"239","endLine":18,"endColumn":24},{"ruleId":"236","severity":1,"message":"273","line":20,"column":10,"nodeType":"238","messageId":"239","endLine":20,"endColumn":27},{"ruleId":"258","severity":1,"message":"274","line":48,"column":7,"nodeType":"260","endLine":48,"endColumn":37,"suggestions":"275"},"no-native-reassign",["276"],"no-negated-in-lhs",["277"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'Login' is defined but never used.","'Game' is defined but never used.","'app' is assigned a value but never used.","'queueChanged' is assigned a value but never used.","'useDispatch' is defined but never used.","'roomKey' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'HowToPlay' is defined but never used.","'useState' is defined but never used.","'grid' is defined but never used.","'keyIsDisabled' is defined but never used.","'keyIsPressed' is defined but never used.","'keyShiftCounter' is defined but never used.","'opponentName' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'playerNumber'. Either include it or remove the dependency array.","ArrayExpression",["278"],"React Hook useEffect has missing dependencies: 'dispatch', 'myLinesCleared', and 'playerNumber'. Either include them or remove the dependency array.",["279"],"React Hook useEffect has a missing dependency: 'playerNumber'. Either include it or remove the dependency array. Outer scope values like 'pieceQueue.elements' aren't valid dependencies because mutating them doesn't re-render the component.",["280"],"'auth' is defined but never used.","'getUsernameFromuid' is defined but never used.","'memo' is defined but never used.","React Hook useEffect has a missing dependency: 'setInput'. Either include it or remove the dependency array. If 'setInput' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["281"],["282"],"'displayMessage' is assigned a value but never used.","'currentGameStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'gameLoop', 'keyHandler', 'keyShiftHandler', 'opponentName', and 'playerNumber'. Either include them or remove the dependency array.",["283"],"no-global-assign","no-unsafe-negation",{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},"Update the dependencies array to be: [myLinesCleared, linesToClear, dispatch, turnTaken, playerNumber]",{"range":"296","text":"297"},"Update the dependencies array to be: [dispatch, gameRunning, myLinesCleared, playerNumber]",{"range":"298","text":"299"},"Update the dependencies array to be: [myLinesCleared, playerNumber]",{"range":"300","text":"301"},"Update the dependencies array to be: [bindingBeingChanged, setInput]",{"range":"302","text":"303"},"Update the dependencies array to be: [currentKey, setInput]",{"range":"304","text":"305"},"Update the dependencies array to be: [myTurn, gameRunning, dispatch, opponentName, playerNumber, gameLoop, keyHandler, keyShiftHandler]",{"range":"306","text":"307"},[2603,2654],"[myLinesCleared, linesToClear, dispatch, turnTaken, playerNumber]",[3037,3050],"[dispatch, gameRunning, myLinesCleared, playerNumber]",[3234,3271],"[myLinesCleared, playerNumber]",[394,415],"[bindingBeingChanged, setInput]",[564,576],"[currentKey, setInput]",[1956,1986],"[myTurn, gameRunning, dispatch, opponentName, playerNumber, gameLoop, keyHandler, keyShiftHandler]"]